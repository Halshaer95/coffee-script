/**
 * CoffeeScript Compiler v1.10.0
 * http://coffeescript.org
 *
 * Copyright 2011, Jeremy Ashkenas
 * Released under the MIT License
 */
(function(root) {
  var CoffeeScript = function() {
    function require(path){ return require[path]; }
    require['iced-runtime-3'] = /**
 * CoffeeScript Compiler v1.10.0
 * http://coffeescript.org
 *
 * Copyright 2011, Jeremy Ashkenas
 * Released under the MIT License
 */
(function() {
  function require(path){ return require[path]; }
  require['./const'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    k: "__iced_k",
    k_noop: "__iced_k_noop",
    param: "__iced_p_",
    ns: "iced",
    runtime: "runtime",
    Deferrals: "Deferrals",
    deferrals: "__iced_deferrals",
    fulfill: "_fulfill",
    b_while: "_break",
    t_while: "_while",
    c_while: "_continue",
    n_while: "_next",
    n_arg: "__iced_next_arg",
    defer_method: "defer",
    slot: "__slot",
    assign_fn: "assign_fn",
    autocb: "autocb",
    retslot: "ret",
    trace: "__iced_trace",
    passed_deferral: "__iced_passed_deferral",
    findDeferral: "findDeferral",
    lineno: "lineno",
    parent: "parent",
    filename: "filename",
    funcname: "funcname",
    catchExceptions: 'catchExceptions',
    runtime_modes: ["node", "inline", "window", "none", "browserify", "interp"],
    trampoline: "trampoline",
    context: "context",
    defer_arg: "__iced_defer_",
    iterator: "__iced_it",
    await_exit: "await_exit"
  };

}).call(this);

  return module.exports;
})();require['./runtime'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var C, Deferrals, Rendezvous, __active_trace, __c, _trace_to_string, exceptionHandler, findDeferral, make_defer_return, stackWalk, tick_counter, trampoline, warn,
    slice = [].slice;

  C = require('./const');

  make_defer_return = function(obj, defer_args, id, trace_template, multi) {
    var k, ret, trace, v;
    trace = {};
    for (k in trace_template) {
      v = trace_template[k];
      trace[k] = v;
    }
    trace[C.lineno] = defer_args != null ? defer_args[C.lineno] : void 0;
    ret = function() {
      var inner_args, o, ref;
      inner_args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (defer_args != null) {
        if ((ref = defer_args.assign_fn) != null) {
          ref.apply(null, inner_args);
        }
      }
      if (obj) {
        o = obj;
        if (!multi) {
          obj = null;
        }
        return o._fulfill(id, trace);
      } else {
        return warn("overused deferral at " + (_trace_to_string(trace)));
      }
    };
    ret[C.trace] = trace;
    return ret;
  };

  __c = 0;

  tick_counter = function(mod) {
    __c++;
    if ((__c % mod) === 0) {
      __c = 0;
      return true;
    } else {
      return false;
    }
  };

  __active_trace = null;

  _trace_to_string = function(tr) {
    var fn;
    fn = tr[C.funcname] || "<anonymous>";
    return fn + " (" + tr[C.filename] + ":" + (tr[C.lineno] + 1) + ")";
  };

  warn = function(m) {
    return typeof console !== "undefined" && console !== null ? console.error("ICED warning: " + m) : void 0;
  };

  exports.trampoline = trampoline = function(fn) {
    if (!tick_counter(500)) {
      return fn();
    } else if ((typeof process !== "undefined" && process !== null ? process.nextTick : void 0) != null) {
      return process.nextTick(fn);
    } else {
      return setTimeout(fn);
    }
  };

  exports.Deferrals = Deferrals = (function() {
    function Deferrals(iterator, trace1) {
      this.iterator = iterator;
      this.trace = trace1;
      this.count = 1;
      this.ret = null;
      this.yielded = false;
    }

    Deferrals.prototype._call = function(trace) {
      var i;
      if (this.iterator) {
        __active_trace = trace;
        i = this.iterator;
        this.iterator = null;
        if (this.yielded) {
          return i.next(this.ret);
        }
      } else {
        return warn("Entered dead await at " + (_trace_to_string(trace)));
      }
    };

    Deferrals.prototype._fulfill = function(id, trace) {
      if (--this.count <= 0) {
        return this._call(trace);
      }
    };

    Deferrals.prototype.await_exit = function() {
      this._fulfill();
      if (this.count === 0) {
        this.iterator = null;
        return false;
      } else {
        this.yielded = true;
        return true;
      }
    };

    Deferrals.prototype.defer = function(args) {
      var self;
      this.count++;
      self = this;
      return make_defer_return(self, args, null, this.trace);
    };

    return Deferrals;

  })();

  exports.findDeferral = findDeferral = function(args) {
    var a, j, len;
    for (j = 0, len = args.length; j < len; j++) {
      a = args[j];
      if (a != null ? a[C.trace] : void 0) {
        return a;
      }
    }
    return null;
  };

  exports.Rendezvous = Rendezvous = (function() {
    var RvId;

    function Rendezvous() {
      this.completed = [];
      this.waiters = [];
      this.defer_id = 0;
    }

    RvId = (function() {
      function RvId(rv, id1, multi1) {
        this.rv = rv;
        this.id = id1;
        this.multi = multi1;
      }

      RvId.prototype.defer = function(defer_args) {
        return this.rv._defer_with_id(this.id, defer_args, this.multi);
      };

      return RvId;

    })();

    Rendezvous.prototype.wait = function(cb) {
      var x;
      if (this.completed.length) {
        x = this.completed.shift();
        return cb(x);
      } else {
        return this.waiters.push(cb);
      }
    };

    Rendezvous.prototype.defer = function(defer_args) {
      var id;
      id = this.defer_id++;
      return this._defer_with_id(id, defer_args);
    };

    Rendezvous.prototype.id = function(i, multi) {
      multi = !!multi;
      return new RvId(this, i, multi);
    };

    Rendezvous.prototype._fulfill = function(id, trace) {
      var cb;
      if (this.waiters.length) {
        cb = this.waiters.shift();
        return cb(id);
      } else {
        return this.completed.push(id);
      }
    };

    Rendezvous.prototype._defer_with_id = function(id, defer_args, multi) {
      this.count++;
      return make_defer_return(this, defer_args, id, {}, multi);
    };

    return Rendezvous;

  })();

  exports.stackWalk = stackWalk = function(cb) {
    var line, ref, ret, tr;
    ret = [];
    tr = cb ? cb[C.trace] : __active_trace;
    while (tr) {
      line = "   at " + (_trace_to_string(tr));
      ret.push(line);
      tr = tr != null ? (ref = tr[C.parent]) != null ? ref[C.trace] : void 0 : void 0;
    }
    return ret;
  };

  exports.exceptionHandler = exceptionHandler = function(err, logger) {
    var stack;
    if (!logger) {
      logger = console.error;
    }
    logger(err.stack);
    stack = stackWalk();
    if (stack.length) {
      logger("Iced 'stack' trace (w/ real line numbers):");
      return logger(stack.join("\n"));
    }
  };

  exports.catchExceptions = function(logger) {
    return typeof process !== "undefined" && process !== null ? process.on('uncaughtException', function(err) {
      exceptionHandler(err, logger);
      return process.exit(1);
    }) : void 0;
  };

}).call(this);

  return module.exports;
})();require['./library'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var C, Pipeliner, _iand, _ior, _timeout, iced,
    slice = [].slice;



  C = require('./const');

  exports.iced = iced = require('./runtime');

  _timeout = function(cb, t, res, tmp) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var arr, rv, which;
      return function*() {
        var __iced_deferrals;
        rv = new iced.Rendezvous;
        tmp[0] = rv.id(true).defer({
          assign_fn: (function() {
            return function() {
              return arr = slice.call(arguments, 0);
            };
          })(),
          lineno: 20,
          context: __iced_deferrals
        });
        setTimeout(rv.id(false).defer({
          lineno: 21,
          context: __iced_deferrals
        }), t);
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral
        });
        rv.wait(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return which = arguments[0];
            };
          })(),
          lineno: 22
        }));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        if (res) {
          res[0] = which;
        }
        return cb.apply(null, arr);
      };
    })(this)();
    return __iced_it.next();
  };

  exports.timeout = function(cb, t, res) {
    var tmp;
    tmp = [];
    _timeout(cb, t, res, tmp);
    return tmp[0];
  };

  _iand = function(cb, res, tmp) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var ok;
      return function*() {
        var __iced_deferrals;
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral
        });
        tmp[0] = __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ok = arguments[0];
            };
          })(),
          lineno: 39
        });
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        if (!ok) {
          res[0] = false;
        }
        return cb();
      };
    })(this)();
    return __iced_it.next();
  };

  exports.iand = function(cb, res) {
    var tmp;
    tmp = [];
    _iand(cb, res, tmp);
    return tmp[0];
  };

  _ior = function(cb, res, tmp) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var ok;
      return function*() {
        var __iced_deferrals;
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral
        });
        tmp[0] = __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ok = arguments[0];
            };
          })(),
          lineno: 58
        });
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        if (ok) {
          res[0] = true;
        }
        return cb();
      };
    })(this)();
    return __iced_it.next();
  };

  exports.ior = function(cb, res) {
    var tmp;
    tmp = [];
    _ior(cb, res, tmp);
    return tmp[0];
  };

  exports.Pipeliner = Pipeliner = (function() {
    function Pipeliner(window, delay) {
      this.window = window || 1;
      this.delay = delay || 0;
      this.queue = [];
      this.n_out = 0;
      this.cb = null;
      this[C.deferrals] = this;
      this["defer"] = this._defer;
    }

    Pipeliner.prototype.waitInQueue = function(cb) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        return function*() {
          var __iced_deferrals, __iced_deferrals1;
          while (_this.n_out >= _this.window) {
            __iced_deferrals = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Pipeliner.waitInQueue"
            });
            _this.cb = __iced_deferrals.defer({
              lineno: 100
            });
            if (__iced_deferrals.await_exit()) {
              yield;
            }
          }
          _this.n_out++;
          if (_this.delay) {
            __iced_deferrals1 = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Pipeliner.waitInQueue"
            });
            setTimeout(__iced_deferrals1.defer({
              lineno: 108
            }), _this.delay);
            if (__iced_deferrals1.await_exit()) {
              yield;
            }
          }
          return cb();
        };
      })(this)();
      return __iced_it.next();
    };

    Pipeliner.prototype.__defer = function(out, deferArgs) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        var tmp, voidCb;
        return function*() {
          var __iced_deferrals;
          __iced_deferrals = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Pipeliner.__defer"
          });
          voidCb = __iced_deferrals.defer({
            lineno: 122
          });
          out[0] = function() {
            var args, ref;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            if ((ref = deferArgs.assign_fn) != null) {
              ref.apply(null, args);
            }
            return voidCb();
          };
          if (__iced_deferrals.await_exit()) {
            yield;
          }
          _this.n_out--;
          if (_this.cb) {
            tmp = _this.cb;
            _this.cb = null;
            return tmp();
          }
        };
      })(this)();
      return __iced_it.next();
    };

    Pipeliner.prototype._defer = function(deferArgs) {
      var tmp;
      tmp = [];
      this.__defer(tmp, deferArgs);
      return tmp[0];
    };

    Pipeliner.prototype.flush = function(cb) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        return function*() {
          var __iced_deferrals;
          while (_this.n_out) {
            __iced_deferrals = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Pipeliner.flush"
            });
            _this.cb = __iced_deferrals.defer({
              lineno: 151
            });
            if (__iced_deferrals.await_exit()) {
              yield;
            }
          }
          return cb();
        };
      })(this)();
      return __iced_it.next();
    };

    return Pipeliner;

  })();

}).call(this);

  return module.exports;
})();require['./main'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var i, k, len, mod, mods, v;

  exports["const"] = require('./const');

  mods = [require('./runtime'), require('./library')];

  for (i = 0, len = mods.length; i < len; i++) {
    mod = mods[i];
    for (k in mod) {
      v = mod[k];
      exports[k] = v;
    }
  }

}).call(this);

  return module.exports;
})();
  return require['./main'];
}());;
require['./helpers'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var buildLocationData, extend, flatten, ref, repeat, syntaxErrorToString;

  exports.starts = function(string, literal, start) {
    return literal === string.substr(start, literal.length);
  };

  exports.ends = function(string, literal, back) {
    var len;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  };

  exports.repeat = repeat = function(str, n) {
    var res;
    res = '';
    while (n > 0) {
      if (n & 1) {
        res += str;
      }
      n >>>= 1;
      str += str;
    }
    return res;
  };

  exports.compact = function(array) {
    var i, item, len1, results;
    results = [];
    for (i = 0, len1 = array.length; i < len1; i++) {
      item = array[i];
      if (item) {
        results.push(item);
      }
    }
    return results;
  };

  exports.count = function(string, substr) {
    var num, pos;
    num = pos = 0;
    if (!substr.length) {
      return 1 / 0;
    }
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  };

  exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.flatten = flatten = function(array) {
    var element, flattened, i, len1;
    flattened = [];
    for (i = 0, len1 = array.length; i < len1; i++) {
      element = array[i];
      if ('[object Array]' === Object.prototype.toString.call(element)) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  exports.del = function(obj, key) {
    var val;
    val = obj[key];
    delete obj[key];
    return val;
  };

  exports.some = (ref = Array.prototype.some) != null ? ref : function(fn) {
    var e, i, len1;
    for (i = 0, len1 = this.length; i < len1; i++) {
      e = this[i];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  };

  exports.invertLiterate = function(code) {
    var line, lines, maybe_code;
    maybe_code = true;
    lines = (function() {
      var i, len1, ref1, results;
      ref1 = code.split('\n');
      results = [];
      for (i = 0, len1 = ref1.length; i < len1; i++) {
        line = ref1[i];
        if (maybe_code && /^([ ]{4}|[ ]{0,3}\t)/.test(line)) {
          results.push(line);
        } else if (maybe_code = /^\s*$/.test(line)) {
          results.push(line);
        } else {
          results.push('# ' + line);
        }
      }
      return results;
    })();
    return lines.join('\n');
  };

  buildLocationData = function(first, last) {
    if (!last) {
      return first;
    } else {
      return {
        first_line: first.first_line,
        first_column: first.first_column,
        last_line: last.last_line,
        last_column: last.last_column
      };
    }
  };

  exports.addLocationDataFn = function(first, last) {
    return function(obj) {
      if (((typeof obj) === 'object') && (!!obj['updateLocationDataIfMissing'])) {
        obj.updateLocationDataIfMissing(buildLocationData(first, last));
      }
      return obj;
    };
  };

  exports.locationDataToString = function(obj) {
    var locationData;
    if (("2" in obj) && ("first_line" in obj[2])) {
      locationData = obj[2];
    } else if ("first_line" in obj) {
      locationData = obj;
    }
    if (locationData) {
      return ((locationData.first_line + 1) + ":" + (locationData.first_column + 1) + "-") + ((locationData.last_line + 1) + ":" + (locationData.last_column + 1));
    } else {
      return "No location data";
    }
  };

  exports.baseFileName = function(file, stripExt, useWinPathSep) {
    var parts, pathSep;
    if (stripExt == null) {
      stripExt = false;
    }
    if (useWinPathSep == null) {
      useWinPathSep = false;
    }
    pathSep = useWinPathSep ? /\\|\// : /\//;
    parts = file.split(pathSep);
    file = parts[parts.length - 1];
    if (!(stripExt && file.indexOf('.') >= 0)) {
      return file;
    }
    parts = file.split('.');
    parts.pop();
    if (parts[parts.length - 1] === 'coffee' && parts.length > 1) {
      parts.pop();
    }
    return parts.join('.');
  };

  exports.isCoffee = function(file) {
    return /\.((lit)?coffee|coffee\.md)$/.test(file);
  };

  exports.isLiterate = function(file) {
    return /\.(litcoffee|coffee\.md)$/.test(file);
  };

  exports.throwSyntaxError = function(message, location) {
    var error;
    error = new SyntaxError(message);
    error.location = location;
    error.toString = syntaxErrorToString;
    error.stack = error.toString();
    throw error;
  };

  exports.updateSyntaxError = function(error, code, filename) {
    if (error.toString === syntaxErrorToString) {
      error.code || (error.code = code);
      error.filename || (error.filename = filename);
      error.stack = error.toString();
    }
    return error;
  };

  syntaxErrorToString = function() {
    var codeLine, colorize, colorsEnabled, end, filename, first_column, first_line, last_column, last_line, marker, ref1, ref2, ref3, ref4, start;
    if (!(this.code && this.location)) {
      return Error.prototype.toString.call(this);
    }
    ref1 = this.location, first_line = ref1.first_line, first_column = ref1.first_column, last_line = ref1.last_line, last_column = ref1.last_column;
    if (last_line == null) {
      last_line = first_line;
    }
    if (last_column == null) {
      last_column = first_column;
    }
    filename = this.filename || '[stdin]';
    codeLine = this.code.split('\n')[first_line];
    start = first_column;
    end = first_line === last_line ? last_column + 1 : codeLine.length;
    marker = codeLine.slice(0, start).replace(/[^\s]/g, ' ') + repeat('^', end - start);
    if (typeof process !== "undefined" && process !== null) {
      colorsEnabled = ((ref2 = process.stdout) != null ? ref2.isTTY : void 0) && !((ref3 = process.env) != null ? ref3.NODE_DISABLE_COLORS : void 0);
    }
    if ((ref4 = this.colorful) != null ? ref4 : colorsEnabled) {
      colorize = function(str) {
        return "\x1B[1;31m" + str + "\x1B[0m";
      };
      codeLine = codeLine.slice(0, start) + colorize(codeLine.slice(start, end)) + codeLine.slice(end);
      marker = colorize(marker);
    }
    return filename + ":" + (first_line + 1) + ":" + (first_column + 1) + ": error: " + this.message + "\n" + codeLine + "\n" + marker;
  };

  exports.nameWhitespaceCharacter = function(string) {
    switch (string) {
      case ' ':
        return 'space';
      case '\n':
        return 'newline';
      case '\r':
        return 'carriage return';
      case '\t':
        return 'tab';
      default:
        return string;
    }
  };

  exports.strToJavascript = function(source) {
    var lines;
    lines = source.split('\n');
    lines = lines.map(function(line) {
      return line.replace(/\\/g, '\\\\').replace(/'/g, "\\'");
    });
    return "'" + (lines.join('\\n')) + "'";
  };

}).call(this);

  return module.exports;
})();require['./rewriter'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var BALANCED_PAIRS, CALL_CLOSERS, EXPRESSION_CLOSE, EXPRESSION_END, EXPRESSION_START, IMPLICIT_CALL, IMPLICIT_END, IMPLICIT_FUNC, IMPLICIT_UNSPACED_CALL, INVERSES, LINEBREAKS, SINGLE_CLOSERS, SINGLE_LINERS, generate, k, left, len, ref, rite,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  generate = function(tag, value, origin) {
    var tok;
    tok = [tag, value];
    tok.generated = true;
    if (origin) {
      tok.origin = origin;
    }
    return tok;
  };

  exports.Rewriter = (function() {
    function Rewriter() {}

    Rewriter.prototype.rewrite = function(tokens1) {
      this.tokens = tokens1;
      this.removeLeadingNewlines();
      this.closeOpenCalls();
      this.closeOpenIndexes();
      this.normalizeLines();
      this.tagPostfixConditionals();
      this.addImplicitBracesAndParens();
      this.addLocationDataToGeneratedTokens();
      return this.tokens;
    };

    Rewriter.prototype.scanTokens = function(block) {
      var i, token, tokens;
      tokens = this.tokens;
      i = 0;
      while (token = tokens[i]) {
        i += block.call(this, token, i, tokens);
      }
      return true;
    };

    Rewriter.prototype.detectEnd = function(i, condition, action) {
      var levels, ref, ref1, token, tokens;
      tokens = this.tokens;
      levels = 0;
      while (token = tokens[i]) {
        if (levels === 0 && condition.call(this, token, i)) {
          return action.call(this, token, i);
        }
        if (!token || levels < 0) {
          return action.call(this, token, i - 1);
        }
        if (ref = token[0], indexOf.call(EXPRESSION_START, ref) >= 0) {
          levels += 1;
        } else if (ref1 = token[0], indexOf.call(EXPRESSION_END, ref1) >= 0) {
          levels -= 1;
        }
        i += 1;
      }
      return i - 1;
    };

    Rewriter.prototype.removeLeadingNewlines = function() {
      var i, k, len, ref, tag;
      ref = this.tokens;
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        tag = ref[i][0];
        if (tag !== 'TERMINATOR') {
          break;
        }
      }
      if (i) {
        return this.tokens.splice(0, i);
      }
    };

    Rewriter.prototype.closeOpenCalls = function() {
      var action, condition;
      condition = function(token, i) {
        var ref;
        return ((ref = token[0]) === ')' || ref === 'CALL_END') || token[0] === 'OUTDENT' && this.tag(i - 1) === ')';
      };
      action = function(token, i) {
        return this.tokens[token[0] === 'OUTDENT' ? i - 1 : i][0] = 'CALL_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'CALL_START') {
          this.detectEnd(i + 1, condition, action);
        }
        return 1;
      });
    };

    Rewriter.prototype.closeOpenIndexes = function() {
      var action, condition;
      condition = function(token, i) {
        var ref;
        return (ref = token[0]) === ']' || ref === 'INDEX_END';
      };
      action = function(token, i) {
        return token[0] = 'INDEX_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'INDEX_START') {
          this.detectEnd(i + 1, condition, action);
        }
        return 1;
      });
    };

    Rewriter.prototype.indexOfTag = function() {
      var fuzz, i, j, k, pattern, ref, ref1;
      i = arguments[0], pattern = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      fuzz = 0;
      for (j = k = 0, ref = pattern.length; 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {
        while (this.tag(i + j + fuzz) === 'HERECOMMENT') {
          fuzz += 2;
        }
        if (pattern[j] == null) {
          continue;
        }
        if (typeof pattern[j] === 'string') {
          pattern[j] = [pattern[j]];
        }
        if (ref1 = this.tag(i + j + fuzz), indexOf.call(pattern[j], ref1) < 0) {
          return -1;
        }
      }
      return i + j + fuzz - 1;
    };

    Rewriter.prototype.looksObjectish = function(j) {
      var end, index;
      if (this.indexOfTag(j, '@', null, ':') > -1 || this.indexOfTag(j, null, ':') > -1) {
        return true;
      }
      index = this.indexOfTag(j, EXPRESSION_START);
      if (index > -1) {
        end = null;
        this.detectEnd(index + 1, (function(token) {
          var ref;
          return ref = token[0], indexOf.call(EXPRESSION_END, ref) >= 0;
        }), (function(token, i) {
          return end = i;
        }));
        if (this.tag(end + 1) === ':') {
          return true;
        }
      }
      return false;
    };

    Rewriter.prototype.findTagsBackwards = function(i, tags) {
      var backStack, ref, ref1, ref2, ref3, ref4, ref5;
      backStack = [];
      while (i >= 0 && (backStack.length || (ref2 = this.tag(i), indexOf.call(tags, ref2) < 0) && ((ref3 = this.tag(i), indexOf.call(EXPRESSION_START, ref3) < 0) || this.tokens[i].generated) && (ref4 = this.tag(i), indexOf.call(LINEBREAKS, ref4) < 0))) {
        if (ref = this.tag(i), indexOf.call(EXPRESSION_END, ref) >= 0) {
          backStack.push(this.tag(i));
        }
        if ((ref1 = this.tag(i), indexOf.call(EXPRESSION_START, ref1) >= 0) && backStack.length) {
          backStack.pop();
        }
        i -= 1;
      }
      return ref5 = this.tag(i), indexOf.call(tags, ref5) >= 0;
    };

    Rewriter.prototype.addImplicitBracesAndParens = function() {
      var stack, start;
      stack = [];
      start = null;
      return this.scanTokens(function(token, i, tokens) {
        var endImplicitCall, endImplicitObject, forward, inImplicit, inImplicitCall, inImplicitControl, inImplicitObject, newLine, nextTag, offset, prevTag, prevToken, ref, ref1, ref2, ref3, ref4, ref5, s, sameLine, stackIdx, stackTag, stackTop, startIdx, startImplicitCall, startImplicitObject, startsLine, tag;
        tag = token[0];
        prevTag = (prevToken = i > 0 ? tokens[i - 1] : [])[0];
        nextTag = (i < tokens.length - 1 ? tokens[i + 1] : [])[0];
        stackTop = function() {
          return stack[stack.length - 1];
        };
        startIdx = i;
        forward = function(n) {
          return i - startIdx + n;
        };
        inImplicit = function() {
          var ref, ref1;
          return (ref = stackTop()) != null ? (ref1 = ref[2]) != null ? ref1.ours : void 0 : void 0;
        };
        inImplicitCall = function() {
          var ref;
          return inImplicit() && ((ref = stackTop()) != null ? ref[0] : void 0) === '(';
        };
        inImplicitObject = function() {
          var ref;
          return inImplicit() && ((ref = stackTop()) != null ? ref[0] : void 0) === '{';
        };
        inImplicitControl = function() {
          var ref;
          return inImplicit && ((ref = stackTop()) != null ? ref[0] : void 0) === 'CONTROL';
        };
        startImplicitCall = function(j) {
          var idx;
          idx = j != null ? j : i;
          stack.push([
            '(', idx, {
              ours: true
            }
          ]);
          tokens.splice(idx, 0, generate('CALL_START', '('));
          if (j == null) {
            return i += 1;
          }
        };
        endImplicitCall = function() {
          stack.pop();
          tokens.splice(i, 0, generate('CALL_END', ')', ['', 'end of input', token[2]]));
          return i += 1;
        };
        startImplicitObject = function(j, startsLine) {
          var idx, val;
          if (startsLine == null) {
            startsLine = true;
          }
          idx = j != null ? j : i;
          stack.push([
            '{', idx, {
              sameLine: true,
              startsLine: startsLine,
              ours: true
            }
          ]);
          val = new String('{');
          val.generated = true;
          tokens.splice(idx, 0, generate('{', val, token));
          if (j == null) {
            return i += 1;
          }
        };
        endImplicitObject = function(j) {
          j = j != null ? j : i;
          stack.pop();
          tokens.splice(j, 0, generate('}', '}', token));
          return i += 1;
        };
        if (inImplicitCall() && (tag === 'IF' || tag === 'TRY' || tag === 'FINALLY' || tag === 'CATCH' || tag === 'CLASS' || tag === 'SWITCH')) {
          stack.push([
            'CONTROL', i, {
              ours: true
            }
          ]);
          return forward(1);
        }
        if (tag === 'INDENT' && inImplicit()) {
          if (prevTag !== '=>' && prevTag !== '->' && prevTag !== '[' && prevTag !== '(' && prevTag !== ',' && prevTag !== '{' && prevTag !== 'TRY' && prevTag !== 'ELSE' && prevTag !== '=') {
            while (inImplicitCall()) {
              endImplicitCall();
            }
          }
          if (inImplicitControl()) {
            stack.pop();
          }
          stack.push([tag, i]);
          return forward(1);
        }
        if (indexOf.call(EXPRESSION_START, tag) >= 0) {
          stack.push([tag, i]);
          return forward(1);
        }
        if (indexOf.call(EXPRESSION_END, tag) >= 0) {
          while (inImplicit()) {
            if (inImplicitCall()) {
              endImplicitCall();
            } else if (inImplicitObject()) {
              endImplicitObject();
            } else {
              stack.pop();
            }
          }
          start = stack.pop();
        }
        if ((indexOf.call(IMPLICIT_FUNC, tag) >= 0 && token.spaced || tag === '?' && i > 0 && !tokens[i - 1].spaced) && (indexOf.call(IMPLICIT_CALL, nextTag) >= 0 || indexOf.call(IMPLICIT_UNSPACED_CALL, nextTag) >= 0 && !((ref = tokens[i + 1]) != null ? ref.spaced : void 0) && !((ref1 = tokens[i + 1]) != null ? ref1.newLine : void 0))) {
          if (tag === '?') {
            tag = token[0] = 'FUNC_EXIST';
          }
          startImplicitCall(i + 1);
          return forward(2);
        }
        if (indexOf.call(IMPLICIT_FUNC, tag) >= 0 && this.indexOfTag(i + 1, 'INDENT') > -1 && this.looksObjectish(i + 2) && !this.findTagsBackwards(i, ['CLASS', 'EXTENDS', 'IF', 'CATCH', 'SWITCH', 'LEADING_WHEN', 'FOR', 'WHILE', 'UNTIL'])) {
          startImplicitCall(i + 1);
          stack.push(['INDENT', i + 2]);
          return forward(3);
        }
        if (tag === ':') {
          s = (function() {
            var ref2;
            switch (false) {
              case ref2 = this.tag(i - 1), indexOf.call(EXPRESSION_END, ref2) < 0:
                return start[1];
              case this.tag(i - 2) !== '@':
                return i - 2;
              default:
                return i - 1;
            }
          }).call(this);
          while (this.tag(s - 2) === 'HERECOMMENT') {
            s -= 2;
          }
          this.insideForDeclaration = nextTag === 'FOR';
          startsLine = s === 0 || (ref2 = this.tag(s - 1), indexOf.call(LINEBREAKS, ref2) >= 0) || tokens[s - 1].newLine;
          if (stackTop()) {
            ref3 = stackTop(), stackTag = ref3[0], stackIdx = ref3[1];
            if ((stackTag === '{' || stackTag === 'INDENT' && this.tag(stackIdx - 1) === '{') && (startsLine || this.tag(s - 1) === ',' || this.tag(s - 1) === '{')) {
              return forward(1);
            }
          }
          startImplicitObject(s, !!startsLine);
          return forward(2);
        }
        if (inImplicitObject() && indexOf.call(LINEBREAKS, tag) >= 0) {
          stackTop()[2].sameLine = false;
        }
        newLine = prevTag === 'OUTDENT' || prevToken.newLine;
        if (indexOf.call(IMPLICIT_END, tag) >= 0 || indexOf.call(CALL_CLOSERS, tag) >= 0 && newLine) {
          while (inImplicit()) {
            ref4 = stackTop(), stackTag = ref4[0], stackIdx = ref4[1], (ref5 = ref4[2], sameLine = ref5.sameLine, startsLine = ref5.startsLine);
            if (inImplicitCall() && prevTag !== ',') {
              endImplicitCall();
            } else if (inImplicitObject() && !this.insideForDeclaration && sameLine && tag !== 'TERMINATOR' && prevTag !== ':') {
              endImplicitObject();
            } else if (inImplicitObject() && tag === 'TERMINATOR' && prevTag !== ',' && !(startsLine && this.looksObjectish(i + 1))) {
              if (nextTag === 'HERECOMMENT') {
                return forward(1);
              }
              endImplicitObject();
            } else {
              break;
            }
          }
        }
        if (tag === ',' && !this.looksObjectish(i + 1) && inImplicitObject() && !this.insideForDeclaration && (nextTag !== 'TERMINATOR' || !this.looksObjectish(i + 2))) {
          offset = nextTag === 'OUTDENT' ? 1 : 0;
          while (inImplicitObject()) {
            endImplicitObject(i + offset);
          }
        }
        return forward(1);
      });
    };

    Rewriter.prototype.addLocationDataToGeneratedTokens = function() {
      return this.scanTokens(function(token, i, tokens) {
        var column, line, nextLocation, prevLocation, ref, ref1;
        if (token[2]) {
          return 1;
        }
        if (!(token.generated || token.explicit)) {
          return 1;
        }
        if (token[0] === '{' && (nextLocation = (ref = tokens[i + 1]) != null ? ref[2] : void 0)) {
          line = nextLocation.first_line, column = nextLocation.first_column;
        } else if (prevLocation = (ref1 = tokens[i - 1]) != null ? ref1[2] : void 0) {
          line = prevLocation.last_line, column = prevLocation.last_column;
        } else {
          line = column = 0;
        }
        token[2] = {
          first_line: line,
          first_column: column,
          last_line: line,
          last_column: column
        };
        return 1;
      });
    };

    Rewriter.prototype.normalizeLines = function() {
      var action, condition, indent, outdent, starter;
      starter = indent = outdent = null;
      condition = function(token, i) {
        var ref, ref1, ref2, ref3;
        return token[1] !== ';' && (ref = token[0], indexOf.call(SINGLE_CLOSERS, ref) >= 0) && !(token[0] === 'TERMINATOR' && (ref1 = this.tag(i + 1), indexOf.call(EXPRESSION_CLOSE, ref1) >= 0)) && !(token[0] === 'ELSE' && starter !== 'THEN') && !(((ref2 = token[0]) === 'CATCH' || ref2 === 'FINALLY') && (starter === '->' || starter === '=>')) || (ref3 = token[0], indexOf.call(CALL_CLOSERS, ref3) >= 0) && this.tokens[i - 1].newLine;
      };
      action = function(token, i) {
        return this.tokens.splice((this.tag(i - 1) === ',' ? i - 1 : i), 0, outdent);
      };
      return this.scanTokens(function(token, i, tokens) {
        var j, k, ref, ref1, ref2, tag;
        tag = token[0];
        if (tag === 'TERMINATOR') {
          if (this.tag(i + 1) === 'ELSE' && this.tag(i - 1) !== 'OUTDENT') {
            tokens.splice.apply(tokens, [i, 1].concat(slice.call(this.indentation())));
            return 1;
          }
          if (ref = this.tag(i + 1), indexOf.call(EXPRESSION_CLOSE, ref) >= 0) {
            tokens.splice(i, 1);
            return 0;
          }
        }
        if (tag === 'CATCH') {
          for (j = k = 1; k <= 2; j = ++k) {
            if (!((ref1 = this.tag(i + j)) === 'OUTDENT' || ref1 === 'TERMINATOR' || ref1 === 'FINALLY')) {
              continue;
            }
            tokens.splice.apply(tokens, [i + j, 0].concat(slice.call(this.indentation())));
            return 2 + j;
          }
        }
        if (indexOf.call(SINGLE_LINERS, tag) >= 0 && this.tag(i + 1) !== 'INDENT' && !(tag === 'ELSE' && this.tag(i + 1) === 'IF')) {
          starter = tag;
          ref2 = this.indentation(tokens[i]), indent = ref2[0], outdent = ref2[1];
          if (starter === 'THEN') {
            indent.fromThen = true;
          }
          tokens.splice(i + 1, 0, indent);
          this.detectEnd(i + 2, condition, action);
          if (tag === 'THEN') {
            tokens.splice(i, 1);
          }
          return 1;
        }
        return 1;
      });
    };

    Rewriter.prototype.tagPostfixConditionals = function() {
      var action, condition, original;
      original = null;
      condition = function(token, i) {
        var prevTag, tag;
        tag = token[0];
        prevTag = this.tokens[i - 1][0];
        return tag === 'TERMINATOR' || (tag === 'INDENT' && indexOf.call(SINGLE_LINERS, prevTag) < 0);
      };
      action = function(token, i) {
        if (token[0] !== 'INDENT' || (token.generated && !token.fromThen)) {
          return original[0] = 'POST_' + original[0];
        }
      };
      return this.scanTokens(function(token, i) {
        if (token[0] !== 'IF') {
          return 1;
        }
        original = token;
        this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.indentation = function(origin) {
      var indent, outdent;
      indent = ['INDENT', 2];
      outdent = ['OUTDENT', 2];
      if (origin) {
        indent.generated = outdent.generated = true;
        indent.origin = outdent.origin = origin;
      } else {
        indent.explicit = outdent.explicit = true;
      }
      return [indent, outdent];
    };

    Rewriter.prototype.generate = generate;

    Rewriter.prototype.tag = function(i) {
      var ref;
      return (ref = this.tokens[i]) != null ? ref[0] : void 0;
    };

    return Rewriter;

  })();

  BALANCED_PAIRS = [['(', ')'], ['[', ']'], ['{', '}'], ['INDENT', 'OUTDENT'], ['CALL_START', 'CALL_END'], ['PARAM_START', 'PARAM_END'], ['INDEX_START', 'INDEX_END'], ['STRING_START', 'STRING_END'], ['REGEX_START', 'REGEX_END']];

  exports.INVERSES = INVERSES = {};

  EXPRESSION_START = [];

  EXPRESSION_END = [];

  for (k = 0, len = BALANCED_PAIRS.length; k < len; k++) {
    ref = BALANCED_PAIRS[k], left = ref[0], rite = ref[1];
    EXPRESSION_START.push(INVERSES[rite] = left);
    EXPRESSION_END.push(INVERSES[left] = rite);
  }

  EXPRESSION_CLOSE = ['CATCH', 'THEN', 'ELSE', 'FINALLY'].concat(EXPRESSION_END);

  IMPLICIT_FUNC = ['IDENTIFIER', 'SUPER', ')', 'CALL_END', ']', 'INDEX_END', '@', 'THIS'];

  IMPLICIT_CALL = ['IDENTIFIER', 'NUMBER', 'STRING', 'STRING_START', 'JS', 'REGEX', 'REGEX_START', 'NEW', 'PARAM_START', 'CLASS', 'IF', 'TRY', 'SWITCH', 'THIS', 'BOOL', 'NULL', 'UNDEFINED', 'UNARY', 'YIELD', 'UNARY_MATH', 'SUPER', 'THROW', '@', '->', '=>', '[', '(', '{', '--', '++'];

  IMPLICIT_UNSPACED_CALL = ['+', '-'];

  IMPLICIT_END = ['POST_IF', 'FOR', 'WHILE', 'UNTIL', 'WHEN', 'BY', 'LOOP', 'TERMINATOR'];

  SINGLE_LINERS = ['ELSE', '->', '=>', 'TRY', 'FINALLY', 'THEN'];

  SINGLE_CLOSERS = ['TERMINATOR', 'CATCH', 'FINALLY', 'ELSE', 'OUTDENT', 'LEADING_WHEN'];

  LINEBREAKS = ['TERMINATOR', 'INDENT', 'OUTDENT'];

  CALL_CLOSERS = ['.', '?.', '::', '?::'];

  IMPLICIT_FUNC.push('DEFER');

  IMPLICIT_CALL.push('DEFER');

  IMPLICIT_END.push('AWAIT');

}).call(this);

  return module.exports;
})();require['./lexer'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var BOM, BOOL, CALLABLE, CODE, COFFEE_ALIASES, COFFEE_ALIAS_MAP, COFFEE_KEYWORDS, COMMENT, COMPARE, COMPOUND_ASSIGN, HERECOMMENT_ILLEGAL, HEREDOC_DOUBLE, HEREDOC_INDENT, HEREDOC_SINGLE, HEREGEX, HEREGEX_OMIT, IDENTIFIER, INDENTABLE_CLOSERS, INDEXABLE, INVALID_ESCAPE, INVERSES, JSTOKEN, JS_FORBIDDEN, JS_KEYWORDS, LEADING_BLANK_LINE, LINE_BREAK, LINE_CONTINUER, LOGIC, Lexer, MATH, MULTI_DENT, NOT_REGEX, NUMBER, OPERATOR, POSSIBLY_DIVISION, REGEX, REGEX_FLAGS, REGEX_ILLEGAL, RELATION, RESERVED, Rewriter, SHIFT, SIMPLE_STRING_OMIT, STRICT_PROSCRIBED, STRING_DOUBLE, STRING_OMIT, STRING_SINGLE, STRING_START, TRAILING_BLANK_LINE, TRAILING_SPACES, UNARY, UNARY_MATH, VALID_FLAGS, WHITESPACE, compact, count, invertLiterate, key, locationDataToString, ref, ref1, repeat, starts, throwSyntaxError,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('./rewriter'), Rewriter = ref.Rewriter, INVERSES = ref.INVERSES;

  ref1 = require('./helpers'), count = ref1.count, starts = ref1.starts, compact = ref1.compact, repeat = ref1.repeat, invertLiterate = ref1.invertLiterate, locationDataToString = ref1.locationDataToString, throwSyntaxError = ref1.throwSyntaxError;

  exports.Lexer = Lexer = (function() {
    function Lexer() {}

    Lexer.prototype.tokenize = function(code, opts) {
      var consumed, end, i, ref2;
      if (opts == null) {
        opts = {};
      }
      this.literate = opts.literate;
      this.indent = 0;
      this.baseIndent = 0;
      this.indebt = 0;
      this.outdebt = 0;
      this.indents = [];
      this.ends = [];
      this.tokens = [];
      this.seenFor = false;
      this.chunkLine = opts.line || 0;
      this.chunkColumn = opts.column || 0;
      code = this.clean(code);
      i = 0;
      while (this.chunk = code.slice(i)) {
        consumed = this.identifierToken() || this.commentToken() || this.whitespaceToken() || this.lineToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken();
        ref2 = this.getLineAndColumnFromChunk(consumed), this.chunkLine = ref2[0], this.chunkColumn = ref2[1];
        i += consumed;
        if (opts.untilBalanced && this.ends.length === 0) {
          return {
            tokens: this.tokens,
            index: i
          };
        }
      }
      this.closeIndentation();
      if (end = this.ends.pop()) {
        this.error("missing " + end.tag, end.origin[2]);
      }
      if (opts.rewrite === false) {
        return this.tokens;
      }
      return (new Rewriter).rewrite(this.tokens);
    };

    Lexer.prototype.clean = function(code) {
      if (code.charCodeAt(0) === BOM) {
        code = code.slice(1);
      }
      code = code.replace(/\r/g, '').replace(TRAILING_SPACES, '');
      if (WHITESPACE.test(code)) {
        code = "\n" + code;
        this.chunkLine--;
      }
      if (this.literate) {
        code = invertLiterate(code);
      }
      return code;
    };

    Lexer.prototype.identifierToken = function() {
      var alias, colon, colonOffset, forcedIdentifier, id, idLength, input, match, poppedToken, prev, ref2, ref3, ref4, ref5, tag, tagToken;
      if (!(match = IDENTIFIER.exec(this.chunk))) {
        return 0;
      }
      input = match[0], id = match[1], colon = match[2];
      idLength = id.length;
      poppedToken = void 0;
      if (id === 'own' && this.tag() === 'FOR') {
        this.token('OWN', id);
        return id.length;
      }
      if (id === 'from' && this.tag() === 'YIELD') {
        this.token('FROM', id);
        return id.length;
      }
      ref2 = this.tokens, prev = ref2[ref2.length - 1];
      forcedIdentifier = colon || (prev != null) && (((ref3 = prev[0]) === '.' || ref3 === '?.' || ref3 === '::' || ref3 === '?::') || !prev.spaced && prev[0] === '@');
      if (id === 'defer' && !colon) {
        forcedIdentifier = false;
      }
      tag = 'IDENTIFIER';
      if (!forcedIdentifier && (indexOf.call(JS_KEYWORDS, id) >= 0 || indexOf.call(COFFEE_KEYWORDS, id) >= 0)) {
        tag = id.toUpperCase();
        if (tag === 'WHEN' && (ref4 = this.tag(), indexOf.call(LINE_BREAK, ref4) >= 0)) {
          tag = 'LEADING_WHEN';
        } else if (tag === 'FOR') {
          this.seenFor = true;
        } else if (tag === 'UNLESS') {
          tag = 'IF';
        } else if (indexOf.call(UNARY, tag) >= 0) {
          tag = 'UNARY';
        } else if (indexOf.call(RELATION, tag) >= 0) {
          if (tag !== 'INSTANCEOF' && this.seenFor) {
            tag = 'FOR' + tag;
            this.seenFor = false;
          } else {
            tag = 'RELATION';
            if (this.value() === '!') {
              poppedToken = this.tokens.pop();
              id = '!' + id;
            }
          }
        }
      }
      if (indexOf.call(JS_FORBIDDEN, id) >= 0) {
        if (forcedIdentifier) {
          tag = 'IDENTIFIER';
          id = new String(id);
          id.reserved = true;
        } else if (indexOf.call(RESERVED, id) >= 0) {
          this.error("reserved word '" + id + "'", {
            length: id.length
          });
        }
      }
      if (!forcedIdentifier) {
        if (indexOf.call(COFFEE_ALIASES, id) >= 0) {
          alias = id;
          id = COFFEE_ALIAS_MAP[id];
        }
        tag = (function() {
          switch (id) {
            case '!':
              return 'UNARY';
            case '==':
            case '!=':
              return 'COMPARE';
            case '&&':
            case '||':
              return 'LOGIC';
            case 'true':
            case 'false':
              return 'BOOL';
            case 'break':
            case 'continue':
              return 'STATEMENT';
            default:
              return tag;
          }
        })();
      }
      tagToken = this.token(tag, id, 0, idLength);
      if (alias) {
        tagToken.origin = [tag, alias, tagToken[2]];
      }
      tagToken.variable = !forcedIdentifier;
      if (poppedToken) {
        ref5 = [poppedToken[2].first_line, poppedToken[2].first_column], tagToken[2].first_line = ref5[0], tagToken[2].first_column = ref5[1];
      }
      if (colon) {
        colonOffset = input.lastIndexOf(':');
        this.token(':', ':', colonOffset, colon.length);
      }
      return input.length;
    };

    Lexer.prototype.numberToken = function() {
      var binaryLiteral, lexedLength, match, number, octalLiteral;
      if (!(match = NUMBER.exec(this.chunk))) {
        return 0;
      }
      number = match[0];
      lexedLength = number.length;
      if (/^0[BOX]/.test(number)) {
        this.error("radix prefix in '" + number + "' must be lowercase", {
          offset: 1
        });
      } else if (/E/.test(number) && !/^0x/.test(number)) {
        this.error("exponential notation in '" + number + "' must be indicated with a lowercase 'e'", {
          offset: number.indexOf('E')
        });
      } else if (/^0\d*[89]/.test(number)) {
        this.error("decimal literal '" + number + "' must not be prefixed with '0'", {
          length: lexedLength
        });
      } else if (/^0\d+/.test(number)) {
        this.error("octal literal '" + number + "' must be prefixed with '0o'", {
          length: lexedLength
        });
      }
      if (octalLiteral = /^0o([0-7]+)/.exec(number)) {
        number = '0x' + parseInt(octalLiteral[1], 8).toString(16);
      }
      if (binaryLiteral = /^0b([01]+)/.exec(number)) {
        number = '0x' + parseInt(binaryLiteral[1], 2).toString(16);
      }
      this.token('NUMBER', number, 0, lexedLength);
      return lexedLength;
    };

    Lexer.prototype.stringToken = function() {
      var $, attempt, delimiter, doc, end, heredoc, i, indent, indentRegex, match, quote, ref2, ref3, regex, token, tokens;
      quote = (STRING_START.exec(this.chunk) || [])[0];
      if (!quote) {
        return 0;
      }
      regex = (function() {
        switch (quote) {
          case "'":
            return STRING_SINGLE;
          case '"':
            return STRING_DOUBLE;
          case "'''":
            return HEREDOC_SINGLE;
          case '"""':
            return HEREDOC_DOUBLE;
        }
      })();
      heredoc = quote.length === 3;
      ref2 = this.matchWithInterpolations(regex, quote), tokens = ref2.tokens, end = ref2.index;
      $ = tokens.length - 1;
      delimiter = quote.charAt(0);
      if (heredoc) {
        indent = null;
        doc = ((function() {
          var j, len, results;
          results = [];
          for (i = j = 0, len = tokens.length; j < len; i = ++j) {
            token = tokens[i];
            if (token[0] === 'NEOSTRING') {
              results.push(token[1]);
            }
          }
          return results;
        })()).join('#{}');
        while (match = HEREDOC_INDENT.exec(doc)) {
          attempt = match[1];
          if (indent === null || (0 < (ref3 = attempt.length) && ref3 < indent.length)) {
            indent = attempt;
          }
        }
        if (indent) {
          indentRegex = RegExp("^" + indent, "gm");
        }
        this.mergeInterpolationTokens(tokens, {
          delimiter: delimiter
        }, (function(_this) {
          return function(value, i) {
            value = _this.formatString(value);
            if (i === 0) {
              value = value.replace(LEADING_BLANK_LINE, '');
            }
            if (i === $) {
              value = value.replace(TRAILING_BLANK_LINE, '');
            }
            if (indentRegex) {
              value = value.replace(indentRegex, '');
            }
            return value;
          };
        })(this));
      } else {
        this.mergeInterpolationTokens(tokens, {
          delimiter: delimiter
        }, (function(_this) {
          return function(value, i) {
            value = _this.formatString(value);
            value = value.replace(SIMPLE_STRING_OMIT, function(match, offset) {
              if ((i === 0 && offset === 0) || (i === $ && offset + match.length === value.length)) {
                return '';
              } else {
                return ' ';
              }
            });
            return value;
          };
        })(this));
      }
      return end;
    };

    Lexer.prototype.commentToken = function() {
      var comment, here, match;
      if (!(match = this.chunk.match(COMMENT))) {
        return 0;
      }
      comment = match[0], here = match[1];
      if (here) {
        if (match = HERECOMMENT_ILLEGAL.exec(comment)) {
          this.error("block comments cannot contain " + match[0], {
            offset: match.index,
            length: match[0].length
          });
        }
        if (here.indexOf('\n') >= 0) {
          here = here.replace(RegExp("\\n" + (repeat(' ', this.indent)), "g"), '\n');
        }
        this.token('HERECOMMENT', here, 0, comment.length);
      }
      return comment.length;
    };

    Lexer.prototype.jsToken = function() {
      var match, script;
      if (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {
        return 0;
      }
      this.token('JS', (script = match[0]).slice(1, -1), 0, script.length);
      return script.length;
    };

    Lexer.prototype.regexToken = function() {
      var body, closed, end, flags, index, match, origin, prev, ref2, ref3, ref4, regex, tokens;
      switch (false) {
        case !(match = REGEX_ILLEGAL.exec(this.chunk)):
          this.error("regular expressions cannot begin with " + match[2], {
            offset: match.index + match[1].length
          });
          break;
        case !(match = this.matchWithInterpolations(HEREGEX, '///')):
          tokens = match.tokens, index = match.index;
          break;
        case !(match = REGEX.exec(this.chunk)):
          regex = match[0], body = match[1], closed = match[2];
          this.validateEscapes(body, {
            isRegex: true,
            offsetInChunk: 1
          });
          index = regex.length;
          ref2 = this.tokens, prev = ref2[ref2.length - 1];
          if (prev) {
            if (prev.spaced && (ref3 = prev[0], indexOf.call(CALLABLE, ref3) >= 0)) {
              if (!closed || POSSIBLY_DIVISION.test(regex)) {
                return 0;
              }
            } else if (ref4 = prev[0], indexOf.call(NOT_REGEX, ref4) >= 0) {
              return 0;
            }
          }
          if (!closed) {
            this.error('missing / (unclosed regex)');
          }
          break;
        default:
          return 0;
      }
      flags = REGEX_FLAGS.exec(this.chunk.slice(index))[0];
      end = index + flags.length;
      origin = this.makeToken('REGEX', null, 0, end);
      switch (false) {
        case !!VALID_FLAGS.test(flags):
          this.error("invalid regular expression flags " + flags, {
            offset: index,
            length: flags.length
          });
          break;
        case !(regex || tokens.length === 1):
          if (body == null) {
            body = this.formatHeregex(tokens[0][1]);
          }
          this.token('REGEX', "" + (this.makeDelimitedLiteral(body, {
            delimiter: '/'
          })) + flags, 0, end, origin);
          break;
        default:
          this.token('REGEX_START', '(', 0, 0, origin);
          this.token('IDENTIFIER', 'RegExp', 0, 0);
          this.token('CALL_START', '(', 0, 0);
          this.mergeInterpolationTokens(tokens, {
            delimiter: '"',
            double: true
          }, this.formatHeregex);
          if (flags) {
            this.token(',', ',', index, 0);
            this.token('STRING', '"' + flags + '"', index, flags.length);
          }
          this.token(')', ')', end, 0);
          this.token('REGEX_END', ')', end, 0);
      }
      return end;
    };

    Lexer.prototype.lineToken = function() {
      var diff, indent, match, noNewlines, size;
      if (!(match = MULTI_DENT.exec(this.chunk))) {
        return 0;
      }
      indent = match[0];
      this.seenFor = false;
      size = indent.length - 1 - indent.lastIndexOf('\n');
      noNewlines = this.unfinished();
      if (size - this.indebt === this.indent) {
        if (noNewlines) {
          this.suppressNewlines();
        } else {
          this.newlineToken(0);
        }
        return indent.length;
      }
      if (size > this.indent) {
        if (noNewlines) {
          this.indebt = size - this.indent;
          this.suppressNewlines();
          return indent.length;
        }
        if (!this.tokens.length) {
          this.baseIndent = this.indent = size;
          return indent.length;
        }
        diff = size - this.indent + this.outdebt;
        this.token('INDENT', diff, indent.length - size, size);
        this.indents.push(diff);
        this.ends.push({
          tag: 'OUTDENT'
        });
        this.outdebt = this.indebt = 0;
        this.indent = size;
      } else if (size < this.baseIndent) {
        this.error('missing indentation', {
          offset: indent.length
        });
      } else {
        this.indebt = 0;
        this.outdentToken(this.indent - size, noNewlines, indent.length);
      }
      return indent.length;
    };

    Lexer.prototype.outdentToken = function(moveOut, noNewlines, outdentLength) {
      var decreasedIndent, dent, lastIndent, ref2;
      decreasedIndent = this.indent - moveOut;
      while (moveOut > 0) {
        lastIndent = this.indents[this.indents.length - 1];
        if (!lastIndent) {
          moveOut = 0;
        } else if (lastIndent === this.outdebt) {
          moveOut -= this.outdebt;
          this.outdebt = 0;
        } else if (lastIndent < this.outdebt) {
          this.outdebt -= lastIndent;
          moveOut -= lastIndent;
        } else {
          dent = this.indents.pop() + this.outdebt;
          if (outdentLength && (ref2 = this.chunk[outdentLength], indexOf.call(INDENTABLE_CLOSERS, ref2) >= 0)) {
            decreasedIndent -= dent - moveOut;
            moveOut = dent;
          }
          this.outdebt = 0;
          this.pair('OUTDENT');
          this.token('OUTDENT', moveOut, 0, outdentLength);
          moveOut -= dent;
        }
      }
      if (dent) {
        this.outdebt -= moveOut;
      }
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (!(this.tag() === 'TERMINATOR' || noNewlines)) {
        this.token('TERMINATOR', '\n', outdentLength, 0);
      }
      this.indent = decreasedIndent;
      return this;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, nline, prev, ref2;
      if (!((match = WHITESPACE.exec(this.chunk)) || (nline = this.chunk.charAt(0) === '\n'))) {
        return 0;
      }
      ref2 = this.tokens, prev = ref2[ref2.length - 1];
      if (prev) {
        prev[match ? 'spaced' : 'newLine'] = true;
      }
      if (match) {
        return match[0].length;
      } else {
        return 0;
      }
    };

    Lexer.prototype.newlineToken = function(offset) {
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (this.tag() !== 'TERMINATOR') {
        this.token('TERMINATOR', '\n', offset, 0);
      }
      return this;
    };

    Lexer.prototype.suppressNewlines = function() {
      if (this.value() === '\\') {
        this.tokens.pop();
      }
      return this;
    };

    Lexer.prototype.literalToken = function() {
      var match, prev, ref2, ref3, ref4, ref5, ref6, tag, token, value;
      if (match = OPERATOR.exec(this.chunk)) {
        value = match[0];
        if (CODE.test(value)) {
          this.tagParameters();
        }
      } else {
        value = this.chunk.charAt(0);
      }
      tag = value;
      ref2 = this.tokens, prev = ref2[ref2.length - 1];
      if (value === '=' && prev) {
        if (!prev[1].reserved && (ref3 = prev[1], indexOf.call(JS_FORBIDDEN, ref3) >= 0)) {
          if (prev.origin) {
            prev = prev.origin;
          }
          this.error("reserved word '" + prev[1] + "' can't be assigned", prev[2]);
        }
        if ((ref4 = prev[1]) === '||' || ref4 === '&&') {
          prev[0] = 'COMPOUND_ASSIGN';
          prev[1] += '=';
          return value.length;
        }
      }
      if (value === ';') {
        this.seenFor = false;
        tag = 'TERMINATOR';
      } else if (indexOf.call(MATH, value) >= 0) {
        tag = 'MATH';
      } else if (indexOf.call(COMPARE, value) >= 0) {
        tag = 'COMPARE';
      } else if (indexOf.call(COMPOUND_ASSIGN, value) >= 0) {
        tag = 'COMPOUND_ASSIGN';
      } else if (indexOf.call(UNARY, value) >= 0) {
        tag = 'UNARY';
      } else if (indexOf.call(UNARY_MATH, value) >= 0) {
        tag = 'UNARY_MATH';
      } else if (indexOf.call(SHIFT, value) >= 0) {
        tag = 'SHIFT';
      } else if (indexOf.call(LOGIC, value) >= 0 || value === '?' && (prev != null ? prev.spaced : void 0)) {
        tag = 'LOGIC';
      } else if (prev && !prev.spaced) {
        if (value === '(' && (ref5 = prev[0], indexOf.call(CALLABLE, ref5) >= 0)) {
          if (prev[0] === '?') {
            prev[0] = 'FUNC_EXIST';
          }
          tag = 'CALL_START';
        } else if (value === '[' && (ref6 = prev[0], indexOf.call(INDEXABLE, ref6) >= 0)) {
          tag = 'INDEX_START';
          switch (prev[0]) {
            case '?':
              prev[0] = 'INDEX_SOAK';
          }
        }
      }
      token = this.makeToken(tag, value);
      switch (value) {
        case '(':
        case '{':
        case '[':
          this.ends.push({
            tag: INVERSES[value],
            origin: token
          });
          break;
        case ')':
        case '}':
        case ']':
          this.pair(value);
      }
      this.tokens.push(token);
      return value.length;
    };

    Lexer.prototype.tagParameters = function() {
      var i, stack, tok, tokens;
      if (this.tag() !== ')') {
        return this;
      }
      stack = [];
      tokens = this.tokens;
      i = tokens.length;
      tokens[--i][0] = 'PARAM_END';
      while (tok = tokens[--i]) {
        switch (tok[0]) {
          case ')':
            stack.push(tok);
            break;
          case '(':
          case 'CALL_START':
            if (stack.length) {
              stack.pop();
            } else if (tok[0] === '(') {
              tok[0] = 'PARAM_START';
              return this;
            } else {
              return this;
            }
        }
      }
      return this;
    };

    Lexer.prototype.closeIndentation = function() {
      return this.outdentToken(this.indent);
    };

    Lexer.prototype.matchWithInterpolations = function(regex, delimiter) {
      var close, column, firstToken, index, lastToken, line, nested, offsetInChunk, open, ref2, ref3, ref4, str, strPart, tokens;
      tokens = [];
      offsetInChunk = delimiter.length;
      if (this.chunk.slice(0, offsetInChunk) !== delimiter) {
        return null;
      }
      str = this.chunk.slice(offsetInChunk);
      while (true) {
        strPart = regex.exec(str)[0];
        this.validateEscapes(strPart, {
          isRegex: delimiter.charAt(0) === '/',
          offsetInChunk: offsetInChunk
        });
        tokens.push(this.makeToken('NEOSTRING', strPart, offsetInChunk));
        str = str.slice(strPart.length);
        offsetInChunk += strPart.length;
        if (str.slice(0, 2) !== '#{') {
          break;
        }
        ref2 = this.getLineAndColumnFromChunk(offsetInChunk + 1), line = ref2[0], column = ref2[1];
        ref3 = new Lexer().tokenize(str.slice(1), {
          line: line,
          column: column,
          untilBalanced: true
        }), nested = ref3.tokens, index = ref3.index;
        index += 1;
        open = nested[0], close = nested[nested.length - 1];
        open[0] = open[1] = '(';
        close[0] = close[1] = ')';
        close.origin = ['', 'end of interpolation', close[2]];
        if (((ref4 = nested[1]) != null ? ref4[0] : void 0) === 'TERMINATOR') {
          nested.splice(1, 1);
        }
        tokens.push(['TOKENS', nested]);
        str = str.slice(index);
        offsetInChunk += index;
      }
      if (str.slice(0, delimiter.length) !== delimiter) {
        this.error("missing " + delimiter, {
          length: delimiter.length
        });
      }
      firstToken = tokens[0], lastToken = tokens[tokens.length - 1];
      firstToken[2].first_column -= delimiter.length;
      lastToken[2].last_column += delimiter.length;
      if (lastToken[1].length === 0) {
        lastToken[2].last_column -= 1;
      }
      return {
        tokens: tokens,
        index: offsetInChunk + delimiter.length
      };
    };

    Lexer.prototype.mergeInterpolationTokens = function(tokens, options, fn) {
      var converted, firstEmptyStringIndex, firstIndex, i, j, lastToken, len, locationToken, lparen, plusToken, ref2, rparen, tag, token, tokensToPush, value;
      if (tokens.length > 1) {
        lparen = this.token('STRING_START', '(', 0, 0);
      }
      firstIndex = this.tokens.length;
      for (i = j = 0, len = tokens.length; j < len; i = ++j) {
        token = tokens[i];
        tag = token[0], value = token[1];
        switch (tag) {
          case 'TOKENS':
            if (value.length === 2) {
              continue;
            }
            locationToken = value[0];
            tokensToPush = value;
            break;
          case 'NEOSTRING':
            converted = fn(token[1], i);
            if (converted.length === 0) {
              if (i === 0) {
                firstEmptyStringIndex = this.tokens.length;
              } else {
                continue;
              }
            }
            if (i === 2 && (firstEmptyStringIndex != null)) {
              this.tokens.splice(firstEmptyStringIndex, 2);
            }
            token[0] = 'STRING';
            token[1] = this.makeDelimitedLiteral(converted, options);
            locationToken = token;
            tokensToPush = [token];
        }
        if (this.tokens.length > firstIndex) {
          plusToken = this.token('+', '+');
          plusToken[2] = {
            first_line: locationToken[2].first_line,
            first_column: locationToken[2].first_column,
            last_line: locationToken[2].first_line,
            last_column: locationToken[2].first_column
          };
        }
        (ref2 = this.tokens).push.apply(ref2, tokensToPush);
      }
      if (lparen) {
        lastToken = tokens[tokens.length - 1];
        lparen.origin = [
          'STRING', null, {
            first_line: lparen[2].first_line,
            first_column: lparen[2].first_column,
            last_line: lastToken[2].last_line,
            last_column: lastToken[2].last_column
          }
        ];
        rparen = this.token('STRING_END', ')');
        return rparen[2] = {
          first_line: lastToken[2].last_line,
          first_column: lastToken[2].last_column,
          last_line: lastToken[2].last_line,
          last_column: lastToken[2].last_column
        };
      }
    };

    Lexer.prototype.pair = function(tag) {
      var lastIndent, prev, ref2, ref3, wanted;
      ref2 = this.ends, prev = ref2[ref2.length - 1];
      if (tag !== (wanted = prev != null ? prev.tag : void 0)) {
        if ('OUTDENT' !== wanted) {
          this.error("unmatched " + tag);
        }
        ref3 = this.indents, lastIndent = ref3[ref3.length - 1];
        this.outdentToken(lastIndent, true);
        return this.pair(tag);
      }
      return this.ends.pop();
    };

    Lexer.prototype.getLineAndColumnFromChunk = function(offset) {
      var column, lastLine, lineCount, ref2, string;
      if (offset === 0) {
        return [this.chunkLine, this.chunkColumn];
      }
      if (offset >= this.chunk.length) {
        string = this.chunk;
      } else {
        string = this.chunk.slice(0, +(offset - 1) + 1 || 9e9);
      }
      lineCount = count(string, '\n');
      column = this.chunkColumn;
      if (lineCount > 0) {
        ref2 = string.split('\n'), lastLine = ref2[ref2.length - 1];
        column = lastLine.length;
      } else {
        column += string.length;
      }
      return [this.chunkLine + lineCount, column];
    };

    Lexer.prototype.makeToken = function(tag, value, offsetInChunk, length) {
      var lastCharacter, locationData, ref2, ref3, token;
      if (offsetInChunk == null) {
        offsetInChunk = 0;
      }
      if (length == null) {
        length = value.length;
      }
      locationData = {};
      ref2 = this.getLineAndColumnFromChunk(offsetInChunk), locationData.first_line = ref2[0], locationData.first_column = ref2[1];
      lastCharacter = Math.max(0, length - 1);
      ref3 = this.getLineAndColumnFromChunk(offsetInChunk + lastCharacter), locationData.last_line = ref3[0], locationData.last_column = ref3[1];
      token = [tag, value, locationData];
      return token;
    };

    Lexer.prototype.token = function(tag, value, offsetInChunk, length, origin) {
      var token;
      token = this.makeToken(tag, value, offsetInChunk, length);
      if (origin) {
        token.origin = origin;
      }
      this.tokens.push(token);
      return token;
    };

    Lexer.prototype.tag = function() {
      var ref2, token;
      ref2 = this.tokens, token = ref2[ref2.length - 1];
      return token != null ? token[0] : void 0;
    };

    Lexer.prototype.value = function() {
      var ref2, token;
      ref2 = this.tokens, token = ref2[ref2.length - 1];
      return token != null ? token[1] : void 0;
    };

    Lexer.prototype.unfinished = function() {
      var ref2;
      return LINE_CONTINUER.test(this.chunk) || ((ref2 = this.tag()) === '\\' || ref2 === '.' || ref2 === '?.' || ref2 === '?::' || ref2 === 'UNARY' || ref2 === 'MATH' || ref2 === 'UNARY_MATH' || ref2 === '+' || ref2 === '-' || ref2 === '**' || ref2 === 'SHIFT' || ref2 === 'RELATION' || ref2 === 'COMPARE' || ref2 === 'LOGIC' || ref2 === 'THROW' || ref2 === 'EXTENDS');
    };

    Lexer.prototype.formatString = function(str) {
      return str.replace(STRING_OMIT, '$1');
    };

    Lexer.prototype.formatHeregex = function(str) {
      return str.replace(HEREGEX_OMIT, '$1$2');
    };

    Lexer.prototype.validateEscapes = function(str, options) {
      var before, hex, invalidEscape, match, message, octal, ref2, unicode;
      if (options == null) {
        options = {};
      }
      match = INVALID_ESCAPE.exec(str);
      if (!match) {
        return;
      }
      match[0], before = match[1], octal = match[2], hex = match[3], unicode = match[4];
      if (options.isRegex && octal && octal.charAt(0) !== '0') {
        return;
      }
      message = octal ? "octal escape sequences are not allowed" : "invalid escape sequence";
      invalidEscape = "\\" + (octal || hex || unicode);
      return this.error(message + " " + invalidEscape, {
        offset: ((ref2 = options.offsetInChunk) != null ? ref2 : 0) + match.index + before.length,
        length: invalidEscape.length
      });
    };

    Lexer.prototype.makeDelimitedLiteral = function(body, options) {
      var regex;
      if (options == null) {
        options = {};
      }
      if (body === '' && options.delimiter === '/') {
        body = '(?:)';
      }
      regex = RegExp("(\\\\\\\\)|(\\\\0(?=[1-7]))|\\\\?(" + options.delimiter + ")|\\\\?(?:(\\n)|(\\r)|(\\u2028)|(\\u2029))|(\\\\.)", "g");
      body = body.replace(regex, function(match, backslash, nul, delimiter, lf, cr, ls, ps, other) {
        switch (false) {
          case !backslash:
            if (options.double) {
              return backslash + backslash;
            } else {
              return backslash;
            }
          case !nul:
            return '\\x00';
          case !delimiter:
            return "\\" + delimiter;
          case !lf:
            return '\\n';
          case !cr:
            return '\\r';
          case !ls:
            return '\\u2028';
          case !ps:
            return '\\u2029';
          case !other:
            if (options.double) {
              return "\\" + other;
            } else {
              return other;
            }
        }
      });
      return "" + options.delimiter + body + options.delimiter;
    };

    Lexer.prototype.error = function(message, options) {
      var first_column, first_line, location, ref2, ref3, ref4;
      if (options == null) {
        options = {};
      }
      location = 'first_line' in options ? options : ((ref3 = this.getLineAndColumnFromChunk((ref2 = options.offset) != null ? ref2 : 0), first_line = ref3[0], first_column = ref3[1], ref3), {
        first_line: first_line,
        first_column: first_column,
        last_column: first_column + ((ref4 = options.length) != null ? ref4 : 1) - 1
      });
      return throwSyntaxError(message, location);
    };

    return Lexer;

  })();

  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'yield', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super'];

  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'];

  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(['await', 'defer']);

  COFFEE_ALIAS_MAP = {
    and: '&&',
    or: '||',
    is: '==',
    isnt: '!=',
    not: '!',
    yes: 'true',
    no: 'false',
    on: 'true',
    off: 'false'
  };

  COFFEE_ALIASES = (function() {
    var results;
    results = [];
    for (key in COFFEE_ALIAS_MAP) {
      results.push(key);
    }
    return results;
  })();

  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(COFFEE_ALIASES);

  RESERVED = ['case', 'default', 'function', 'var', 'void', 'with', 'const', 'let', 'enum', 'export', 'import', 'native', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static'];

  STRICT_PROSCRIBED = ['arguments', 'eval', 'yield*'];

  JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED).concat(STRICT_PROSCRIBED);

  exports.RESERVED = RESERVED.concat(JS_KEYWORDS).concat(COFFEE_KEYWORDS).concat(STRICT_PROSCRIBED);

  exports.STRICT_PROSCRIBED = STRICT_PROSCRIBED;

  BOM = 65279;

  IDENTIFIER = /^(?!\d)((?:(?!\s)[$\w\x7f-\uffff])+)([^\n\S]*:(?!:))?/;

  NUMBER = /^0b[01]+|^0o[0-7]+|^0x[\da-f]+|^\d*\.?\d+(?:e[+-]?\d+)?/i;

  OPERATOR = /^(?:[-=]>|[-+*\/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>*\/%])\2=?|\?(\.|::)|\.{2,3})/;

  WHITESPACE = /^[^\n\S]+/;

  COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|###$)|^(?:\s*#(?!##[^#]).*)+/;

  CODE = /^[-=]>/;

  MULTI_DENT = /^(?:\n[^\n\S]*)+/;

  JSTOKEN = /^`[^\\`]*(?:\\.[^\\`]*)*`/;

  STRING_START = /^(?:'''|"""|'|")/;

  STRING_SINGLE = /^(?:[^\\']|\\[\s\S])*/;

  STRING_DOUBLE = /^(?:[^\\"#]|\\[\s\S]|\#(?!\{))*/;

  HEREDOC_SINGLE = /^(?:[^\\']|\\[\s\S]|'(?!''))*/;

  HEREDOC_DOUBLE = /^(?:[^\\"#]|\\[\s\S]|"(?!"")|\#(?!\{))*/;

  STRING_OMIT = /((?:\\\\)+)|\\[^\S\n]*\n\s*/g;

  SIMPLE_STRING_OMIT = /\s*\n\s*/g;

  HEREDOC_INDENT = /\n+([^\n\S]*)(?=\S)/g;

  REGEX = /^\/(?!\/)((?:[^[\/\n\\]|\\[^\n]|\[(?:\\[^\n]|[^\]\n\\])*\])*)(\/)?/;

  REGEX_FLAGS = /^\w*/;

  VALID_FLAGS = /^(?!.*(.).*\1)[imgy]*$/;

  HEREGEX = /^(?:[^\\\/#]|\\[\s\S]|\/(?!\/\/)|\#(?!\{))*/;

  HEREGEX_OMIT = /((?:\\\\)+)|\\(\s)|\s+(?:#.*)?/g;

  REGEX_ILLEGAL = /^(\/|\/{3}\s*)(\*)/;

  POSSIBLY_DIVISION = /^\/=?\s/;

  HERECOMMENT_ILLEGAL = /\*\//;

  LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|::)/;

  INVALID_ESCAPE = /((?:^|[^\\])(?:\\\\)*)\\(?:(0[0-7]|[1-7])|(x(?![\da-fA-F]{2}).{0,2})|(u(?![\da-fA-F]{4}).{0,4}))/;

  LEADING_BLANK_LINE = /^[^\n\S]*\n/;

  TRAILING_BLANK_LINE = /\n[^\n\S]*$/;

  TRAILING_SPACES = /\s+$/;

  COMPOUND_ASSIGN = ['-=', '+=', '/=', '*=', '%=', '||=', '&&=', '?=', '<<=', '>>=', '>>>=', '&=', '^=', '|=', '**=', '//=', '%%='];

  UNARY = ['NEW', 'TYPEOF', 'DELETE', 'DO'];

  UNARY_MATH = ['!', '~'];

  LOGIC = ['&&', '||', '&', '|', '^'];

  SHIFT = ['<<', '>>', '>>>'];

  COMPARE = ['==', '!=', '<', '>', '<=', '>='];

  MATH = ['*', '/', '%', '//', '%%'];

  RELATION = ['IN', 'OF', 'INSTANCEOF'];

  BOOL = ['TRUE', 'FALSE'];

  CALLABLE = ['IDENTIFIER', ')', ']', '?', '@', 'THIS', 'SUPER'];

  INDEXABLE = CALLABLE.concat(['NUMBER', 'STRING', 'STRING_END', 'REGEX', 'REGEX_END', 'BOOL', 'NULL', 'UNDEFINED', '}', '::']);

  NOT_REGEX = INDEXABLE.concat(['++', '--']);

  LINE_BREAK = ['INDENT', 'OUTDENT', 'TERMINATOR'];

  INDENTABLE_CLOSERS = [')', '}', ']'];

  CALLABLE.push('DEFER');

}).call(this);

  return module.exports;
})();require['./parser'] = (function() {
  var exports = {}, module = {exports: exports};
  /* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Body":4,"Line":5,"TERMINATOR":6,"Expression":7,"Statement":8,"YieldReturn":9,"Return":10,"Comment":11,"STATEMENT":12,"Await":13,"AWAIT":14,"Block":15,"Value":16,"Invocation":17,"Code":18,"Operation":19,"Assign":20,"If":21,"Try":22,"While":23,"For":24,"Switch":25,"Class":26,"Throw":27,"Yield":28,"Defer":29,"YIELD":30,"FROM":31,"INDENT":32,"OUTDENT":33,"Identifier":34,"IDENTIFIER":35,"AlphaNumeric":36,"NUMBER":37,"String":38,"STRING":39,"STRING_START":40,"STRING_END":41,"Regex":42,"REGEX":43,"REGEX_START":44,"REGEX_END":45,"Literal":46,"JS":47,"DEBUGGER":48,"UNDEFINED":49,"NULL":50,"BOOL":51,"Assignable":52,"=":53,"AssignObj":54,"ObjAssignable":55,":":56,"SimpleObjAssignable":57,"ThisProperty":58,"RETURN":59,"HERECOMMENT":60,"PARAM_START":61,"ParamList":62,"PARAM_END":63,"FuncGlyph":64,"->":65,"=>":66,"OptComma":67,",":68,"Param":69,"ParamVar":70,"...":71,"Array":72,"Object":73,"Splat":74,"SimpleAssignable":75,"Accessor":76,"Parenthetical":77,"Range":78,"This":79,".":80,"?.":81,"::":82,"?::":83,"Index":84,"INDEX_START":85,"IndexValue":86,"INDEX_END":87,"INDEX_SOAK":88,"Slice":89,"{":90,"AssignList":91,"}":92,"CLASS":93,"EXTENDS":94,"OptFuncExist":95,"Arguments":96,"SUPER":97,"DEFER":98,"FUNC_EXIST":99,"CALL_START":100,"CALL_END":101,"ArgList":102,"THIS":103,"@":104,"[":105,"]":106,"RangeDots":107,"..":108,"Arg":109,"SimpleArgs":110,"TRY":111,"Catch":112,"FINALLY":113,"CATCH":114,"THROW":115,"(":116,")":117,"WhileSource":118,"WHILE":119,"WHEN":120,"UNTIL":121,"Loop":122,"LOOP":123,"ForBody":124,"FOR":125,"BY":126,"ForStart":127,"ForSource":128,"ForVariables":129,"OWN":130,"ForValue":131,"FORIN":132,"FOROF":133,"SWITCH":134,"Whens":135,"ELSE":136,"When":137,"LEADING_WHEN":138,"IfBlock":139,"IF":140,"POST_IF":141,"UNARY":142,"UNARY_MATH":143,"-":144,"+":145,"--":146,"++":147,"?":148,"MATH":149,"**":150,"SHIFT":151,"COMPARE":152,"LOGIC":153,"RELATION":154,"COMPOUND_ASSIGN":155,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TERMINATOR",12:"STATEMENT",14:"AWAIT",30:"YIELD",31:"FROM",32:"INDENT",33:"OUTDENT",35:"IDENTIFIER",37:"NUMBER",39:"STRING",40:"STRING_START",41:"STRING_END",43:"REGEX",44:"REGEX_START",45:"REGEX_END",47:"JS",48:"DEBUGGER",49:"UNDEFINED",50:"NULL",51:"BOOL",53:"=",56:":",59:"RETURN",60:"HERECOMMENT",61:"PARAM_START",63:"PARAM_END",65:"->",66:"=>",68:",",71:"...",80:".",81:"?.",82:"::",83:"?::",85:"INDEX_START",87:"INDEX_END",88:"INDEX_SOAK",90:"{",92:"}",93:"CLASS",94:"EXTENDS",97:"SUPER",98:"DEFER",99:"FUNC_EXIST",100:"CALL_START",101:"CALL_END",103:"THIS",104:"@",105:"[",106:"]",108:"..",111:"TRY",113:"FINALLY",114:"CATCH",115:"THROW",116:"(",117:")",119:"WHILE",120:"WHEN",121:"UNTIL",123:"LOOP",125:"FOR",126:"BY",130:"OWN",132:"FORIN",133:"FOROF",134:"SWITCH",136:"ELSE",138:"LEADING_WHEN",140:"IF",141:"POST_IF",142:"UNARY",143:"UNARY_MATH",144:"-",145:"+",146:"--",147:"++",148:"?",149:"MATH",150:"**",151:"SHIFT",152:"COMPARE",153:"LOGIC",154:"RELATION",155:"COMPOUND_ASSIGN"},
productions_: [0,[3,0],[3,1],[4,1],[4,3],[4,2],[5,1],[5,1],[5,1],[8,1],[8,1],[8,1],[8,1],[13,2],[13,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[28,1],[28,2],[28,3],[15,2],[15,3],[34,1],[36,1],[36,1],[38,1],[38,3],[42,1],[42,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[20,3],[20,4],[20,5],[54,1],[54,3],[54,5],[54,3],[54,5],[54,1],[57,1],[57,1],[55,1],[55,1],[10,2],[10,1],[9,3],[9,2],[11,1],[18,5],[18,2],[64,1],[64,1],[67,0],[67,1],[62,0],[62,1],[62,3],[62,4],[62,6],[69,1],[69,2],[69,3],[69,1],[70,1],[70,1],[70,1],[70,1],[74,2],[75,1],[75,2],[75,2],[75,1],[52,1],[52,1],[52,1],[16,1],[16,1],[16,1],[16,1],[16,1],[76,2],[76,2],[76,2],[76,2],[76,2],[76,1],[76,1],[84,3],[84,2],[86,1],[86,1],[73,4],[91,0],[91,1],[91,3],[91,4],[91,6],[26,1],[26,2],[26,3],[26,4],[26,2],[26,3],[26,4],[26,5],[17,3],[17,3],[17,1],[17,2],[29,2],[95,0],[95,1],[96,2],[96,4],[79,1],[79,1],[58,2],[72,2],[72,4],[107,1],[107,1],[78,5],[89,3],[89,2],[89,2],[89,1],[102,1],[102,3],[102,4],[102,4],[102,6],[109,1],[109,1],[109,1],[110,1],[110,3],[22,2],[22,3],[22,4],[22,5],[112,3],[112,3],[112,2],[27,2],[77,3],[77,5],[118,2],[118,4],[118,2],[118,4],[23,2],[23,2],[23,2],[23,1],[122,2],[122,2],[24,2],[24,2],[24,2],[124,2],[124,4],[124,2],[127,2],[127,3],[131,1],[131,1],[131,1],[131,1],[129,1],[129,3],[128,2],[128,2],[128,4],[128,4],[128,4],[128,6],[128,6],[25,5],[25,7],[25,4],[25,6],[135,1],[135,2],[137,3],[137,4],[139,3],[139,5],[21,1],[21,3],[21,3],[21,3],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,5],[19,4],[19,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Block);
break;
case 2:return this.$ = $$[$0];
break;
case 3:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(yy.Block.wrap([$$[$0]]));
break;
case 4:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].push($$[$0]));
break;
case 5:this.$ = $$[$0-1];
break;
case 6:this.$ = $$[$0];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = $$[$0];
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Await($$[$0]));
break;
case 14:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Await(yy.Block.wrap([$$[$0]])));
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Op($$[$0], new yy.Value(new yy.Literal(''))));
break;
case 30:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op($$[$0-1], $$[$0]));
break;
case 31:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-2].concat($$[$0-1]), $$[$0]));
break;
case 32:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Block);
break;
case 33:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-1]);
break;
case 34:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 35:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 38:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Parens($$[$0-1]));
break;
case 39:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 40:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-1]);
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 45:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Undefined);
break;
case 46:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Null);
break;
case 47:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Bool($$[$0]));
break;
case 48:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign($$[$0-2], $$[$0]));
break;
case 49:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Assign($$[$0-3], $$[$0]));
break;
case 50:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign($$[$0-4], $$[$0-1]));
break;
case 51:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 52:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])), $$[$0], 'object', {
          operatorToken: yy.addLocationDataFn(_$[$0-1])(new yy.Literal($$[$0-1]))
        }));
break;
case 53:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-4])(new yy.Value($$[$0-4])), $$[$0-1], 'object', {
          operatorToken: yy.addLocationDataFn(_$[$0-3])(new yy.Literal($$[$0-3]))
        }));
break;
case 54:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])), $$[$0], null, {
          operatorToken: yy.addLocationDataFn(_$[$0-1])(new yy.Literal($$[$0-1]))
        }));
break;
case 55:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-4])(new yy.Value($$[$0-4])), $$[$0-1], null, {
          operatorToken: yy.addLocationDataFn(_$[$0-3])(new yy.Literal($$[$0-3]))
        }));
break;
case 56:this.$ = $$[$0];
break;
case 57:this.$ = $$[$0];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = $$[$0];
break;
case 60:this.$ = $$[$0];
break;
case 61:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Return($$[$0]));
break;
case 62:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Return);
break;
case 63:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.YieldReturn($$[$0]));
break;
case 64:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.YieldReturn);
break;
case 65:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Comment($$[$0]));
break;
case 66:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Code($$[$0-3], $$[$0], $$[$0-1]));
break;
case 67:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Code([], $$[$0], $$[$0-1]));
break;
case 68:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('func');
break;
case 69:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('boundfunc');
break;
case 70:this.$ = $$[$0];
break;
case 71:this.$ = $$[$0];
break;
case 72:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([]);
break;
case 73:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 74:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 75:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 76:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 77:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Param($$[$0]));
break;
case 78:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Param($$[$0-1], null, true));
break;
case 79:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Param($$[$0-2], $$[$0]));
break;
case 80:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Expansion);
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = $$[$0];
break;
case 83:this.$ = $$[$0];
break;
case 84:this.$ = $$[$0];
break;
case 85:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Splat($$[$0-1]));
break;
case 86:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 87:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].add($$[$0]));
break;
case 88:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Value($$[$0-1], [].concat($$[$0])));
break;
case 89:this.$ = $$[$0];
break;
case 90:this.$ = $$[$0];
break;
case 91:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 92:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 93:this.$ = $$[$0];
break;
case 94:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 95:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 96:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 97:this.$ = $$[$0];
break;
case 98:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0]));
break;
case 99:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0].setCustom()));
break;
case 100:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0], 'soak'));
break;
case 101:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Access(new yy.Literal('prototype'))), yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))]);
break;
case 102:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Access(new yy.Literal('prototype'), 'soak')), yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))]);
break;
case 103:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Access(new yy.Literal('prototype')));
break;
case 104:this.$ = $$[$0];
break;
case 105:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-1]);
break;
case 106:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(yy.extend($$[$0], {
          soak: true
        }));
break;
case 107:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Index($$[$0]));
break;
case 108:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Slice($$[$0]));
break;
case 109:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Obj($$[$0-2], $$[$0-3].generated));
break;
case 110:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([]);
break;
case 111:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 112:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 113:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 114:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 115:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Class);
break;
case 116:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Class(null, null, $$[$0]));
break;
case 117:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Class(null, $$[$0]));
break;
case 118:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Class(null, $$[$0-1], $$[$0]));
break;
case 119:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Class($$[$0]));
break;
case 120:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Class($$[$0-1], null, $$[$0]));
break;
case 121:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Class($$[$0-2], $$[$0]));
break;
case 122:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Class($$[$0-3], $$[$0-1], $$[$0]));
break;
case 123:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Call($$[$0-2], $$[$0], $$[$0-1]));
break;
case 124:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Call($$[$0-2], $$[$0], $$[$0-1]));
break;
case 125:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Call('super', [new yy.Splat(new yy.Literal('arguments'))]));
break;
case 126:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Call('super', $$[$0]));
break;
case 127:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Defer($$[$0], yylineno));
break;
case 128:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(false);
break;
case 129:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(true);
break;
case 130:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([]);
break;
case 131:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-2]);
break;
case 132:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value(new yy.Literal('this')));
break;
case 133:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value(new yy.Literal('this')));
break;
case 134:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Value(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('this')), [yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))], 'this'));
break;
case 135:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Arr([]));
break;
case 136:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Arr($$[$0-2]));
break;
case 137:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('inclusive');
break;
case 138:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('exclusive');
break;
case 139:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Range($$[$0-3], $$[$0-1], $$[$0-2]));
break;
case 140:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Range($$[$0-2], $$[$0], $$[$0-1]));
break;
case 141:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Range($$[$0-1], null, $$[$0]));
break;
case 142:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Range(null, $$[$0], $$[$0-1]));
break;
case 143:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Range(null, null, $$[$0]));
break;
case 144:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 145:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 146:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 147:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-2]);
break;
case 148:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 149:this.$ = $$[$0];
break;
case 150:this.$ = $$[$0];
break;
case 151:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Expansion);
break;
case 152:this.$ = $$[$0];
break;
case 153:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([].concat($$[$0-2], $$[$0]));
break;
case 154:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Try($$[$0]));
break;
case 155:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Try($$[$0-1], $$[$0][0], $$[$0][1]));
break;
case 156:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Try($$[$0-2], null, null, $$[$0]));
break;
case 157:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Try($$[$0-3], $$[$0-2][0], $$[$0-2][1], $$[$0]));
break;
case 158:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([$$[$0-1], $$[$0]]);
break;
case 159:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Value($$[$0-1])), $$[$0]]);
break;
case 160:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([null, $$[$0]]);
break;
case 161:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Throw($$[$0]));
break;
case 162:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Parens($$[$0-1]));
break;
case 163:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Parens($$[$0-2]));
break;
case 164:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While($$[$0]));
break;
case 165:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.While($$[$0-2], {
          guard: $$[$0]
        }));
break;
case 166:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While($$[$0], {
          invert: true
        }));
break;
case 167:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.While($$[$0-2], {
          invert: true,
          guard: $$[$0]
        }));
break;
case 168:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].addBody($$[$0]));
break;
case 169:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0].addBody(yy.addLocationDataFn(_$[$0-1])(yy.Block.wrap([$$[$0-1]]))));
break;
case 170:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0].addBody(yy.addLocationDataFn(_$[$0-1])(yy.Block.wrap([$$[$0-1]]))));
break;
case 171:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])($$[$0]);
break;
case 172:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('true'))).addBody($$[$0]));
break;
case 173:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('true'))).addBody(yy.addLocationDataFn(_$[$0])(yy.Block.wrap([$$[$0]]))));
break;
case 174:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0-1], $$[$0]));
break;
case 175:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0-1], $$[$0]));
break;
case 176:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0], $$[$0-1]));
break;
case 177:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: yy.addLocationDataFn(_$[$0])(new yy.Value($$[$0]))
        });
break;
case 178:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])),
          step: $$[$0]
        });
break;
case 179:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])((function () {
        $$[$0].own = $$[$0-1].own;
        $$[$0].name = $$[$0-1][0];
        $$[$0].index = $$[$0-1][1];
        return $$[$0];
      }()));
break;
case 180:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0]);
break;
case 181:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])((function () {
        $$[$0].own = true;
        return $$[$0];
      }()));
break;
case 182:this.$ = $$[$0];
break;
case 183:this.$ = $$[$0];
break;
case 184:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 185:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 186:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 187:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([$$[$0-2], $$[$0]]);
break;
case 188:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: $$[$0]
        });
break;
case 189:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: $$[$0],
          object: true
        });
break;
case 190:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          guard: $$[$0]
        });
break;
case 191:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          guard: $$[$0],
          object: true
        });
break;
case 192:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          step: $$[$0]
        });
break;
case 193:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])({
          source: $$[$0-4],
          guard: $$[$0-2],
          step: $$[$0]
        });
break;
case 194:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])({
          source: $$[$0-4],
          step: $$[$0-2],
          guard: $$[$0]
        });
break;
case 195:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Switch($$[$0-3], $$[$0-1]));
break;
case 196:this.$ = yy.addLocationDataFn(_$[$0-6], _$[$0])(new yy.Switch($$[$0-5], $$[$0-3], $$[$0-1]));
break;
case 197:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Switch(null, $$[$0-1]));
break;
case 198:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])(new yy.Switch(null, $$[$0-3], $$[$0-1]));
break;
case 199:this.$ = $$[$0];
break;
case 200:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].concat($$[$0]));
break;
case 201:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([[$$[$0-1], $$[$0]]]);
break;
case 202:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])([[$$[$0-2], $$[$0-1]]]);
break;
case 203:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }));
break;
case 204:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])($$[$0-4].addElse(yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }))));
break;
case 205:this.$ = $$[$0];
break;
case 206:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].addElse($$[$0]));
break;
case 207:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0], yy.addLocationDataFn(_$[$0-2])(yy.Block.wrap([$$[$0-2]])), {
          type: $$[$0-1],
          statement: true
        }));
break;
case 208:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0], yy.addLocationDataFn(_$[$0-2])(yy.Block.wrap([$$[$0-2]])), {
          type: $$[$0-1],
          statement: true
        }));
break;
case 209:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op($$[$0-1], $$[$0]));
break;
case 210:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op($$[$0-1], $$[$0]));
break;
case 211:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('-', $$[$0]));
break;
case 212:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('+', $$[$0]));
break;
case 213:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('--', $$[$0]));
break;
case 214:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('++', $$[$0]));
break;
case 215:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('--', $$[$0-1], null, true));
break;
case 216:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('++', $$[$0-1], null, true));
break;
case 217:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Existence($$[$0-1]));
break;
case 218:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op('+', $$[$0-2], $$[$0]));
break;
case 219:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op('-', $$[$0-2], $$[$0]));
break;
case 220:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 221:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 222:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 223:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 224:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 225:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])((function () {
        if ($$[$0-1].charAt(0) === '!') {
          return new yy.Op($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert();
        } else {
          return new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
        }
      }()));
break;
case 226:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign($$[$0-2], $$[$0], $$[$0-1]));
break;
case 227:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign($$[$0-4], $$[$0-1], $$[$0-3]));
break;
case 228:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Assign($$[$0-3], $$[$0], $$[$0-2]));
break;
case 229:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Extends($$[$0-2], $$[$0]));
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,7:4,8:5,9:6,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,25],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[3]},{1:[2,2],6:[1,84]},{1:[2,3],6:[2,3],33:[2,3],41:[2,3],117:[2,3]},{1:[2,6],6:[2,6],33:[2,6],41:[2,6],117:[2,6],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,7],6:[2,7],33:[2,7],41:[2,7],117:[2,7],118:98,119:[1,71],121:[1,72],124:99,125:[1,74],127:75,141:[1,97]},{1:[2,8],6:[2,8],33:[2,8],41:[2,8],117:[2,8]},{1:[2,15],6:[2,15],32:[2,15],33:[2,15],41:[2,15],63:[2,15],68:[2,15],71:[2,15],76:101,80:[1,103],81:[1,104],82:[1,105],83:[1,106],84:107,85:[1,108],87:[2,15],88:[1,109],92:[2,15],95:100,99:[1,102],100:[2,128],101:[2,15],106:[2,15],108:[2,15],117:[2,15],119:[2,15],120:[2,15],121:[2,15],125:[2,15],126:[2,15],141:[2,15],144:[2,15],145:[2,15],148:[2,15],149:[2,15],150:[2,15],151:[2,15],152:[2,15],153:[2,15],154:[2,15]},{1:[2,16],6:[2,16],32:[2,16],33:[2,16],41:[2,16],63:[2,16],68:[2,16],71:[2,16],76:111,80:[1,103],81:[1,104],82:[1,105],83:[1,106],84:107,85:[1,108],87:[2,16],88:[1,109],92:[2,16],95:110,99:[1,102],100:[2,128],101:[2,16],106:[2,16],108:[2,16],117:[2,16],119:[2,16],120:[2,16],121:[2,16],125:[2,16],126:[2,16],141:[2,16],144:[2,16],145:[2,16],148:[2,16],149:[2,16],150:[2,16],151:[2,16],152:[2,16],153:[2,16],154:[2,16]},{1:[2,17],6:[2,17],32:[2,17],33:[2,17],41:[2,17],63:[2,17],68:[2,17],71:[2,17],87:[2,17],92:[2,17],101:[2,17],106:[2,17],108:[2,17],117:[2,17],119:[2,17],120:[2,17],121:[2,17],125:[2,17],126:[2,17],141:[2,17],144:[2,17],145:[2,17],148:[2,17],149:[2,17],150:[2,17],151:[2,17],152:[2,17],153:[2,17],154:[2,17]},{1:[2,18],6:[2,18],32:[2,18],33:[2,18],41:[2,18],63:[2,18],68:[2,18],71:[2,18],87:[2,18],92:[2,18],101:[2,18],106:[2,18],108:[2,18],117:[2,18],119:[2,18],120:[2,18],121:[2,18],125:[2,18],126:[2,18],141:[2,18],144:[2,18],145:[2,18],148:[2,18],149:[2,18],150:[2,18],151:[2,18],152:[2,18],153:[2,18],154:[2,18]},{1:[2,19],6:[2,19],32:[2,19],33:[2,19],41:[2,19],63:[2,19],68:[2,19],71:[2,19],87:[2,19],92:[2,19],101:[2,19],106:[2,19],108:[2,19],117:[2,19],119:[2,19],120:[2,19],121:[2,19],125:[2,19],126:[2,19],141:[2,19],144:[2,19],145:[2,19],148:[2,19],149:[2,19],150:[2,19],151:[2,19],152:[2,19],153:[2,19],154:[2,19]},{1:[2,20],6:[2,20],32:[2,20],33:[2,20],41:[2,20],63:[2,20],68:[2,20],71:[2,20],87:[2,20],92:[2,20],101:[2,20],106:[2,20],108:[2,20],117:[2,20],119:[2,20],120:[2,20],121:[2,20],125:[2,20],126:[2,20],141:[2,20],144:[2,20],145:[2,20],148:[2,20],149:[2,20],150:[2,20],151:[2,20],152:[2,20],153:[2,20],154:[2,20]},{1:[2,21],6:[2,21],32:[2,21],33:[2,21],41:[2,21],63:[2,21],68:[2,21],71:[2,21],87:[2,21],92:[2,21],101:[2,21],106:[2,21],108:[2,21],117:[2,21],119:[2,21],120:[2,21],121:[2,21],125:[2,21],126:[2,21],141:[2,21],144:[2,21],145:[2,21],148:[2,21],149:[2,21],150:[2,21],151:[2,21],152:[2,21],153:[2,21],154:[2,21]},{1:[2,22],6:[2,22],32:[2,22],33:[2,22],41:[2,22],63:[2,22],68:[2,22],71:[2,22],87:[2,22],92:[2,22],101:[2,22],106:[2,22],108:[2,22],117:[2,22],119:[2,22],120:[2,22],121:[2,22],125:[2,22],126:[2,22],141:[2,22],144:[2,22],145:[2,22],148:[2,22],149:[2,22],150:[2,22],151:[2,22],152:[2,22],153:[2,22],154:[2,22]},{1:[2,23],6:[2,23],32:[2,23],33:[2,23],41:[2,23],63:[2,23],68:[2,23],71:[2,23],87:[2,23],92:[2,23],101:[2,23],106:[2,23],108:[2,23],117:[2,23],119:[2,23],120:[2,23],121:[2,23],125:[2,23],126:[2,23],141:[2,23],144:[2,23],145:[2,23],148:[2,23],149:[2,23],150:[2,23],151:[2,23],152:[2,23],153:[2,23],154:[2,23]},{1:[2,24],6:[2,24],32:[2,24],33:[2,24],41:[2,24],63:[2,24],68:[2,24],71:[2,24],87:[2,24],92:[2,24],101:[2,24],106:[2,24],108:[2,24],117:[2,24],119:[2,24],120:[2,24],121:[2,24],125:[2,24],126:[2,24],141:[2,24],144:[2,24],145:[2,24],148:[2,24],149:[2,24],150:[2,24],151:[2,24],152:[2,24],153:[2,24],154:[2,24]},{1:[2,25],6:[2,25],32:[2,25],33:[2,25],41:[2,25],63:[2,25],68:[2,25],71:[2,25],87:[2,25],92:[2,25],101:[2,25],106:[2,25],108:[2,25],117:[2,25],119:[2,25],120:[2,25],121:[2,25],125:[2,25],126:[2,25],141:[2,25],144:[2,25],145:[2,25],148:[2,25],149:[2,25],150:[2,25],151:[2,25],152:[2,25],153:[2,25],154:[2,25]},{1:[2,26],6:[2,26],32:[2,26],33:[2,26],41:[2,26],63:[2,26],68:[2,26],71:[2,26],87:[2,26],92:[2,26],101:[2,26],106:[2,26],108:[2,26],117:[2,26],119:[2,26],120:[2,26],121:[2,26],125:[2,26],126:[2,26],141:[2,26],144:[2,26],145:[2,26],148:[2,26],149:[2,26],150:[2,26],151:[2,26],152:[2,26],153:[2,26],154:[2,26]},{1:[2,27],6:[2,27],32:[2,27],33:[2,27],41:[2,27],63:[2,27],68:[2,27],71:[2,27],87:[2,27],92:[2,27],101:[2,27],106:[2,27],108:[2,27],117:[2,27],119:[2,27],120:[2,27],121:[2,27],125:[2,27],126:[2,27],141:[2,27],144:[2,27],145:[2,27],148:[2,27],149:[2,27],150:[2,27],151:[2,27],152:[2,27],153:[2,27],154:[2,27]},{1:[2,28],6:[2,28],32:[2,28],33:[2,28],41:[2,28],63:[2,28],68:[2,28],71:[2,28],87:[2,28],92:[2,28],101:[2,28],106:[2,28],108:[2,28],117:[2,28],119:[2,28],120:[2,28],121:[2,28],125:[2,28],126:[2,28],141:[2,28],144:[2,28],145:[2,28],148:[2,28],149:[2,28],150:[2,28],151:[2,28],152:[2,28],153:[2,28],154:[2,28]},{1:[2,9],6:[2,9],33:[2,9],41:[2,9],117:[2,9],119:[2,9],121:[2,9],125:[2,9],141:[2,9]},{1:[2,10],6:[2,10],33:[2,10],41:[2,10],117:[2,10],119:[2,10],121:[2,10],125:[2,10],141:[2,10]},{1:[2,11],6:[2,11],33:[2,11],41:[2,11],117:[2,11],119:[2,11],121:[2,11],125:[2,11],141:[2,11]},{1:[2,12],6:[2,12],33:[2,12],41:[2,12],117:[2,12],119:[2,12],121:[2,12],125:[2,12],141:[2,12]},{1:[2,29],6:[2,29],7:113,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],31:[1,114],33:[2,29],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],41:[2,29],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,112],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],117:[2,29],118:43,119:[2,29],121:[2,29],122:44,123:[1,73],124:45,125:[2,29],127:75,134:[1,46],139:41,140:[1,70],141:[2,29],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39],148:[2,29],149:[2,29],150:[2,29],151:[2,29],152:[2,29],153:[2,29],154:[2,29]},{1:[2,93],6:[2,93],32:[2,93],33:[2,93],41:[2,93],53:[1,117],63:[2,93],68:[2,93],71:[2,93],80:[2,93],81:[2,93],82:[2,93],83:[2,93],85:[2,93],87:[2,93],88:[2,93],92:[2,93],99:[2,93],100:[2,93],101:[2,93],106:[2,93],108:[2,93],117:[2,93],119:[2,93],120:[2,93],121:[2,93],125:[2,93],126:[2,93],141:[2,93],144:[2,93],145:[2,93],148:[2,93],149:[2,93],150:[2,93],151:[2,93],152:[2,93],153:[2,93],154:[2,93]},{1:[2,94],6:[2,94],32:[2,94],33:[2,94],41:[2,94],63:[2,94],68:[2,94],71:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],85:[2,94],87:[2,94],88:[2,94],92:[2,94],99:[2,94],100:[2,94],101:[2,94],106:[2,94],108:[2,94],117:[2,94],119:[2,94],120:[2,94],121:[2,94],125:[2,94],126:[2,94],141:[2,94],144:[2,94],145:[2,94],148:[2,94],149:[2,94],150:[2,94],151:[2,94],152:[2,94],153:[2,94],154:[2,94]},{1:[2,95],6:[2,95],32:[2,95],33:[2,95],41:[2,95],63:[2,95],68:[2,95],71:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],85:[2,95],87:[2,95],88:[2,95],92:[2,95],99:[2,95],100:[2,95],101:[2,95],106:[2,95],108:[2,95],117:[2,95],119:[2,95],120:[2,95],121:[2,95],125:[2,95],126:[2,95],141:[2,95],144:[2,95],145:[2,95],148:[2,95],149:[2,95],150:[2,95],151:[2,95],152:[2,95],153:[2,95],154:[2,95]},{1:[2,96],6:[2,96],32:[2,96],33:[2,96],41:[2,96],63:[2,96],68:[2,96],71:[2,96],80:[2,96],81:[2,96],82:[2,96],83:[2,96],85:[2,96],87:[2,96],88:[2,96],92:[2,96],99:[2,96],100:[2,96],101:[2,96],106:[2,96],108:[2,96],117:[2,96],119:[2,96],120:[2,96],121:[2,96],125:[2,96],126:[2,96],141:[2,96],144:[2,96],145:[2,96],148:[2,96],149:[2,96],150:[2,96],151:[2,96],152:[2,96],153:[2,96],154:[2,96]},{1:[2,97],6:[2,97],32:[2,97],33:[2,97],41:[2,97],63:[2,97],68:[2,97],71:[2,97],80:[2,97],81:[2,97],82:[2,97],83:[2,97],85:[2,97],87:[2,97],88:[2,97],92:[2,97],99:[2,97],100:[2,97],101:[2,97],106:[2,97],108:[2,97],117:[2,97],119:[2,97],120:[2,97],121:[2,97],125:[2,97],126:[2,97],141:[2,97],144:[2,97],145:[2,97],148:[2,97],149:[2,97],150:[2,97],151:[2,97],152:[2,97],153:[2,97],154:[2,97]},{1:[2,125],6:[2,125],32:[2,125],33:[2,125],41:[2,125],45:[2,125],63:[2,125],68:[2,125],71:[2,125],80:[2,125],81:[2,125],82:[2,125],83:[2,125],85:[2,125],87:[2,125],88:[2,125],92:[2,125],96:118,99:[2,125],100:[1,119],101:[2,125],106:[2,125],108:[2,125],117:[2,125],119:[2,125],120:[2,125],121:[2,125],125:[2,125],126:[2,125],141:[2,125],144:[2,125],145:[2,125],148:[2,125],149:[2,125],150:[2,125],151:[2,125],152:[2,125],153:[2,125],154:[2,125]},{6:[2,72],32:[2,72],34:124,35:[1,81],58:125,62:120,63:[2,72],68:[2,72],69:121,70:122,71:[1,123],72:126,73:127,90:[1,76],104:[1,128],105:[1,129]},{15:130,32:[1,131]},{7:132,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:133,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:134,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:135,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{16:137,17:138,34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:139,58:69,72:53,73:54,75:136,77:28,78:29,79:30,90:[1,76],97:[1,31],103:[1,64],104:[1,65],105:[1,63],116:[1,62]},{16:137,17:138,34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:139,58:69,72:53,73:54,75:140,77:28,78:29,79:30,90:[1,76],97:[1,31],103:[1,64],104:[1,65],105:[1,63],116:[1,62]},{1:[2,90],6:[2,90],32:[2,90],33:[2,90],41:[2,90],53:[2,90],63:[2,90],68:[2,90],71:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],85:[2,90],87:[2,90],88:[2,90],92:[2,90],94:[1,144],99:[2,90],100:[2,90],101:[2,90],106:[2,90],108:[2,90],117:[2,90],119:[2,90],120:[2,90],121:[2,90],125:[2,90],126:[2,90],141:[2,90],144:[2,90],145:[2,90],146:[1,141],147:[1,142],148:[2,90],149:[2,90],150:[2,90],151:[2,90],152:[2,90],153:[2,90],154:[2,90],155:[1,143]},{1:[2,205],6:[2,205],32:[2,205],33:[2,205],41:[2,205],63:[2,205],68:[2,205],71:[2,205],87:[2,205],92:[2,205],101:[2,205],106:[2,205],108:[2,205],117:[2,205],119:[2,205],120:[2,205],121:[2,205],125:[2,205],126:[2,205],136:[1,145],141:[2,205],144:[2,205],145:[2,205],148:[2,205],149:[2,205],150:[2,205],151:[2,205],152:[2,205],153:[2,205],154:[2,205]},{15:146,32:[1,131]},{15:147,32:[1,131]},{1:[2,171],6:[2,171],32:[2,171],33:[2,171],41:[2,171],63:[2,171],68:[2,171],71:[2,171],87:[2,171],92:[2,171],101:[2,171],106:[2,171],108:[2,171],117:[2,171],119:[2,171],120:[2,171],121:[2,171],125:[2,171],126:[2,171],141:[2,171],144:[2,171],145:[2,171],148:[2,171],149:[2,171],150:[2,171],151:[2,171],152:[2,171],153:[2,171],154:[2,171]},{15:148,32:[1,131]},{7:149,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,150],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,115],6:[2,115],15:151,16:137,17:138,32:[1,131],33:[2,115],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],41:[2,115],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:139,58:69,63:[2,115],68:[2,115],71:[2,115],72:53,73:54,75:153,77:28,78:29,79:30,87:[2,115],90:[1,76],92:[2,115],94:[1,152],97:[1,31],101:[2,115],103:[1,64],104:[1,65],105:[1,63],106:[2,115],108:[2,115],116:[1,62],117:[2,115],119:[2,115],120:[2,115],121:[2,115],125:[2,115],126:[2,115],141:[2,115],144:[2,115],145:[2,115],148:[2,115],149:[2,115],150:[2,115],151:[2,115],152:[2,115],153:[2,115],154:[2,115]},{7:154,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{96:155,100:[1,119]},{1:[2,62],6:[2,62],7:156,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],33:[2,62],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],41:[2,62],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],117:[2,62],118:43,119:[2,62],121:[2,62],122:44,123:[1,73],124:45,125:[2,62],127:75,134:[1,46],139:41,140:[1,70],141:[2,62],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,65],6:[2,65],32:[2,65],33:[2,65],41:[2,65],68:[2,65],92:[2,65],117:[2,65],119:[2,65],121:[2,65],125:[2,65],141:[2,65]},{7:158,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],15:157,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,131],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,91],6:[2,91],32:[2,91],33:[2,91],41:[2,91],53:[2,91],63:[2,91],68:[2,91],71:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],85:[2,91],87:[2,91],88:[2,91],92:[2,91],99:[2,91],100:[2,91],101:[2,91],106:[2,91],108:[2,91],117:[2,91],119:[2,91],120:[2,91],121:[2,91],125:[2,91],126:[2,91],141:[2,91],144:[2,91],145:[2,91],148:[2,91],149:[2,91],150:[2,91],151:[2,91],152:[2,91],153:[2,91],154:[2,91]},{1:[2,92],6:[2,92],32:[2,92],33:[2,92],41:[2,92],53:[2,92],63:[2,92],68:[2,92],71:[2,92],80:[2,92],81:[2,92],82:[2,92],83:[2,92],85:[2,92],87:[2,92],88:[2,92],92:[2,92],99:[2,92],100:[2,92],101:[2,92],106:[2,92],108:[2,92],117:[2,92],119:[2,92],120:[2,92],121:[2,92],125:[2,92],126:[2,92],141:[2,92],144:[2,92],145:[2,92],148:[2,92],149:[2,92],150:[2,92],151:[2,92],152:[2,92],153:[2,92],154:[2,92]},{1:[2,41],6:[2,41],32:[2,41],33:[2,41],41:[2,41],63:[2,41],68:[2,41],71:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],85:[2,41],87:[2,41],88:[2,41],92:[2,41],99:[2,41],100:[2,41],101:[2,41],106:[2,41],108:[2,41],117:[2,41],119:[2,41],120:[2,41],121:[2,41],125:[2,41],126:[2,41],141:[2,41],144:[2,41],145:[2,41],148:[2,41],149:[2,41],150:[2,41],151:[2,41],152:[2,41],153:[2,41],154:[2,41]},{1:[2,42],6:[2,42],32:[2,42],33:[2,42],41:[2,42],63:[2,42],68:[2,42],71:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],85:[2,42],87:[2,42],88:[2,42],92:[2,42],99:[2,42],100:[2,42],101:[2,42],106:[2,42],108:[2,42],117:[2,42],119:[2,42],120:[2,42],121:[2,42],125:[2,42],126:[2,42],141:[2,42],144:[2,42],145:[2,42],148:[2,42],149:[2,42],150:[2,42],151:[2,42],152:[2,42],153:[2,42],154:[2,42]},{1:[2,43],6:[2,43],32:[2,43],33:[2,43],41:[2,43],63:[2,43],68:[2,43],71:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],85:[2,43],87:[2,43],88:[2,43],92:[2,43],99:[2,43],100:[2,43],101:[2,43],106:[2,43],108:[2,43],117:[2,43],119:[2,43],120:[2,43],121:[2,43],125:[2,43],126:[2,43],141:[2,43],144:[2,43],145:[2,43],148:[2,43],149:[2,43],150:[2,43],151:[2,43],152:[2,43],153:[2,43],154:[2,43]},{1:[2,44],6:[2,44],32:[2,44],33:[2,44],41:[2,44],63:[2,44],68:[2,44],71:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],85:[2,44],87:[2,44],88:[2,44],92:[2,44],99:[2,44],100:[2,44],101:[2,44],106:[2,44],108:[2,44],117:[2,44],119:[2,44],120:[2,44],121:[2,44],125:[2,44],126:[2,44],141:[2,44],144:[2,44],145:[2,44],148:[2,44],149:[2,44],150:[2,44],151:[2,44],152:[2,44],153:[2,44],154:[2,44]},{1:[2,45],6:[2,45],32:[2,45],33:[2,45],41:[2,45],63:[2,45],68:[2,45],71:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],85:[2,45],87:[2,45],88:[2,45],92:[2,45],99:[2,45],100:[2,45],101:[2,45],106:[2,45],108:[2,45],117:[2,45],119:[2,45],120:[2,45],121:[2,45],125:[2,45],126:[2,45],141:[2,45],144:[2,45],145:[2,45],148:[2,45],149:[2,45],150:[2,45],151:[2,45],152:[2,45],153:[2,45],154:[2,45]},{1:[2,46],6:[2,46],32:[2,46],33:[2,46],41:[2,46],63:[2,46],68:[2,46],71:[2,46],80:[2,46],81:[2,46],82:[2,46],83:[2,46],85:[2,46],87:[2,46],88:[2,46],92:[2,46],99:[2,46],100:[2,46],101:[2,46],106:[2,46],108:[2,46],117:[2,46],119:[2,46],120:[2,46],121:[2,46],125:[2,46],126:[2,46],141:[2,46],144:[2,46],145:[2,46],148:[2,46],149:[2,46],150:[2,46],151:[2,46],152:[2,46],153:[2,46],154:[2,46]},{1:[2,47],6:[2,47],32:[2,47],33:[2,47],41:[2,47],63:[2,47],68:[2,47],71:[2,47],80:[2,47],81:[2,47],82:[2,47],83:[2,47],85:[2,47],87:[2,47],88:[2,47],92:[2,47],99:[2,47],100:[2,47],101:[2,47],106:[2,47],108:[2,47],117:[2,47],119:[2,47],120:[2,47],121:[2,47],125:[2,47],126:[2,47],141:[2,47],144:[2,47],145:[2,47],148:[2,47],149:[2,47],150:[2,47],151:[2,47],152:[2,47],153:[2,47],154:[2,47]},{4:159,5:3,7:4,8:5,9:6,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,25],32:[1,160],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:161,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,165],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],102:163,103:[1,64],104:[1,65],105:[1,63],106:[1,162],109:164,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,132],6:[2,132],32:[2,132],33:[2,132],41:[2,132],63:[2,132],68:[2,132],71:[2,132],80:[2,132],81:[2,132],82:[2,132],83:[2,132],85:[2,132],87:[2,132],88:[2,132],92:[2,132],99:[2,132],100:[2,132],101:[2,132],106:[2,132],108:[2,132],117:[2,132],119:[2,132],120:[2,132],121:[2,132],125:[2,132],126:[2,132],141:[2,132],144:[2,132],145:[2,132],148:[2,132],149:[2,132],150:[2,132],151:[2,132],152:[2,132],153:[2,132],154:[2,132]},{1:[2,133],6:[2,133],32:[2,133],33:[2,133],34:168,35:[1,81],41:[2,133],63:[2,133],68:[2,133],71:[2,133],80:[2,133],81:[2,133],82:[2,133],83:[2,133],85:[2,133],87:[2,133],88:[2,133],92:[2,133],99:[2,133],100:[2,133],101:[2,133],106:[2,133],108:[2,133],117:[2,133],119:[2,133],120:[2,133],121:[2,133],125:[2,133],126:[2,133],141:[2,133],144:[2,133],145:[2,133],148:[2,133],149:[2,133],150:[2,133],151:[2,133],152:[2,133],153:[2,133],154:[2,133]},{32:[2,68]},{32:[2,69]},{1:[2,86],6:[2,86],32:[2,86],33:[2,86],41:[2,86],53:[2,86],63:[2,86],68:[2,86],71:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],85:[2,86],87:[2,86],88:[2,86],92:[2,86],94:[2,86],99:[2,86],100:[2,86],101:[2,86],106:[2,86],108:[2,86],117:[2,86],119:[2,86],120:[2,86],121:[2,86],125:[2,86],126:[2,86],141:[2,86],144:[2,86],145:[2,86],146:[2,86],147:[2,86],148:[2,86],149:[2,86],150:[2,86],151:[2,86],152:[2,86],153:[2,86],154:[2,86],155:[2,86]},{1:[2,89],6:[2,89],32:[2,89],33:[2,89],41:[2,89],53:[2,89],63:[2,89],68:[2,89],71:[2,89],80:[2,89],81:[2,89],82:[2,89],83:[2,89],85:[2,89],87:[2,89],88:[2,89],92:[2,89],94:[2,89],99:[2,89],100:[2,89],101:[2,89],106:[2,89],108:[2,89],117:[2,89],119:[2,89],120:[2,89],121:[2,89],125:[2,89],126:[2,89],141:[2,89],144:[2,89],145:[2,89],146:[2,89],147:[2,89],148:[2,89],149:[2,89],150:[2,89],151:[2,89],152:[2,89],153:[2,89],154:[2,89],155:[2,89]},{7:169,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:170,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:171,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:173,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],15:172,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,131],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{34:178,35:[1,81],58:179,72:180,73:181,78:174,90:[1,76],104:[1,128],105:[1,63],129:175,130:[1,176],131:177},{128:182,132:[1,183],133:[1,184]},{6:[2,110],11:189,32:[2,110],34:191,35:[1,81],36:190,37:[1,77],38:78,39:[1,82],40:[1,83],54:186,55:187,57:188,58:192,60:[1,51],68:[2,110],91:185,92:[2,110],104:[1,128]},{1:[2,35],6:[2,35],32:[2,35],33:[2,35],41:[2,35],56:[2,35],63:[2,35],68:[2,35],71:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],85:[2,35],87:[2,35],88:[2,35],92:[2,35],99:[2,35],100:[2,35],101:[2,35],106:[2,35],108:[2,35],117:[2,35],119:[2,35],120:[2,35],121:[2,35],125:[2,35],126:[2,35],141:[2,35],144:[2,35],145:[2,35],148:[2,35],149:[2,35],150:[2,35],151:[2,35],152:[2,35],153:[2,35],154:[2,35]},{1:[2,36],6:[2,36],32:[2,36],33:[2,36],41:[2,36],56:[2,36],63:[2,36],68:[2,36],71:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],85:[2,36],87:[2,36],88:[2,36],92:[2,36],99:[2,36],100:[2,36],101:[2,36],106:[2,36],108:[2,36],117:[2,36],119:[2,36],120:[2,36],121:[2,36],125:[2,36],126:[2,36],141:[2,36],144:[2,36],145:[2,36],148:[2,36],149:[2,36],150:[2,36],151:[2,36],152:[2,36],153:[2,36],154:[2,36]},{1:[2,39],6:[2,39],32:[2,39],33:[2,39],41:[2,39],63:[2,39],68:[2,39],71:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],85:[2,39],87:[2,39],88:[2,39],92:[2,39],99:[2,39],100:[2,39],101:[2,39],106:[2,39],108:[2,39],117:[2,39],119:[2,39],120:[2,39],121:[2,39],125:[2,39],126:[2,39],141:[2,39],144:[2,39],145:[2,39],148:[2,39],149:[2,39],150:[2,39],151:[2,39],152:[2,39],153:[2,39],154:[2,39]},{16:137,17:193,34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:139,58:69,72:53,73:54,75:194,77:28,78:29,79:30,90:[1,76],97:[1,31],103:[1,64],104:[1,65],105:[1,63],116:[1,62]},{1:[2,34],6:[2,34],32:[2,34],33:[2,34],41:[2,34],53:[2,34],56:[2,34],63:[2,34],68:[2,34],71:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],85:[2,34],87:[2,34],88:[2,34],92:[2,34],94:[2,34],99:[2,34],100:[2,34],101:[2,34],106:[2,34],108:[2,34],117:[2,34],119:[2,34],120:[2,34],121:[2,34],125:[2,34],126:[2,34],132:[2,34],133:[2,34],141:[2,34],144:[2,34],145:[2,34],146:[2,34],147:[2,34],148:[2,34],149:[2,34],150:[2,34],151:[2,34],152:[2,34],153:[2,34],154:[2,34],155:[2,34]},{1:[2,37],6:[2,37],32:[2,37],33:[2,37],41:[2,37],56:[2,37],63:[2,37],68:[2,37],71:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],85:[2,37],87:[2,37],88:[2,37],92:[2,37],99:[2,37],100:[2,37],101:[2,37],106:[2,37],108:[2,37],117:[2,37],119:[2,37],120:[2,37],121:[2,37],125:[2,37],126:[2,37],141:[2,37],144:[2,37],145:[2,37],148:[2,37],149:[2,37],150:[2,37],151:[2,37],152:[2,37],153:[2,37],154:[2,37]},{4:195,5:3,7:4,8:5,9:6,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,25],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,5],5:196,6:[2,5],7:4,8:5,9:6,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,25],33:[2,5],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],41:[2,5],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],117:[2,5],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,217],6:[2,217],32:[2,217],33:[2,217],41:[2,217],63:[2,217],68:[2,217],71:[2,217],87:[2,217],92:[2,217],101:[2,217],106:[2,217],108:[2,217],117:[2,217],119:[2,217],120:[2,217],121:[2,217],125:[2,217],126:[2,217],141:[2,217],144:[2,217],145:[2,217],148:[2,217],149:[2,217],150:[2,217],151:[2,217],152:[2,217],153:[2,217],154:[2,217]},{7:197,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:198,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:199,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:200,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:201,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:202,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:203,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:204,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:205,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,170],6:[2,170],32:[2,170],33:[2,170],41:[2,170],63:[2,170],68:[2,170],71:[2,170],87:[2,170],92:[2,170],101:[2,170],106:[2,170],108:[2,170],117:[2,170],119:[2,170],120:[2,170],121:[2,170],125:[2,170],126:[2,170],141:[2,170],144:[2,170],145:[2,170],148:[2,170],149:[2,170],150:[2,170],151:[2,170],152:[2,170],153:[2,170],154:[2,170]},{1:[2,175],6:[2,175],32:[2,175],33:[2,175],41:[2,175],63:[2,175],68:[2,175],71:[2,175],87:[2,175],92:[2,175],101:[2,175],106:[2,175],108:[2,175],117:[2,175],119:[2,175],120:[2,175],121:[2,175],125:[2,175],126:[2,175],141:[2,175],144:[2,175],145:[2,175],148:[2,175],149:[2,175],150:[2,175],151:[2,175],152:[2,175],153:[2,175],154:[2,175]},{7:206,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,169],6:[2,169],32:[2,169],33:[2,169],41:[2,169],63:[2,169],68:[2,169],71:[2,169],87:[2,169],92:[2,169],101:[2,169],106:[2,169],108:[2,169],117:[2,169],119:[2,169],120:[2,169],121:[2,169],125:[2,169],126:[2,169],141:[2,169],144:[2,169],145:[2,169],148:[2,169],149:[2,169],150:[2,169],151:[2,169],152:[2,169],153:[2,169],154:[2,169]},{1:[2,174],6:[2,174],32:[2,174],33:[2,174],41:[2,174],63:[2,174],68:[2,174],71:[2,174],87:[2,174],92:[2,174],101:[2,174],106:[2,174],108:[2,174],117:[2,174],119:[2,174],120:[2,174],121:[2,174],125:[2,174],126:[2,174],141:[2,174],144:[2,174],145:[2,174],148:[2,174],149:[2,174],150:[2,174],151:[2,174],152:[2,174],153:[2,174],154:[2,174]},{96:207,100:[1,119]},{1:[2,87],6:[2,87],32:[2,87],33:[2,87],41:[2,87],53:[2,87],63:[2,87],68:[2,87],71:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],85:[2,87],87:[2,87],88:[2,87],92:[2,87],94:[2,87],99:[2,87],100:[2,87],101:[2,87],106:[2,87],108:[2,87],117:[2,87],119:[2,87],120:[2,87],121:[2,87],125:[2,87],126:[2,87],141:[2,87],144:[2,87],145:[2,87],146:[2,87],147:[2,87],148:[2,87],149:[2,87],150:[2,87],151:[2,87],152:[2,87],153:[2,87],154:[2,87],155:[2,87]},{100:[2,129]},{29:209,34:208,35:[1,81],98:[1,49]},{34:210,35:[1,81]},{1:[2,103],6:[2,103],32:[2,103],33:[2,103],34:211,35:[1,81],41:[2,103],53:[2,103],63:[2,103],68:[2,103],71:[2,103],80:[2,103],81:[2,103],82:[2,103],83:[2,103],85:[2,103],87:[2,103],88:[2,103],92:[2,103],94:[2,103],99:[2,103],100:[2,103],101:[2,103],106:[2,103],108:[2,103],117:[2,103],119:[2,103],120:[2,103],121:[2,103],125:[2,103],126:[2,103],141:[2,103],144:[2,103],145:[2,103],146:[2,103],147:[2,103],148:[2,103],149:[2,103],150:[2,103],151:[2,103],152:[2,103],153:[2,103],154:[2,103],155:[2,103]},{34:212,35:[1,81]},{1:[2,104],6:[2,104],32:[2,104],33:[2,104],41:[2,104],53:[2,104],63:[2,104],68:[2,104],71:[2,104],80:[2,104],81:[2,104],82:[2,104],83:[2,104],85:[2,104],87:[2,104],88:[2,104],92:[2,104],94:[2,104],99:[2,104],100:[2,104],101:[2,104],106:[2,104],108:[2,104],117:[2,104],119:[2,104],120:[2,104],121:[2,104],125:[2,104],126:[2,104],141:[2,104],144:[2,104],145:[2,104],146:[2,104],147:[2,104],148:[2,104],149:[2,104],150:[2,104],151:[2,104],152:[2,104],153:[2,104],154:[2,104],155:[2,104]},{7:214,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,218],72:53,73:54,75:40,77:28,78:29,79:30,86:213,89:215,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],107:216,108:[1,217],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{84:219,85:[1,108],88:[1,109]},{96:220,100:[1,119]},{1:[2,88],6:[2,88],32:[2,88],33:[2,88],41:[2,88],53:[2,88],63:[2,88],68:[2,88],71:[2,88],80:[2,88],81:[2,88],82:[2,88],83:[2,88],85:[2,88],87:[2,88],88:[2,88],92:[2,88],94:[2,88],99:[2,88],100:[2,88],101:[2,88],106:[2,88],108:[2,88],117:[2,88],119:[2,88],120:[2,88],121:[2,88],125:[2,88],126:[2,88],141:[2,88],144:[2,88],145:[2,88],146:[2,88],147:[2,88],148:[2,88],149:[2,88],150:[2,88],151:[2,88],152:[2,88],153:[2,88],154:[2,88],155:[2,88]},{1:[2,64],6:[2,64],7:221,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],33:[2,64],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],41:[2,64],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],117:[2,64],118:43,119:[2,62],121:[2,62],122:44,123:[1,73],124:45,125:[2,62],127:75,134:[1,46],139:41,140:[1,70],141:[2,62],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,30],6:[2,30],32:[2,30],33:[2,30],41:[2,30],63:[2,30],68:[2,30],71:[2,30],87:[2,30],92:[2,30],101:[2,30],106:[2,30],108:[2,30],117:[2,30],118:95,119:[2,30],120:[2,30],121:[2,30],124:96,125:[2,30],126:[2,30],127:75,141:[2,30],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{7:222,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{118:98,119:[1,71],121:[1,72],124:99,125:[1,74],127:75,141:[1,97]},{1:[2,29],6:[2,29],7:113,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],31:[1,114],32:[2,29],33:[2,29],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],41:[2,29],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],63:[2,29],64:33,65:[1,66],66:[1,67],68:[2,29],71:[2,29],72:53,73:54,75:40,77:28,78:29,79:30,87:[2,29],90:[1,76],92:[2,29],93:[1,47],97:[1,31],98:[1,49],101:[2,29],103:[1,64],104:[1,65],105:[1,63],106:[2,29],108:[2,29],111:[1,42],115:[1,48],116:[1,62],117:[2,29],118:43,119:[2,29],120:[2,29],121:[2,29],122:44,123:[1,73],124:45,125:[2,29],126:[2,29],127:75,134:[1,46],139:41,140:[1,70],141:[2,29],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39],148:[2,29],149:[2,29],150:[2,29],151:[2,29],152:[2,29],153:[2,29],154:[2,29]},{6:[1,224],7:223,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,225],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,126],6:[2,126],32:[2,126],33:[2,126],41:[2,126],45:[2,126],63:[2,126],68:[2,126],71:[2,126],80:[2,126],81:[2,126],82:[2,126],83:[2,126],85:[2,126],87:[2,126],88:[2,126],92:[2,126],99:[2,126],100:[2,126],101:[2,126],106:[2,126],108:[2,126],117:[2,126],119:[2,126],120:[2,126],121:[2,126],125:[2,126],126:[2,126],141:[2,126],144:[2,126],145:[2,126],148:[2,126],149:[2,126],150:[2,126],151:[2,126],152:[2,126],153:[2,126],154:[2,126]},{7:228,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,165],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],101:[1,226],102:227,103:[1,64],104:[1,65],105:[1,63],109:164,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,70],32:[2,70],63:[1,229],67:231,68:[1,230]},{6:[2,73],32:[2,73],33:[2,73],63:[2,73],68:[2,73]},{6:[2,77],32:[2,77],33:[2,77],53:[1,233],63:[2,77],68:[2,77],71:[1,232]},{6:[2,80],32:[2,80],33:[2,80],63:[2,80],68:[2,80]},{6:[2,81],32:[2,81],33:[2,81],53:[2,81],63:[2,81],68:[2,81],71:[2,81]},{6:[2,82],32:[2,82],33:[2,82],53:[2,82],63:[2,82],68:[2,82],71:[2,82]},{6:[2,83],32:[2,83],33:[2,83],53:[2,83],63:[2,83],68:[2,83],71:[2,83]},{6:[2,84],32:[2,84],33:[2,84],53:[2,84],63:[2,84],68:[2,84],71:[2,84]},{34:168,35:[1,81]},{7:228,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,165],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],102:163,103:[1,64],104:[1,65],105:[1,63],106:[1,162],109:164,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,67],6:[2,67],32:[2,67],33:[2,67],41:[2,67],63:[2,67],68:[2,67],71:[2,67],87:[2,67],92:[2,67],101:[2,67],106:[2,67],108:[2,67],117:[2,67],119:[2,67],120:[2,67],121:[2,67],125:[2,67],126:[2,67],141:[2,67],144:[2,67],145:[2,67],148:[2,67],149:[2,67],150:[2,67],151:[2,67],152:[2,67],153:[2,67],154:[2,67]},{4:235,5:3,7:4,8:5,9:6,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,25],33:[1,234],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,209],6:[2,209],32:[2,209],33:[2,209],41:[2,209],63:[2,209],68:[2,209],71:[2,209],87:[2,209],92:[2,209],101:[2,209],106:[2,209],108:[2,209],117:[2,209],118:95,119:[2,209],120:[2,209],121:[2,209],124:96,125:[2,209],126:[2,209],127:75,141:[2,209],144:[2,209],145:[2,209],148:[1,85],149:[2,209],150:[2,209],151:[2,209],152:[2,209],153:[2,209],154:[2,209]},{1:[2,210],6:[2,210],32:[2,210],33:[2,210],41:[2,210],63:[2,210],68:[2,210],71:[2,210],87:[2,210],92:[2,210],101:[2,210],106:[2,210],108:[2,210],117:[2,210],118:95,119:[2,210],120:[2,210],121:[2,210],124:96,125:[2,210],126:[2,210],127:75,141:[2,210],144:[2,210],145:[2,210],148:[1,85],149:[2,210],150:[1,89],151:[2,210],152:[2,210],153:[2,210],154:[2,210]},{1:[2,211],6:[2,211],32:[2,211],33:[2,211],41:[2,211],63:[2,211],68:[2,211],71:[2,211],87:[2,211],92:[2,211],101:[2,211],106:[2,211],108:[2,211],117:[2,211],118:95,119:[2,211],120:[2,211],121:[2,211],124:96,125:[2,211],126:[2,211],127:75,141:[2,211],144:[2,211],145:[2,211],148:[1,85],149:[2,211],150:[1,89],151:[2,211],152:[2,211],153:[2,211],154:[2,211]},{1:[2,212],6:[2,212],32:[2,212],33:[2,212],41:[2,212],63:[2,212],68:[2,212],71:[2,212],87:[2,212],92:[2,212],101:[2,212],106:[2,212],108:[2,212],117:[2,212],118:95,119:[2,212],120:[2,212],121:[2,212],124:96,125:[2,212],126:[2,212],127:75,141:[2,212],144:[2,212],145:[2,212],148:[1,85],149:[2,212],150:[1,89],151:[2,212],152:[2,212],153:[2,212],154:[2,212]},{1:[2,213],6:[2,213],32:[2,213],33:[2,213],41:[2,213],63:[2,213],68:[2,213],71:[2,213],80:[2,90],81:[2,90],82:[2,90],83:[2,90],85:[2,90],87:[2,213],88:[2,90],92:[2,213],99:[2,90],100:[2,90],101:[2,213],106:[2,213],108:[2,213],117:[2,213],119:[2,213],120:[2,213],121:[2,213],125:[2,213],126:[2,213],141:[2,213],144:[2,213],145:[2,213],148:[2,213],149:[2,213],150:[2,213],151:[2,213],152:[2,213],153:[2,213],154:[2,213]},{76:101,80:[1,103],81:[1,104],82:[1,105],83:[1,106],84:107,85:[1,108],88:[1,109],95:100,99:[1,102],100:[2,128]},{76:111,80:[1,103],81:[1,104],82:[1,105],83:[1,106],84:107,85:[1,108],88:[1,109],95:110,99:[1,102],100:[2,128]},{80:[2,93],81:[2,93],82:[2,93],83:[2,93],85:[2,93],88:[2,93],99:[2,93],100:[2,93]},{1:[2,214],6:[2,214],32:[2,214],33:[2,214],41:[2,214],63:[2,214],68:[2,214],71:[2,214],80:[2,90],81:[2,90],82:[2,90],83:[2,90],85:[2,90],87:[2,214],88:[2,90],92:[2,214],99:[2,90],100:[2,90],101:[2,214],106:[2,214],108:[2,214],117:[2,214],119:[2,214],120:[2,214],121:[2,214],125:[2,214],126:[2,214],141:[2,214],144:[2,214],145:[2,214],148:[2,214],149:[2,214],150:[2,214],151:[2,214],152:[2,214],153:[2,214],154:[2,214]},{1:[2,215],6:[2,215],32:[2,215],33:[2,215],41:[2,215],63:[2,215],68:[2,215],71:[2,215],87:[2,215],92:[2,215],101:[2,215],106:[2,215],108:[2,215],117:[2,215],119:[2,215],120:[2,215],121:[2,215],125:[2,215],126:[2,215],141:[2,215],144:[2,215],145:[2,215],148:[2,215],149:[2,215],150:[2,215],151:[2,215],152:[2,215],153:[2,215],154:[2,215]},{1:[2,216],6:[2,216],32:[2,216],33:[2,216],41:[2,216],63:[2,216],68:[2,216],71:[2,216],87:[2,216],92:[2,216],101:[2,216],106:[2,216],108:[2,216],117:[2,216],119:[2,216],120:[2,216],121:[2,216],125:[2,216],126:[2,216],141:[2,216],144:[2,216],145:[2,216],148:[2,216],149:[2,216],150:[2,216],151:[2,216],152:[2,216],153:[2,216],154:[2,216]},{6:[1,238],7:236,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,237],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:239,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{15:240,32:[1,131],140:[1,241]},{1:[2,154],6:[2,154],32:[2,154],33:[2,154],41:[2,154],63:[2,154],68:[2,154],71:[2,154],87:[2,154],92:[2,154],101:[2,154],106:[2,154],108:[2,154],112:242,113:[1,243],114:[1,244],117:[2,154],119:[2,154],120:[2,154],121:[2,154],125:[2,154],126:[2,154],141:[2,154],144:[2,154],145:[2,154],148:[2,154],149:[2,154],150:[2,154],151:[2,154],152:[2,154],153:[2,154],154:[2,154]},{1:[2,168],6:[2,168],32:[2,168],33:[2,168],41:[2,168],63:[2,168],68:[2,168],71:[2,168],87:[2,168],92:[2,168],101:[2,168],106:[2,168],108:[2,168],117:[2,168],119:[2,168],120:[2,168],121:[2,168],125:[2,168],126:[2,168],141:[2,168],144:[2,168],145:[2,168],148:[2,168],149:[2,168],150:[2,168],151:[2,168],152:[2,168],153:[2,168],154:[2,168]},{1:[2,176],6:[2,176],32:[2,176],33:[2,176],41:[2,176],63:[2,176],68:[2,176],71:[2,176],87:[2,176],92:[2,176],101:[2,176],106:[2,176],108:[2,176],117:[2,176],119:[2,176],120:[2,176],121:[2,176],125:[2,176],126:[2,176],141:[2,176],144:[2,176],145:[2,176],148:[2,176],149:[2,176],150:[2,176],151:[2,176],152:[2,176],153:[2,176],154:[2,176]},{32:[1,245],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{135:246,137:247,138:[1,248]},{1:[2,116],6:[2,116],32:[2,116],33:[2,116],41:[2,116],63:[2,116],68:[2,116],71:[2,116],87:[2,116],92:[2,116],101:[2,116],106:[2,116],108:[2,116],117:[2,116],119:[2,116],120:[2,116],121:[2,116],125:[2,116],126:[2,116],141:[2,116],144:[2,116],145:[2,116],148:[2,116],149:[2,116],150:[2,116],151:[2,116],152:[2,116],153:[2,116],154:[2,116]},{7:249,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,119],6:[2,119],15:250,32:[1,131],33:[2,119],41:[2,119],63:[2,119],68:[2,119],71:[2,119],80:[2,90],81:[2,90],82:[2,90],83:[2,90],85:[2,90],87:[2,119],88:[2,90],92:[2,119],94:[1,251],99:[2,90],100:[2,90],101:[2,119],106:[2,119],108:[2,119],117:[2,119],119:[2,119],120:[2,119],121:[2,119],125:[2,119],126:[2,119],141:[2,119],144:[2,119],145:[2,119],148:[2,119],149:[2,119],150:[2,119],151:[2,119],152:[2,119],153:[2,119],154:[2,119]},{1:[2,161],6:[2,161],32:[2,161],33:[2,161],41:[2,161],63:[2,161],68:[2,161],71:[2,161],87:[2,161],92:[2,161],101:[2,161],106:[2,161],108:[2,161],117:[2,161],118:95,119:[2,161],120:[2,161],121:[2,161],124:96,125:[2,161],126:[2,161],127:75,141:[2,161],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,127],6:[2,127],32:[2,127],33:[2,127],41:[2,127],53:[2,127],63:[2,127],68:[2,127],71:[2,127],80:[2,127],81:[2,127],82:[2,127],83:[2,127],85:[2,127],87:[2,127],88:[2,127],92:[2,127],94:[2,127],99:[2,127],100:[2,127],101:[2,127],106:[2,127],108:[2,127],117:[2,127],119:[2,127],120:[2,127],121:[2,127],125:[2,127],126:[2,127],141:[2,127],144:[2,127],145:[2,127],146:[2,127],147:[2,127],148:[2,127],149:[2,127],150:[2,127],151:[2,127],152:[2,127],153:[2,127],154:[2,127],155:[2,127]},{1:[2,61],6:[2,61],33:[2,61],41:[2,61],117:[2,61],118:95,119:[2,61],121:[2,61],124:96,125:[2,61],127:75,141:[2,61],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,13],6:[2,13],33:[2,13],41:[2,13],117:[2,13],119:[2,13],121:[2,13],125:[2,13],141:[2,13]},{1:[2,14],6:[2,14],33:[2,14],41:[2,14],117:[2,14],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[2,14],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[1,84],117:[1,252]},{4:253,5:3,7:4,8:5,9:6,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,25],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,149],32:[2,149],68:[2,149],71:[1,255],106:[2,149],107:254,108:[1,217],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,135],6:[2,135],32:[2,135],33:[2,135],41:[2,135],53:[2,135],63:[2,135],68:[2,135],71:[2,135],80:[2,135],81:[2,135],82:[2,135],83:[2,135],85:[2,135],87:[2,135],88:[2,135],92:[2,135],99:[2,135],100:[2,135],101:[2,135],106:[2,135],108:[2,135],117:[2,135],119:[2,135],120:[2,135],121:[2,135],125:[2,135],126:[2,135],132:[2,135],133:[2,135],141:[2,135],144:[2,135],145:[2,135],148:[2,135],149:[2,135],150:[2,135],151:[2,135],152:[2,135],153:[2,135],154:[2,135]},{6:[2,70],32:[2,70],67:256,68:[1,257],106:[2,70]},{6:[2,144],32:[2,144],33:[2,144],68:[2,144],101:[2,144],106:[2,144]},{7:228,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,165],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],102:258,103:[1,64],104:[1,65],105:[1,63],109:164,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,150],32:[2,150],33:[2,150],68:[2,150],101:[2,150],106:[2,150]},{6:[2,151],32:[2,151],33:[2,151],68:[2,151],101:[2,151],106:[2,151]},{1:[2,134],6:[2,134],32:[2,134],33:[2,134],41:[2,134],53:[2,134],56:[2,134],63:[2,134],68:[2,134],71:[2,134],80:[2,134],81:[2,134],82:[2,134],83:[2,134],85:[2,134],87:[2,134],88:[2,134],92:[2,134],94:[2,134],99:[2,134],100:[2,134],101:[2,134],106:[2,134],108:[2,134],117:[2,134],119:[2,134],120:[2,134],121:[2,134],125:[2,134],126:[2,134],132:[2,134],133:[2,134],141:[2,134],144:[2,134],145:[2,134],146:[2,134],147:[2,134],148:[2,134],149:[2,134],150:[2,134],151:[2,134],152:[2,134],153:[2,134],154:[2,134],155:[2,134]},{15:259,32:[1,131],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,164],6:[2,164],32:[2,164],33:[2,164],41:[2,164],63:[2,164],68:[2,164],71:[2,164],87:[2,164],92:[2,164],101:[2,164],106:[2,164],108:[2,164],117:[2,164],118:95,119:[1,71],120:[1,260],121:[1,72],124:96,125:[1,74],126:[2,164],127:75,141:[2,164],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,166],6:[2,166],32:[2,166],33:[2,166],41:[2,166],63:[2,166],68:[2,166],71:[2,166],87:[2,166],92:[2,166],101:[2,166],106:[2,166],108:[2,166],117:[2,166],118:95,119:[1,71],120:[1,261],121:[1,72],124:96,125:[1,74],126:[2,166],127:75,141:[2,166],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,172],6:[2,172],32:[2,172],33:[2,172],41:[2,172],63:[2,172],68:[2,172],71:[2,172],87:[2,172],92:[2,172],101:[2,172],106:[2,172],108:[2,172],117:[2,172],119:[2,172],120:[2,172],121:[2,172],125:[2,172],126:[2,172],141:[2,172],144:[2,172],145:[2,172],148:[2,172],149:[2,172],150:[2,172],151:[2,172],152:[2,172],153:[2,172],154:[2,172]},{1:[2,173],6:[2,173],32:[2,173],33:[2,173],41:[2,173],63:[2,173],68:[2,173],71:[2,173],87:[2,173],92:[2,173],101:[2,173],106:[2,173],108:[2,173],117:[2,173],118:95,119:[1,71],120:[2,173],121:[1,72],124:96,125:[1,74],126:[2,173],127:75,141:[2,173],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,177],6:[2,177],32:[2,177],33:[2,177],41:[2,177],63:[2,177],68:[2,177],71:[2,177],87:[2,177],92:[2,177],101:[2,177],106:[2,177],108:[2,177],117:[2,177],119:[2,177],120:[2,177],121:[2,177],125:[2,177],126:[1,262],141:[2,177],144:[2,177],145:[2,177],148:[2,177],149:[2,177],150:[2,177],151:[2,177],152:[2,177],153:[2,177],154:[2,177]},{132:[2,180],133:[2,180]},{34:178,35:[1,81],58:179,72:180,73:181,90:[1,76],104:[1,128],105:[1,129],129:263,131:177},{68:[1,264],132:[2,186],133:[2,186]},{68:[2,182],132:[2,182],133:[2,182]},{68:[2,183],132:[2,183],133:[2,183]},{68:[2,184],132:[2,184],133:[2,184]},{68:[2,185],132:[2,185],133:[2,185]},{1:[2,179],6:[2,179],32:[2,179],33:[2,179],41:[2,179],63:[2,179],68:[2,179],71:[2,179],87:[2,179],92:[2,179],101:[2,179],106:[2,179],108:[2,179],117:[2,179],119:[2,179],120:[2,179],121:[2,179],125:[2,179],126:[2,179],141:[2,179],144:[2,179],145:[2,179],148:[2,179],149:[2,179],150:[2,179],151:[2,179],152:[2,179],153:[2,179],154:[2,179]},{7:265,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:266,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,70],32:[2,70],67:267,68:[1,268],92:[2,70]},{6:[2,111],32:[2,111],33:[2,111],68:[2,111],92:[2,111]},{6:[2,51],32:[2,51],33:[2,51],56:[1,269],68:[2,51],92:[2,51]},{6:[2,59],32:[2,59],33:[2,59],53:[1,270],56:[2,59],68:[2,59],92:[2,59]},{6:[2,56],32:[2,56],33:[2,56],68:[2,56],92:[2,56]},{6:[2,60],32:[2,60],33:[2,60],56:[2,60],68:[2,60],92:[2,60]},{6:[2,57],32:[2,57],33:[2,57],53:[2,57],56:[2,57],68:[2,57],92:[2,57]},{6:[2,58],32:[2,58],33:[2,58],53:[2,58],56:[2,58],68:[2,58],92:[2,58]},{45:[1,271],76:111,80:[1,103],81:[1,104],82:[1,105],83:[1,106],84:107,85:[1,108],88:[1,109],95:110,99:[1,102],100:[2,128]},{80:[2,90],81:[2,90],82:[2,90],83:[2,90],85:[2,90],88:[2,90],99:[2,90],100:[2,90]},{6:[1,84],41:[1,272]},{1:[2,4],6:[2,4],33:[2,4],41:[2,4],117:[2,4]},{1:[2,218],6:[2,218],32:[2,218],33:[2,218],41:[2,218],63:[2,218],68:[2,218],71:[2,218],87:[2,218],92:[2,218],101:[2,218],106:[2,218],108:[2,218],117:[2,218],118:95,119:[2,218],120:[2,218],121:[2,218],124:96,125:[2,218],126:[2,218],127:75,141:[2,218],144:[2,218],145:[2,218],148:[1,85],149:[1,88],150:[1,89],151:[2,218],152:[2,218],153:[2,218],154:[2,218]},{1:[2,219],6:[2,219],32:[2,219],33:[2,219],41:[2,219],63:[2,219],68:[2,219],71:[2,219],87:[2,219],92:[2,219],101:[2,219],106:[2,219],108:[2,219],117:[2,219],118:95,119:[2,219],120:[2,219],121:[2,219],124:96,125:[2,219],126:[2,219],127:75,141:[2,219],144:[2,219],145:[2,219],148:[1,85],149:[1,88],150:[1,89],151:[2,219],152:[2,219],153:[2,219],154:[2,219]},{1:[2,220],6:[2,220],32:[2,220],33:[2,220],41:[2,220],63:[2,220],68:[2,220],71:[2,220],87:[2,220],92:[2,220],101:[2,220],106:[2,220],108:[2,220],117:[2,220],118:95,119:[2,220],120:[2,220],121:[2,220],124:96,125:[2,220],126:[2,220],127:75,141:[2,220],144:[2,220],145:[2,220],148:[1,85],149:[2,220],150:[1,89],151:[2,220],152:[2,220],153:[2,220],154:[2,220]},{1:[2,221],6:[2,221],32:[2,221],33:[2,221],41:[2,221],63:[2,221],68:[2,221],71:[2,221],87:[2,221],92:[2,221],101:[2,221],106:[2,221],108:[2,221],117:[2,221],118:95,119:[2,221],120:[2,221],121:[2,221],124:96,125:[2,221],126:[2,221],127:75,141:[2,221],144:[2,221],145:[2,221],148:[1,85],149:[2,221],150:[1,89],151:[2,221],152:[2,221],153:[2,221],154:[2,221]},{1:[2,222],6:[2,222],32:[2,222],33:[2,222],41:[2,222],63:[2,222],68:[2,222],71:[2,222],87:[2,222],92:[2,222],101:[2,222],106:[2,222],108:[2,222],117:[2,222],118:95,119:[2,222],120:[2,222],121:[2,222],124:96,125:[2,222],126:[2,222],127:75,141:[2,222],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[2,222],152:[2,222],153:[2,222],154:[2,222]},{1:[2,223],6:[2,223],32:[2,223],33:[2,223],41:[2,223],63:[2,223],68:[2,223],71:[2,223],87:[2,223],92:[2,223],101:[2,223],106:[2,223],108:[2,223],117:[2,223],118:95,119:[2,223],120:[2,223],121:[2,223],124:96,125:[2,223],126:[2,223],127:75,141:[2,223],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[2,223],153:[2,223],154:[1,93]},{1:[2,224],6:[2,224],32:[2,224],33:[2,224],41:[2,224],63:[2,224],68:[2,224],71:[2,224],87:[2,224],92:[2,224],101:[2,224],106:[2,224],108:[2,224],117:[2,224],118:95,119:[2,224],120:[2,224],121:[2,224],124:96,125:[2,224],126:[2,224],127:75,141:[2,224],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[2,224],154:[1,93]},{1:[2,225],6:[2,225],32:[2,225],33:[2,225],41:[2,225],63:[2,225],68:[2,225],71:[2,225],87:[2,225],92:[2,225],101:[2,225],106:[2,225],108:[2,225],117:[2,225],118:95,119:[2,225],120:[2,225],121:[2,225],124:96,125:[2,225],126:[2,225],127:75,141:[2,225],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[2,225],153:[2,225],154:[2,225]},{1:[2,208],6:[2,208],32:[2,208],33:[2,208],41:[2,208],63:[2,208],68:[2,208],71:[2,208],87:[2,208],92:[2,208],101:[2,208],106:[2,208],108:[2,208],117:[2,208],118:95,119:[1,71],120:[2,208],121:[1,72],124:96,125:[1,74],126:[2,208],127:75,141:[2,208],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,207],6:[2,207],32:[2,207],33:[2,207],41:[2,207],63:[2,207],68:[2,207],71:[2,207],87:[2,207],92:[2,207],101:[2,207],106:[2,207],108:[2,207],117:[2,207],118:95,119:[1,71],120:[2,207],121:[1,72],124:96,125:[1,74],126:[2,207],127:75,141:[2,207],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,123],6:[2,123],32:[2,123],33:[2,123],41:[2,123],45:[2,123],63:[2,123],68:[2,123],71:[2,123],80:[2,123],81:[2,123],82:[2,123],83:[2,123],85:[2,123],87:[2,123],88:[2,123],92:[2,123],99:[2,123],100:[2,123],101:[2,123],106:[2,123],108:[2,123],117:[2,123],119:[2,123],120:[2,123],121:[2,123],125:[2,123],126:[2,123],141:[2,123],144:[2,123],145:[2,123],148:[2,123],149:[2,123],150:[2,123],151:[2,123],152:[2,123],153:[2,123],154:[2,123]},{1:[2,98],6:[2,98],32:[2,98],33:[2,98],41:[2,98],53:[2,98],63:[2,98],68:[2,98],71:[2,98],80:[2,98],81:[2,98],82:[2,98],83:[2,98],85:[2,98],87:[2,98],88:[2,98],92:[2,98],94:[2,98],99:[2,98],100:[2,98],101:[2,98],106:[2,98],108:[2,98],117:[2,98],119:[2,98],120:[2,98],121:[2,98],125:[2,98],126:[2,98],141:[2,98],144:[2,98],145:[2,98],146:[2,98],147:[2,98],148:[2,98],149:[2,98],150:[2,98],151:[2,98],152:[2,98],153:[2,98],154:[2,98],155:[2,98]},{1:[2,99],6:[2,99],32:[2,99],33:[2,99],41:[2,99],53:[2,99],63:[2,99],68:[2,99],71:[2,99],80:[2,99],81:[2,99],82:[2,99],83:[2,99],85:[2,99],87:[2,99],88:[2,99],92:[2,99],94:[2,99],99:[2,99],100:[2,99],101:[2,99],106:[2,99],108:[2,99],117:[2,99],119:[2,99],120:[2,99],121:[2,99],125:[2,99],126:[2,99],141:[2,99],144:[2,99],145:[2,99],146:[2,99],147:[2,99],148:[2,99],149:[2,99],150:[2,99],151:[2,99],152:[2,99],153:[2,99],154:[2,99],155:[2,99]},{1:[2,100],6:[2,100],32:[2,100],33:[2,100],41:[2,100],53:[2,100],63:[2,100],68:[2,100],71:[2,100],80:[2,100],81:[2,100],82:[2,100],83:[2,100],85:[2,100],87:[2,100],88:[2,100],92:[2,100],94:[2,100],99:[2,100],100:[2,100],101:[2,100],106:[2,100],108:[2,100],117:[2,100],119:[2,100],120:[2,100],121:[2,100],125:[2,100],126:[2,100],141:[2,100],144:[2,100],145:[2,100],146:[2,100],147:[2,100],148:[2,100],149:[2,100],150:[2,100],151:[2,100],152:[2,100],153:[2,100],154:[2,100],155:[2,100]},{1:[2,101],6:[2,101],32:[2,101],33:[2,101],41:[2,101],53:[2,101],63:[2,101],68:[2,101],71:[2,101],80:[2,101],81:[2,101],82:[2,101],83:[2,101],85:[2,101],87:[2,101],88:[2,101],92:[2,101],94:[2,101],99:[2,101],100:[2,101],101:[2,101],106:[2,101],108:[2,101],117:[2,101],119:[2,101],120:[2,101],121:[2,101],125:[2,101],126:[2,101],141:[2,101],144:[2,101],145:[2,101],146:[2,101],147:[2,101],148:[2,101],149:[2,101],150:[2,101],151:[2,101],152:[2,101],153:[2,101],154:[2,101],155:[2,101]},{1:[2,102],6:[2,102],32:[2,102],33:[2,102],41:[2,102],53:[2,102],63:[2,102],68:[2,102],71:[2,102],80:[2,102],81:[2,102],82:[2,102],83:[2,102],85:[2,102],87:[2,102],88:[2,102],92:[2,102],94:[2,102],99:[2,102],100:[2,102],101:[2,102],106:[2,102],108:[2,102],117:[2,102],119:[2,102],120:[2,102],121:[2,102],125:[2,102],126:[2,102],141:[2,102],144:[2,102],145:[2,102],146:[2,102],147:[2,102],148:[2,102],149:[2,102],150:[2,102],151:[2,102],152:[2,102],153:[2,102],154:[2,102],155:[2,102]},{87:[1,273]},{71:[1,218],87:[2,107],107:274,108:[1,217],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{87:[2,108]},{7:275,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,87:[2,143],90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{12:[2,137],14:[2,137],30:[2,137],35:[2,137],37:[2,137],39:[2,137],40:[2,137],43:[2,137],44:[2,137],47:[2,137],48:[2,137],49:[2,137],50:[2,137],51:[2,137],59:[2,137],60:[2,137],61:[2,137],65:[2,137],66:[2,137],87:[2,137],90:[2,137],93:[2,137],97:[2,137],98:[2,137],103:[2,137],104:[2,137],105:[2,137],111:[2,137],115:[2,137],116:[2,137],119:[2,137],121:[2,137],123:[2,137],125:[2,137],134:[2,137],140:[2,137],142:[2,137],143:[2,137],144:[2,137],145:[2,137],146:[2,137],147:[2,137]},{12:[2,138],14:[2,138],30:[2,138],35:[2,138],37:[2,138],39:[2,138],40:[2,138],43:[2,138],44:[2,138],47:[2,138],48:[2,138],49:[2,138],50:[2,138],51:[2,138],59:[2,138],60:[2,138],61:[2,138],65:[2,138],66:[2,138],87:[2,138],90:[2,138],93:[2,138],97:[2,138],98:[2,138],103:[2,138],104:[2,138],105:[2,138],111:[2,138],115:[2,138],116:[2,138],119:[2,138],121:[2,138],123:[2,138],125:[2,138],134:[2,138],140:[2,138],142:[2,138],143:[2,138],144:[2,138],145:[2,138],146:[2,138],147:[2,138]},{1:[2,106],6:[2,106],32:[2,106],33:[2,106],41:[2,106],53:[2,106],63:[2,106],68:[2,106],71:[2,106],80:[2,106],81:[2,106],82:[2,106],83:[2,106],85:[2,106],87:[2,106],88:[2,106],92:[2,106],94:[2,106],99:[2,106],100:[2,106],101:[2,106],106:[2,106],108:[2,106],117:[2,106],119:[2,106],120:[2,106],121:[2,106],125:[2,106],126:[2,106],141:[2,106],144:[2,106],145:[2,106],146:[2,106],147:[2,106],148:[2,106],149:[2,106],150:[2,106],151:[2,106],152:[2,106],153:[2,106],154:[2,106],155:[2,106]},{1:[2,124],6:[2,124],32:[2,124],33:[2,124],41:[2,124],45:[2,124],63:[2,124],68:[2,124],71:[2,124],80:[2,124],81:[2,124],82:[2,124],83:[2,124],85:[2,124],87:[2,124],88:[2,124],92:[2,124],99:[2,124],100:[2,124],101:[2,124],106:[2,124],108:[2,124],117:[2,124],119:[2,124],120:[2,124],121:[2,124],125:[2,124],126:[2,124],141:[2,124],144:[2,124],145:[2,124],148:[2,124],149:[2,124],150:[2,124],151:[2,124],152:[2,124],153:[2,124],154:[2,124]},{1:[2,63],6:[2,63],33:[2,63],41:[2,63],117:[2,63],118:95,119:[2,61],121:[2,61],124:96,125:[2,61],127:75,141:[2,61],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,31],6:[2,31],32:[2,31],33:[2,31],41:[2,31],63:[2,31],68:[2,31],71:[2,31],87:[2,31],92:[2,31],101:[2,31],106:[2,31],108:[2,31],117:[2,31],118:95,119:[2,31],120:[2,31],121:[2,31],124:96,125:[2,31],126:[2,31],127:75,141:[2,31],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,48],6:[2,48],32:[2,48],33:[2,48],41:[2,48],63:[2,48],68:[2,48],71:[2,48],87:[2,48],92:[2,48],101:[2,48],106:[2,48],108:[2,48],117:[2,48],118:95,119:[2,48],120:[2,48],121:[2,48],124:96,125:[2,48],126:[2,48],127:75,141:[2,48],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{7:276,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:277,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,130],6:[2,130],32:[2,130],33:[2,130],41:[2,130],45:[2,130],53:[2,130],63:[2,130],68:[2,130],71:[2,130],80:[2,130],81:[2,130],82:[2,130],83:[2,130],85:[2,130],87:[2,130],88:[2,130],92:[2,130],94:[2,130],99:[2,130],100:[2,130],101:[2,130],106:[2,130],108:[2,130],117:[2,130],119:[2,130],120:[2,130],121:[2,130],125:[2,130],126:[2,130],141:[2,130],144:[2,130],145:[2,130],146:[2,130],147:[2,130],148:[2,130],149:[2,130],150:[2,130],151:[2,130],152:[2,130],153:[2,130],154:[2,130],155:[2,130]},{6:[2,70],32:[2,70],67:278,68:[1,257],101:[2,70]},{6:[2,149],32:[2,149],33:[2,149],68:[2,149],71:[1,279],101:[2,149],106:[2,149],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{64:280,65:[1,66],66:[1,67]},{6:[2,71],32:[2,71],33:[2,71],34:124,35:[1,81],58:125,69:281,70:122,71:[1,123],72:126,73:127,90:[1,76],104:[1,128],105:[1,129]},{6:[1,282],32:[1,283]},{6:[2,78],32:[2,78],33:[2,78],63:[2,78],68:[2,78]},{7:284,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,32],6:[2,32],32:[2,32],33:[2,32],41:[2,32],63:[2,32],68:[2,32],71:[2,32],87:[2,32],92:[2,32],101:[2,32],106:[2,32],108:[2,32],113:[2,32],114:[2,32],117:[2,32],119:[2,32],120:[2,32],121:[2,32],125:[2,32],126:[2,32],136:[2,32],138:[2,32],141:[2,32],144:[2,32],145:[2,32],148:[2,32],149:[2,32],150:[2,32],151:[2,32],152:[2,32],153:[2,32],154:[2,32]},{6:[1,84],33:[1,285]},{1:[2,226],6:[2,226],32:[2,226],33:[2,226],41:[2,226],63:[2,226],68:[2,226],71:[2,226],87:[2,226],92:[2,226],101:[2,226],106:[2,226],108:[2,226],117:[2,226],118:95,119:[2,226],120:[2,226],121:[2,226],124:96,125:[2,226],126:[2,226],127:75,141:[2,226],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{7:286,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:287,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,229],6:[2,229],32:[2,229],33:[2,229],41:[2,229],63:[2,229],68:[2,229],71:[2,229],87:[2,229],92:[2,229],101:[2,229],106:[2,229],108:[2,229],117:[2,229],118:95,119:[2,229],120:[2,229],121:[2,229],124:96,125:[2,229],126:[2,229],127:75,141:[2,229],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,206],6:[2,206],32:[2,206],33:[2,206],41:[2,206],63:[2,206],68:[2,206],71:[2,206],87:[2,206],92:[2,206],101:[2,206],106:[2,206],108:[2,206],117:[2,206],119:[2,206],120:[2,206],121:[2,206],125:[2,206],126:[2,206],141:[2,206],144:[2,206],145:[2,206],148:[2,206],149:[2,206],150:[2,206],151:[2,206],152:[2,206],153:[2,206],154:[2,206]},{7:288,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,155],6:[2,155],32:[2,155],33:[2,155],41:[2,155],63:[2,155],68:[2,155],71:[2,155],87:[2,155],92:[2,155],101:[2,155],106:[2,155],108:[2,155],113:[1,289],117:[2,155],119:[2,155],120:[2,155],121:[2,155],125:[2,155],126:[2,155],141:[2,155],144:[2,155],145:[2,155],148:[2,155],149:[2,155],150:[2,155],151:[2,155],152:[2,155],153:[2,155],154:[2,155]},{15:290,32:[1,131]},{15:293,32:[1,131],34:291,35:[1,81],73:292,90:[1,76]},{135:294,137:247,138:[1,248]},{33:[1,295],136:[1,296],137:297,138:[1,248]},{33:[2,199],136:[2,199],138:[2,199]},{7:299,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],110:298,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,117],6:[2,117],15:300,32:[1,131],33:[2,117],41:[2,117],63:[2,117],68:[2,117],71:[2,117],87:[2,117],92:[2,117],101:[2,117],106:[2,117],108:[2,117],117:[2,117],118:95,119:[1,71],120:[2,117],121:[1,72],124:96,125:[1,74],126:[2,117],127:75,141:[2,117],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,120],6:[2,120],32:[2,120],33:[2,120],41:[2,120],63:[2,120],68:[2,120],71:[2,120],87:[2,120],92:[2,120],101:[2,120],106:[2,120],108:[2,120],117:[2,120],119:[2,120],120:[2,120],121:[2,120],125:[2,120],126:[2,120],141:[2,120],144:[2,120],145:[2,120],148:[2,120],149:[2,120],150:[2,120],151:[2,120],152:[2,120],153:[2,120],154:[2,120]},{7:301,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,162],6:[2,162],32:[2,162],33:[2,162],41:[2,162],63:[2,162],68:[2,162],71:[2,162],80:[2,162],81:[2,162],82:[2,162],83:[2,162],85:[2,162],87:[2,162],88:[2,162],92:[2,162],99:[2,162],100:[2,162],101:[2,162],106:[2,162],108:[2,162],117:[2,162],119:[2,162],120:[2,162],121:[2,162],125:[2,162],126:[2,162],141:[2,162],144:[2,162],145:[2,162],148:[2,162],149:[2,162],150:[2,162],151:[2,162],152:[2,162],153:[2,162],154:[2,162]},{6:[1,84],33:[1,302]},{7:303,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,85],12:[2,138],14:[2,138],30:[2,138],32:[2,85],35:[2,138],37:[2,138],39:[2,138],40:[2,138],43:[2,138],44:[2,138],47:[2,138],48:[2,138],49:[2,138],50:[2,138],51:[2,138],59:[2,138],60:[2,138],61:[2,138],65:[2,138],66:[2,138],68:[2,85],90:[2,138],93:[2,138],97:[2,138],98:[2,138],103:[2,138],104:[2,138],105:[2,138],106:[2,85],111:[2,138],115:[2,138],116:[2,138],119:[2,138],121:[2,138],123:[2,138],125:[2,138],134:[2,138],140:[2,138],142:[2,138],143:[2,138],144:[2,138],145:[2,138],146:[2,138],147:[2,138]},{6:[1,305],32:[1,306],106:[1,304]},{6:[2,71],7:228,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[2,71],33:[2,71],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],101:[2,71],103:[1,64],104:[1,65],105:[1,63],106:[2,71],109:307,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,70],32:[2,70],33:[2,70],67:308,68:[1,257]},{1:[2,203],6:[2,203],32:[2,203],33:[2,203],41:[2,203],63:[2,203],68:[2,203],71:[2,203],87:[2,203],92:[2,203],101:[2,203],106:[2,203],108:[2,203],117:[2,203],119:[2,203],120:[2,203],121:[2,203],125:[2,203],126:[2,203],136:[2,203],141:[2,203],144:[2,203],145:[2,203],148:[2,203],149:[2,203],150:[2,203],151:[2,203],152:[2,203],153:[2,203],154:[2,203]},{7:309,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:310,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:311,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{132:[2,181],133:[2,181]},{34:178,35:[1,81],58:179,72:180,73:181,90:[1,76],104:[1,128],105:[1,129],131:312},{1:[2,188],6:[2,188],32:[2,188],33:[2,188],41:[2,188],63:[2,188],68:[2,188],71:[2,188],87:[2,188],92:[2,188],101:[2,188],106:[2,188],108:[2,188],117:[2,188],118:95,119:[2,188],120:[1,313],121:[2,188],124:96,125:[2,188],126:[1,314],127:75,141:[2,188],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,189],6:[2,189],32:[2,189],33:[2,189],41:[2,189],63:[2,189],68:[2,189],71:[2,189],87:[2,189],92:[2,189],101:[2,189],106:[2,189],108:[2,189],117:[2,189],118:95,119:[2,189],120:[1,315],121:[2,189],124:96,125:[2,189],126:[2,189],127:75,141:[2,189],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[1,317],32:[1,318],92:[1,316]},{6:[2,71],11:189,32:[2,71],33:[2,71],34:191,35:[1,81],36:190,37:[1,77],38:78,39:[1,82],40:[1,83],54:319,55:187,57:188,58:192,60:[1,51],92:[2,71],104:[1,128]},{7:320,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,321],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:322,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,323],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,40],6:[2,40],32:[2,40],33:[2,40],41:[2,40],63:[2,40],68:[2,40],71:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],85:[2,40],87:[2,40],88:[2,40],92:[2,40],99:[2,40],100:[2,40],101:[2,40],106:[2,40],108:[2,40],117:[2,40],119:[2,40],120:[2,40],121:[2,40],125:[2,40],126:[2,40],141:[2,40],144:[2,40],145:[2,40],148:[2,40],149:[2,40],150:[2,40],151:[2,40],152:[2,40],153:[2,40],154:[2,40]},{1:[2,38],6:[2,38],32:[2,38],33:[2,38],41:[2,38],56:[2,38],63:[2,38],68:[2,38],71:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],85:[2,38],87:[2,38],88:[2,38],92:[2,38],99:[2,38],100:[2,38],101:[2,38],106:[2,38],108:[2,38],117:[2,38],119:[2,38],120:[2,38],121:[2,38],125:[2,38],126:[2,38],141:[2,38],144:[2,38],145:[2,38],148:[2,38],149:[2,38],150:[2,38],151:[2,38],152:[2,38],153:[2,38],154:[2,38]},{1:[2,105],6:[2,105],32:[2,105],33:[2,105],41:[2,105],53:[2,105],63:[2,105],68:[2,105],71:[2,105],80:[2,105],81:[2,105],82:[2,105],83:[2,105],85:[2,105],87:[2,105],88:[2,105],92:[2,105],94:[2,105],99:[2,105],100:[2,105],101:[2,105],106:[2,105],108:[2,105],117:[2,105],119:[2,105],120:[2,105],121:[2,105],125:[2,105],126:[2,105],141:[2,105],144:[2,105],145:[2,105],146:[2,105],147:[2,105],148:[2,105],149:[2,105],150:[2,105],151:[2,105],152:[2,105],153:[2,105],154:[2,105],155:[2,105]},{7:324,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,87:[2,141],90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{87:[2,142],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,49],6:[2,49],32:[2,49],33:[2,49],41:[2,49],63:[2,49],68:[2,49],71:[2,49],87:[2,49],92:[2,49],101:[2,49],106:[2,49],108:[2,49],117:[2,49],118:95,119:[2,49],120:[2,49],121:[2,49],124:96,125:[2,49],126:[2,49],127:75,141:[2,49],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{33:[1,325],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[1,305],32:[1,306],101:[1,326]},{6:[2,85],32:[2,85],33:[2,85],68:[2,85],101:[2,85],106:[2,85]},{15:327,32:[1,131]},{6:[2,74],32:[2,74],33:[2,74],63:[2,74],68:[2,74]},{34:124,35:[1,81],58:125,69:328,70:122,71:[1,123],72:126,73:127,90:[1,76],104:[1,128],105:[1,129]},{6:[2,72],32:[2,72],33:[2,72],34:124,35:[1,81],58:125,62:329,68:[2,72],69:121,70:122,71:[1,123],72:126,73:127,90:[1,76],104:[1,128],105:[1,129]},{6:[2,79],32:[2,79],33:[2,79],63:[2,79],68:[2,79],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,33],6:[2,33],32:[2,33],33:[2,33],41:[2,33],63:[2,33],68:[2,33],71:[2,33],87:[2,33],92:[2,33],101:[2,33],106:[2,33],108:[2,33],113:[2,33],114:[2,33],117:[2,33],119:[2,33],120:[2,33],121:[2,33],125:[2,33],126:[2,33],136:[2,33],138:[2,33],141:[2,33],144:[2,33],145:[2,33],148:[2,33],149:[2,33],150:[2,33],151:[2,33],152:[2,33],153:[2,33],154:[2,33]},{33:[1,330],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,228],6:[2,228],32:[2,228],33:[2,228],41:[2,228],63:[2,228],68:[2,228],71:[2,228],87:[2,228],92:[2,228],101:[2,228],106:[2,228],108:[2,228],117:[2,228],118:95,119:[2,228],120:[2,228],121:[2,228],124:96,125:[2,228],126:[2,228],127:75,141:[2,228],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{15:331,32:[1,131],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{15:332,32:[1,131]},{1:[2,156],6:[2,156],32:[2,156],33:[2,156],41:[2,156],63:[2,156],68:[2,156],71:[2,156],87:[2,156],92:[2,156],101:[2,156],106:[2,156],108:[2,156],117:[2,156],119:[2,156],120:[2,156],121:[2,156],125:[2,156],126:[2,156],141:[2,156],144:[2,156],145:[2,156],148:[2,156],149:[2,156],150:[2,156],151:[2,156],152:[2,156],153:[2,156],154:[2,156]},{15:333,32:[1,131]},{15:334,32:[1,131]},{1:[2,160],6:[2,160],32:[2,160],33:[2,160],41:[2,160],63:[2,160],68:[2,160],71:[2,160],87:[2,160],92:[2,160],101:[2,160],106:[2,160],108:[2,160],113:[2,160],117:[2,160],119:[2,160],120:[2,160],121:[2,160],125:[2,160],126:[2,160],141:[2,160],144:[2,160],145:[2,160],148:[2,160],149:[2,160],150:[2,160],151:[2,160],152:[2,160],153:[2,160],154:[2,160]},{33:[1,335],136:[1,336],137:297,138:[1,248]},{1:[2,197],6:[2,197],32:[2,197],33:[2,197],41:[2,197],63:[2,197],68:[2,197],71:[2,197],87:[2,197],92:[2,197],101:[2,197],106:[2,197],108:[2,197],117:[2,197],119:[2,197],120:[2,197],121:[2,197],125:[2,197],126:[2,197],141:[2,197],144:[2,197],145:[2,197],148:[2,197],149:[2,197],150:[2,197],151:[2,197],152:[2,197],153:[2,197],154:[2,197]},{15:337,32:[1,131]},{33:[2,200],136:[2,200],138:[2,200]},{15:338,32:[1,131],68:[1,339]},{32:[2,152],68:[2,152],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,118],6:[2,118],32:[2,118],33:[2,118],41:[2,118],63:[2,118],68:[2,118],71:[2,118],87:[2,118],92:[2,118],101:[2,118],106:[2,118],108:[2,118],117:[2,118],119:[2,118],120:[2,118],121:[2,118],125:[2,118],126:[2,118],141:[2,118],144:[2,118],145:[2,118],148:[2,118],149:[2,118],150:[2,118],151:[2,118],152:[2,118],153:[2,118],154:[2,118]},{1:[2,121],6:[2,121],15:340,32:[1,131],33:[2,121],41:[2,121],63:[2,121],68:[2,121],71:[2,121],87:[2,121],92:[2,121],101:[2,121],106:[2,121],108:[2,121],117:[2,121],118:95,119:[1,71],120:[2,121],121:[1,72],124:96,125:[1,74],126:[2,121],127:75,141:[2,121],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{117:[1,341]},{106:[1,342],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,136],6:[2,136],32:[2,136],33:[2,136],41:[2,136],53:[2,136],63:[2,136],68:[2,136],71:[2,136],80:[2,136],81:[2,136],82:[2,136],83:[2,136],85:[2,136],87:[2,136],88:[2,136],92:[2,136],99:[2,136],100:[2,136],101:[2,136],106:[2,136],108:[2,136],117:[2,136],119:[2,136],120:[2,136],121:[2,136],125:[2,136],126:[2,136],132:[2,136],133:[2,136],141:[2,136],144:[2,136],145:[2,136],148:[2,136],149:[2,136],150:[2,136],151:[2,136],152:[2,136],153:[2,136],154:[2,136]},{7:228,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],109:343,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:228,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],32:[1,165],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],71:[1,167],72:53,73:54,74:166,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],102:344,103:[1,64],104:[1,65],105:[1,63],109:164,111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,145],32:[2,145],33:[2,145],68:[2,145],101:[2,145],106:[2,145]},{6:[1,305],32:[1,306],33:[1,345]},{1:[2,165],6:[2,165],32:[2,165],33:[2,165],41:[2,165],63:[2,165],68:[2,165],71:[2,165],87:[2,165],92:[2,165],101:[2,165],106:[2,165],108:[2,165],117:[2,165],118:95,119:[1,71],120:[2,165],121:[1,72],124:96,125:[1,74],126:[2,165],127:75,141:[2,165],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,167],6:[2,167],32:[2,167],33:[2,167],41:[2,167],63:[2,167],68:[2,167],71:[2,167],87:[2,167],92:[2,167],101:[2,167],106:[2,167],108:[2,167],117:[2,167],118:95,119:[1,71],120:[2,167],121:[1,72],124:96,125:[1,74],126:[2,167],127:75,141:[2,167],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,178],6:[2,178],32:[2,178],33:[2,178],41:[2,178],63:[2,178],68:[2,178],71:[2,178],87:[2,178],92:[2,178],101:[2,178],106:[2,178],108:[2,178],117:[2,178],118:95,119:[1,71],120:[2,178],121:[1,72],124:96,125:[1,74],126:[2,178],127:75,141:[2,178],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{132:[2,187],133:[2,187]},{7:346,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:347,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:348,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,109],6:[2,109],32:[2,109],33:[2,109],41:[2,109],53:[2,109],63:[2,109],68:[2,109],71:[2,109],80:[2,109],81:[2,109],82:[2,109],83:[2,109],85:[2,109],87:[2,109],88:[2,109],92:[2,109],99:[2,109],100:[2,109],101:[2,109],106:[2,109],108:[2,109],117:[2,109],119:[2,109],120:[2,109],121:[2,109],125:[2,109],126:[2,109],132:[2,109],133:[2,109],141:[2,109],144:[2,109],145:[2,109],148:[2,109],149:[2,109],150:[2,109],151:[2,109],152:[2,109],153:[2,109],154:[2,109]},{11:189,34:191,35:[1,81],36:190,37:[1,77],38:78,39:[1,82],40:[1,83],54:349,55:187,57:188,58:192,60:[1,51],104:[1,128]},{6:[2,110],11:189,32:[2,110],33:[2,110],34:191,35:[1,81],36:190,37:[1,77],38:78,39:[1,82],40:[1,83],54:186,55:187,57:188,58:192,60:[1,51],68:[2,110],91:350,104:[1,128]},{6:[2,112],32:[2,112],33:[2,112],68:[2,112],92:[2,112]},{6:[2,52],32:[2,52],33:[2,52],68:[2,52],92:[2,52],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{7:351,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[2,54],32:[2,54],33:[2,54],68:[2,54],92:[2,54],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{7:352,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{87:[2,140],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,50],6:[2,50],32:[2,50],33:[2,50],41:[2,50],63:[2,50],68:[2,50],71:[2,50],87:[2,50],92:[2,50],101:[2,50],106:[2,50],108:[2,50],117:[2,50],119:[2,50],120:[2,50],121:[2,50],125:[2,50],126:[2,50],141:[2,50],144:[2,50],145:[2,50],148:[2,50],149:[2,50],150:[2,50],151:[2,50],152:[2,50],153:[2,50],154:[2,50]},{1:[2,131],6:[2,131],32:[2,131],33:[2,131],41:[2,131],45:[2,131],53:[2,131],63:[2,131],68:[2,131],71:[2,131],80:[2,131],81:[2,131],82:[2,131],83:[2,131],85:[2,131],87:[2,131],88:[2,131],92:[2,131],94:[2,131],99:[2,131],100:[2,131],101:[2,131],106:[2,131],108:[2,131],117:[2,131],119:[2,131],120:[2,131],121:[2,131],125:[2,131],126:[2,131],141:[2,131],144:[2,131],145:[2,131],146:[2,131],147:[2,131],148:[2,131],149:[2,131],150:[2,131],151:[2,131],152:[2,131],153:[2,131],154:[2,131],155:[2,131]},{1:[2,66],6:[2,66],32:[2,66],33:[2,66],41:[2,66],63:[2,66],68:[2,66],71:[2,66],87:[2,66],92:[2,66],101:[2,66],106:[2,66],108:[2,66],117:[2,66],119:[2,66],120:[2,66],121:[2,66],125:[2,66],126:[2,66],141:[2,66],144:[2,66],145:[2,66],148:[2,66],149:[2,66],150:[2,66],151:[2,66],152:[2,66],153:[2,66],154:[2,66]},{6:[2,75],32:[2,75],33:[2,75],63:[2,75],68:[2,75]},{6:[2,70],32:[2,70],33:[2,70],67:353,68:[1,230]},{1:[2,227],6:[2,227],32:[2,227],33:[2,227],41:[2,227],63:[2,227],68:[2,227],71:[2,227],87:[2,227],92:[2,227],101:[2,227],106:[2,227],108:[2,227],117:[2,227],119:[2,227],120:[2,227],121:[2,227],125:[2,227],126:[2,227],141:[2,227],144:[2,227],145:[2,227],148:[2,227],149:[2,227],150:[2,227],151:[2,227],152:[2,227],153:[2,227],154:[2,227]},{1:[2,204],6:[2,204],32:[2,204],33:[2,204],41:[2,204],63:[2,204],68:[2,204],71:[2,204],87:[2,204],92:[2,204],101:[2,204],106:[2,204],108:[2,204],117:[2,204],119:[2,204],120:[2,204],121:[2,204],125:[2,204],126:[2,204],136:[2,204],141:[2,204],144:[2,204],145:[2,204],148:[2,204],149:[2,204],150:[2,204],151:[2,204],152:[2,204],153:[2,204],154:[2,204]},{1:[2,157],6:[2,157],32:[2,157],33:[2,157],41:[2,157],63:[2,157],68:[2,157],71:[2,157],87:[2,157],92:[2,157],101:[2,157],106:[2,157],108:[2,157],117:[2,157],119:[2,157],120:[2,157],121:[2,157],125:[2,157],126:[2,157],141:[2,157],144:[2,157],145:[2,157],148:[2,157],149:[2,157],150:[2,157],151:[2,157],152:[2,157],153:[2,157],154:[2,157]},{1:[2,158],6:[2,158],32:[2,158],33:[2,158],41:[2,158],63:[2,158],68:[2,158],71:[2,158],87:[2,158],92:[2,158],101:[2,158],106:[2,158],108:[2,158],113:[2,158],117:[2,158],119:[2,158],120:[2,158],121:[2,158],125:[2,158],126:[2,158],141:[2,158],144:[2,158],145:[2,158],148:[2,158],149:[2,158],150:[2,158],151:[2,158],152:[2,158],153:[2,158],154:[2,158]},{1:[2,159],6:[2,159],32:[2,159],33:[2,159],41:[2,159],63:[2,159],68:[2,159],71:[2,159],87:[2,159],92:[2,159],101:[2,159],106:[2,159],108:[2,159],113:[2,159],117:[2,159],119:[2,159],120:[2,159],121:[2,159],125:[2,159],126:[2,159],141:[2,159],144:[2,159],145:[2,159],148:[2,159],149:[2,159],150:[2,159],151:[2,159],152:[2,159],153:[2,159],154:[2,159]},{1:[2,195],6:[2,195],32:[2,195],33:[2,195],41:[2,195],63:[2,195],68:[2,195],71:[2,195],87:[2,195],92:[2,195],101:[2,195],106:[2,195],108:[2,195],117:[2,195],119:[2,195],120:[2,195],121:[2,195],125:[2,195],126:[2,195],141:[2,195],144:[2,195],145:[2,195],148:[2,195],149:[2,195],150:[2,195],151:[2,195],152:[2,195],153:[2,195],154:[2,195]},{15:354,32:[1,131]},{33:[1,355]},{6:[1,356],33:[2,201],136:[2,201],138:[2,201]},{7:357,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{1:[2,122],6:[2,122],32:[2,122],33:[2,122],41:[2,122],63:[2,122],68:[2,122],71:[2,122],87:[2,122],92:[2,122],101:[2,122],106:[2,122],108:[2,122],117:[2,122],119:[2,122],120:[2,122],121:[2,122],125:[2,122],126:[2,122],141:[2,122],144:[2,122],145:[2,122],148:[2,122],149:[2,122],150:[2,122],151:[2,122],152:[2,122],153:[2,122],154:[2,122]},{1:[2,163],6:[2,163],32:[2,163],33:[2,163],41:[2,163],63:[2,163],68:[2,163],71:[2,163],80:[2,163],81:[2,163],82:[2,163],83:[2,163],85:[2,163],87:[2,163],88:[2,163],92:[2,163],99:[2,163],100:[2,163],101:[2,163],106:[2,163],108:[2,163],117:[2,163],119:[2,163],120:[2,163],121:[2,163],125:[2,163],126:[2,163],141:[2,163],144:[2,163],145:[2,163],148:[2,163],149:[2,163],150:[2,163],151:[2,163],152:[2,163],153:[2,163],154:[2,163]},{1:[2,139],6:[2,139],32:[2,139],33:[2,139],41:[2,139],63:[2,139],68:[2,139],71:[2,139],80:[2,139],81:[2,139],82:[2,139],83:[2,139],85:[2,139],87:[2,139],88:[2,139],92:[2,139],99:[2,139],100:[2,139],101:[2,139],106:[2,139],108:[2,139],117:[2,139],119:[2,139],120:[2,139],121:[2,139],125:[2,139],126:[2,139],141:[2,139],144:[2,139],145:[2,139],148:[2,139],149:[2,139],150:[2,139],151:[2,139],152:[2,139],153:[2,139],154:[2,139]},{6:[2,146],32:[2,146],33:[2,146],68:[2,146],101:[2,146],106:[2,146]},{6:[2,70],32:[2,70],33:[2,70],67:358,68:[1,257]},{6:[2,147],32:[2,147],33:[2,147],68:[2,147],101:[2,147],106:[2,147]},{1:[2,190],6:[2,190],32:[2,190],33:[2,190],41:[2,190],63:[2,190],68:[2,190],71:[2,190],87:[2,190],92:[2,190],101:[2,190],106:[2,190],108:[2,190],117:[2,190],118:95,119:[2,190],120:[2,190],121:[2,190],124:96,125:[2,190],126:[1,359],127:75,141:[2,190],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,192],6:[2,192],32:[2,192],33:[2,192],41:[2,192],63:[2,192],68:[2,192],71:[2,192],87:[2,192],92:[2,192],101:[2,192],106:[2,192],108:[2,192],117:[2,192],118:95,119:[2,192],120:[1,360],121:[2,192],124:96,125:[2,192],126:[2,192],127:75,141:[2,192],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,191],6:[2,191],32:[2,191],33:[2,191],41:[2,191],63:[2,191],68:[2,191],71:[2,191],87:[2,191],92:[2,191],101:[2,191],106:[2,191],108:[2,191],117:[2,191],118:95,119:[2,191],120:[2,191],121:[2,191],124:96,125:[2,191],126:[2,191],127:75,141:[2,191],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[2,113],32:[2,113],33:[2,113],68:[2,113],92:[2,113]},{6:[2,70],32:[2,70],33:[2,70],67:361,68:[1,268]},{33:[1,362],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{33:[1,363],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[1,282],32:[1,283],33:[1,364]},{33:[1,365]},{1:[2,198],6:[2,198],32:[2,198],33:[2,198],41:[2,198],63:[2,198],68:[2,198],71:[2,198],87:[2,198],92:[2,198],101:[2,198],106:[2,198],108:[2,198],117:[2,198],119:[2,198],120:[2,198],121:[2,198],125:[2,198],126:[2,198],141:[2,198],144:[2,198],145:[2,198],148:[2,198],149:[2,198],150:[2,198],151:[2,198],152:[2,198],153:[2,198],154:[2,198]},{33:[2,202],136:[2,202],138:[2,202]},{32:[2,153],68:[2,153],118:95,119:[1,71],121:[1,72],124:96,125:[1,74],127:75,141:[1,94],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[1,305],32:[1,306],33:[1,366]},{7:367,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{7:368,8:115,10:21,11:22,12:[1,23],13:24,14:[1,52],16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:[1,116],34:68,35:[1,81],36:55,37:[1,77],38:78,39:[1,82],40:[1,83],42:57,43:[1,79],44:[1,80],46:27,47:[1,56],48:[1,58],49:[1,59],50:[1,60],51:[1,61],52:26,58:69,59:[1,50],60:[1,51],61:[1,32],64:33,65:[1,66],66:[1,67],72:53,73:54,75:40,77:28,78:29,79:30,90:[1,76],93:[1,47],97:[1,31],98:[1,49],103:[1,64],104:[1,65],105:[1,63],111:[1,42],115:[1,48],116:[1,62],118:43,119:[1,71],121:[1,72],122:44,123:[1,73],124:45,125:[1,74],127:75,134:[1,46],139:41,140:[1,70],142:[1,34],143:[1,35],144:[1,36],145:[1,37],146:[1,38],147:[1,39]},{6:[1,317],32:[1,318],33:[1,369]},{6:[2,53],32:[2,53],33:[2,53],68:[2,53],92:[2,53]},{6:[2,55],32:[2,55],33:[2,55],68:[2,55],92:[2,55]},{6:[2,76],32:[2,76],33:[2,76],63:[2,76],68:[2,76]},{1:[2,196],6:[2,196],32:[2,196],33:[2,196],41:[2,196],63:[2,196],68:[2,196],71:[2,196],87:[2,196],92:[2,196],101:[2,196],106:[2,196],108:[2,196],117:[2,196],119:[2,196],120:[2,196],121:[2,196],125:[2,196],126:[2,196],141:[2,196],144:[2,196],145:[2,196],148:[2,196],149:[2,196],150:[2,196],151:[2,196],152:[2,196],153:[2,196],154:[2,196]},{6:[2,148],32:[2,148],33:[2,148],68:[2,148],101:[2,148],106:[2,148]},{1:[2,193],6:[2,193],32:[2,193],33:[2,193],41:[2,193],63:[2,193],68:[2,193],71:[2,193],87:[2,193],92:[2,193],101:[2,193],106:[2,193],108:[2,193],117:[2,193],118:95,119:[2,193],120:[2,193],121:[2,193],124:96,125:[2,193],126:[2,193],127:75,141:[2,193],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{1:[2,194],6:[2,194],32:[2,194],33:[2,194],41:[2,194],63:[2,194],68:[2,194],71:[2,194],87:[2,194],92:[2,194],101:[2,194],106:[2,194],108:[2,194],117:[2,194],118:95,119:[2,194],120:[2,194],121:[2,194],124:96,125:[2,194],126:[2,194],127:75,141:[2,194],144:[1,87],145:[1,86],148:[1,85],149:[1,88],150:[1,89],151:[1,90],152:[1,91],153:[1,92],154:[1,93]},{6:[2,114],32:[2,114],33:[2,114],68:[2,114],92:[2,114]}],
defaultActions: {66:[2,68],67:[2,69],102:[2,129],215:[2,108]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
  return module.exports;
})();require['./scope'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var Scope,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports.Scope = Scope = (function() {
    function Scope(parent, expressions, method, referencedVars) {
      var ref, ref1;
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.referencedVars = referencedVars;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) {
        this.utilities = {};
      }
      this.root = (ref = (ref1 = this.parent) != null ? ref1.root : void 0) != null ? ref : this;
    }

    Scope.prototype.add = function(name, type, immediate) {
      if (this.shared && !immediate) {
        return this.parent.add(name, type, immediate);
      }
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    };

    Scope.prototype.namedMethod = function() {
      var ref;
      if (((ref = this.method) != null ? ref.name : void 0) || !this.parent) {
        return this.method;
      }
      return this.parent.namedMethod();
    };

    Scope.prototype.find = function(name) {
      if (this.check(name)) {
        return true;
      }
      this.add(name, 'var');
      return false;
    };

    Scope.prototype.parameter = function(name) {
      if (this.shared && this.parent.check(name, true)) {
        return;
      }
      return this.add(name, 'param');
    };

    Scope.prototype.check = function(name) {
      var ref;
      return !!(this.type(name) || ((ref = this.parent) != null ? ref.check(name) : void 0));
    };

    Scope.prototype.temporary = function(name, index, single) {
      if (single == null) {
        single = false;
      }
      if (single) {
        return (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      } else {
        return name + (index || '');
      }
    };

    Scope.prototype.type = function(name) {
      var i, len, ref, v;
      ref = this.variables;
      for (i = 0, len = ref.length; i < len; i++) {
        v = ref[i];
        if (v.name === name) {
          return v.type;
        }
      }
      return null;
    };

    Scope.prototype.freeVariable = function(name, options) {
      var index, ref, temp;
      if (options == null) {
        options = {};
      }
      index = 0;
      while (true) {
        temp = this.temporary(name, index, options.single);
        if (!(this.check(temp) || indexOf.call(this.root.referencedVars, temp) >= 0)) {
          break;
        }
        index++;
      }
      if ((ref = options.reserve) != null ? ref : true) {
        this.add(temp, 'var', true);
      }
      return temp;
    };

    Scope.prototype.assign = function(name, value) {
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
      return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
      var v;
      return ((function() {
        var i, len, ref, results;
        ref = this.variables;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          v = ref[i];
          if (v.type === 'var') {
            results.push(v.name);
          }
        }
        return results;
      }).call(this)).sort();
    };

    Scope.prototype.assignedVariables = function() {
      var i, len, ref, results, v;
      ref = this.variables;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        v = ref[i];
        if (v.type.assigned) {
          results.push(v.name + " = " + v.type.value);
        }
      }
      return results;
    };

    return Scope;

  })();

}).call(this);

  return module.exports;
})();require['./nodes'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var Access, Arr, Assign, Await, Base, Block, Call, Class, Code, CodeFragment, Comment, Defer, Existence, Expansion, Extends, For, HEXNUM, IDENTIFIER, IS_REGEX, IS_STRING, IcedRuntime, If, In, Index, LEVEL_ACCESS, LEVEL_COND, LEVEL_LIST, LEVEL_OP, LEVEL_PAREN, LEVEL_TOP, Literal, NEGATE, NO, NUMBER, Obj, Op, Param, Parens, RESERVED, Range, Return, SIMPLENUM, STRICT_PROSCRIBED, Scope, Slice, Slot, Splat, Switch, TAB, THIS, Throw, Try, UTILITIES, Value, While, YES, YieldReturn, addLocationDataFn, compact, del, ends, extend, flatten, fragmentsToText, iced, isComplexOrAssignable, isLiteralArguments, isLiteralThis, locationDataToString, merge, multident, parseNum, quote_funcname_for_debug, quote_path_for_emission, ref1, ref2, require_top_dir, some, starts, strToJavascript, throwSyntaxError, unfoldSoak, utility,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  Error.stackTraceLimit = Infinity;

  Scope = require('./scope').Scope;

  ref1 = require('./lexer'), RESERVED = ref1.RESERVED, STRICT_PROSCRIBED = ref1.STRICT_PROSCRIBED;

  iced = require('iced-runtime-3');

  ref2 = require('./helpers'), compact = ref2.compact, flatten = ref2.flatten, extend = ref2.extend, merge = ref2.merge, del = ref2.del, starts = ref2.starts, ends = ref2.ends, some = ref2.some, addLocationDataFn = ref2.addLocationDataFn, locationDataToString = ref2.locationDataToString, throwSyntaxError = ref2.throwSyntaxError, strToJavascript = ref2.strToJavascript;

  exports.extend = extend;

  exports.addLocationDataFn = addLocationDataFn;

  YES = function() {
    return true;
  };

  NO = function() {
    return false;
  };

  THIS = function() {
    return this;
  };

  NEGATE = function() {
    this.negated = !this.negated;
    return this;
  };

  exports.CodeFragment = CodeFragment = (function() {
    function CodeFragment(parent, code) {
      var ref3;
      this.code = "" + code;
      this.locationData = parent != null ? parent.locationData : void 0;
      this.type = (parent != null ? (ref3 = parent.constructor) != null ? ref3.name : void 0 : void 0) || 'unknown';
    }

    CodeFragment.prototype.toString = function() {
      return "" + this.code + (this.locationData ? ": " + locationDataToString(this.locationData) : '');
    };

    return CodeFragment;

  })();

  fragmentsToText = function(fragments) {
    var fragment;
    return ((function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = fragments.length; j < len1; j++) {
        fragment = fragments[j];
        results.push(fragment.code);
      }
      return results;
    })()).join('');
  };

  exports.Base = Base = (function() {
    function Base() {}

    Base.prototype.compile = function(o, lvl) {
      return fragmentsToText(this.compileToFragments(o, lvl));
    };

    Base.prototype.compileToFragments = function(o, lvl) {
      var node;
      o = extend({}, o);
      if (lvl) {
        o.level = lvl;
      }
      node = this.unfoldSoak(o) || this;
      node.tab = o.indent;
      if (o.level === LEVEL_TOP || !node.isStatement(o)) {
        return node.compileNode(o);
      } else {
        return node.compileClosure(o);
      }
    };

    Base.prototype.compileClosure = function(o) {
      var args, argumentsNode, func, jumpNode, meth, parts, ref3;
      if (jumpNode = this.jumps()) {
        jumpNode.error('cannot use a pure statement in an expression');
      }
      o.sharedScope = true;
      func = new Code([], Block.wrap([this]));
      args = [];
      if ((argumentsNode = this.contains(isLiteralArguments)) || this.contains(isLiteralThis)) {
        args = [new Literal('this')];
        if (argumentsNode) {
          meth = 'apply';
          args.push(new Literal('arguments'));
        } else {
          meth = 'call';
        }
        func = new Value(func, [new Access(new Literal(meth))]);
      }
      parts = (new Call(func, args)).compileNode(o);
      if (func.isGenerator || ((ref3 = func.base) != null ? ref3.isGenerator : void 0)) {
        parts.unshift(this.makeCode("(yield* "));
        parts.push(this.makeCode(")"));
      }
      return parts;
    };

    Base.prototype.cache = function(o, level, isComplex) {
      var complex, ref, sub;
      complex = isComplex != null ? isComplex(this) : this.isComplex();
      if (complex) {
        ref = new Literal(o.scope.freeVariable('ref'));
        sub = new Assign(ref, this);
        if (level) {
          return [sub.compileToFragments(o, level), [this.makeCode(ref.value)]];
        } else {
          return [sub, ref];
        }
      } else {
        ref = level ? this.compileToFragments(o, level) : this;
        return [ref, ref];
      }
    };

    Base.prototype.cacheToCodeFragments = function(cacheValues) {
      return [fragmentsToText(cacheValues[0]), fragmentsToText(cacheValues[1])];
    };

    Base.prototype.makeReturn = function(res) {
      var me;
      me = this.unwrapAll();
      if (res) {
        return new Call(new Literal(res + ".push"), [me]);
      } else {
        return new Return(me);
      }
    };

    Base.prototype.contains = function(pred) {
      var node;
      node = void 0;
      this.traverseChildren(false, function(n) {
        if (pred(n)) {
          node = n;
          return false;
        }
      });
      return node;
    };

    Base.prototype.lastNonComment = function(list) {
      var i;
      i = list.length;
      while (i--) {
        if (!(list[i] instanceof Comment)) {
          return list[i];
        }
      }
      return null;
    };

    Base.prototype.toString = function(idt, name) {
      var tree;
      if (idt == null) {
        idt = '';
      }
      if (name == null) {
        name = this.constructor.name;
      }
      tree = '\n' + idt + name;
      if (this.soak) {
        tree += '?';
      }
      tree = this.icedToString(tree);
      this.eachChild(function(node) {
        return tree += node.toString(idt + TAB);
      });
      return tree;
    };

    Base.prototype.eachChild = function(func) {
      var attr, child, j, k, len1, len2, ref3, ref4;
      if (!this.children) {
        return this;
      }
      ref3 = this.children;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        attr = ref3[j];
        if (this[attr]) {
          ref4 = flatten([this[attr]]);
          for (k = 0, len2 = ref4.length; k < len2; k++) {
            child = ref4[k];
            if (func(child) === false) {
              return this;
            }
          }
        }
      }
      return this;
    };

    Base.prototype.traverseChildren = function(crossScope, func) {
      return this.eachChild(function(child) {
        var recur;
        recur = func(child);
        if (recur !== false) {
          return child.traverseChildren(crossScope, func);
        }
      });
    };

    Base.prototype.invert = function() {
      return new Op('!', this);
    };

    Base.prototype.unwrapAll = function() {
      var node;
      node = this;
      while (node !== (node = node.unwrap())) {
        continue;
      }
      return node;
    };

    Base.prototype.children = [];

    Base.prototype.isStatement = NO;

    Base.prototype.jumps = NO;

    Base.prototype.isComplex = YES;

    Base.prototype.isChainable = NO;

    Base.prototype.isAssignable = NO;

    Base.prototype.unwrap = THIS;

    Base.prototype.unfoldSoak = NO;

    Base.prototype.assigns = NO;

    Base.prototype.updateLocationDataIfMissing = function(locationData) {
      if (this.locationData) {
        return this;
      }
      this.locationData = locationData;
      return this.eachChild(function(child) {
        return child.updateLocationDataIfMissing(locationData);
      });
    };

    Base.prototype.error = function(message) {
      return throwSyntaxError(message, this.locationData);
    };

    Base.prototype.makeCode = function(code) {
      return new CodeFragment(this, code);
    };

    Base.prototype.wrapInBraces = function(fragments) {
      return [].concat(this.makeCode('('), fragments, this.makeCode(')'));
    };

    Base.prototype.joinFragmentArrays = function(fragmentsList, joinStr) {
      var answer, fragments, i, j, len1;
      answer = [];
      for (i = j = 0, len1 = fragmentsList.length; j < len1; i = ++j) {
        fragments = fragmentsList[i];
        if (i) {
          answer.push(this.makeCode(joinStr));
        }
        answer = answer.concat(fragments);
      }
      return answer;
    };

    Base.prototype.icedToString = function(tree) {
      var extras;
      extras = [];
      if (this.icedFlag) {
        extras.push("I");
      }
      extras = extras.length ? " (" + extras.join('') + ")" : "";
      return tree + extras;
    };

    Base.prototype.icedFlattenChildren = function() {
      var attr, child, j, k, len1, len2, out, ref3, ref4;
      out = [];
      ref3 = this.children;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        attr = ref3[j];
        if (this[attr]) {
          ref4 = flatten([this[attr]]);
          for (k = 0, len2 = ref4.length; k < len2; k++) {
            child = ref4[k];
            out.push(child);
          }
        }
      }
      return out;
    };

    Base.prototype.icedWalkAst = function(o) {
      var child, j, len1, ref3, results;
      ref3 = this.icedFlattenChildren();
      results = [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        child = ref3[j];
        results.push(child.icedWalkAst(o));
      }
      return results;
    };

    Base.prototype.containsAwait = function() {
      return this.contains(function(node) {
        return node instanceof Await;
      });
    };

    Base.prototype.icedStatementAssertion = function() {
      if (this.containsAwait()) {
        return this.error("await'ed statements can't act as expressions");
      }
    };

    return Base;

  })();

  exports.Block = Block = (function(superClass1) {
    extend1(Block, superClass1);

    function Block(nodes) {
      this.expressions = compact(flatten(nodes || []));
    }

    Block.prototype.children = ['expressions'];

    Block.prototype.push = function(node) {
      this.expressions.push(node);
      return this;
    };

    Block.prototype.pop = function() {
      return this.expressions.pop();
    };

    Block.prototype.unshift = function(node) {
      this.expressions.unshift(node);
      return this;
    };

    Block.prototype.unwrap = function() {
      if (this.expressions.length === 1) {
        return this.expressions[0];
      } else {
        return this;
      }
    };

    Block.prototype.isEmpty = function() {
      return !this.expressions.length;
    };

    Block.prototype.isStatement = function(o) {
      var exp, j, len1, ref3;
      ref3 = this.expressions;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        exp = ref3[j];
        if (exp.isStatement(o)) {
          return true;
        }
      }
      return false;
    };

    Block.prototype.jumps = function(o) {
      var exp, j, jumpNode, len1, ref3;
      ref3 = this.expressions;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        exp = ref3[j];
        if (jumpNode = exp.jumps(o)) {
          return jumpNode;
        }
      }
    };

    Block.prototype.makeReturn = function(res) {
      var expr, len;
      len = this.expressions.length;
      while (len--) {
        expr = this.expressions[len];
        if (!(expr instanceof Comment)) {
          this.expressions[len] = expr.makeReturn(res);
          if (expr instanceof Return && !expr.expression) {
            this.expressions.splice(len, 1);
          }
          break;
        }
      }
      return this;
    };

    Block.prototype.compileToFragments = function(o, level) {
      if (o == null) {
        o = {};
      }
      if (o.scope) {
        return Block.__super__.compileToFragments.call(this, o, level);
      } else {
        return this.compileRoot(o);
      }
    };

    Block.prototype.compileNode = function(o) {
      var answer, compiledNodes, fragments, index, j, len1, node, ref3, top;
      this.tab = o.indent;
      top = o.level === LEVEL_TOP;
      compiledNodes = [];
      ref3 = this.expressions;
      for (index = j = 0, len1 = ref3.length; j < len1; index = ++j) {
        node = ref3[index];
        node = node.unwrapAll();
        node = node.unfoldSoak(o) || node;
        if (node instanceof Block) {
          compiledNodes.push(node.compileNode(o));
        } else if (top) {
          node.front = true;
          fragments = node.compileToFragments(o);
          if (!node.isStatement(o)) {
            fragments.unshift(this.makeCode("" + this.tab));
            fragments.push(this.makeCode(";"));
          }
          compiledNodes.push(fragments);
        } else {
          compiledNodes.push(node.compileToFragments(o, LEVEL_LIST));
        }
      }
      if (top) {
        if (this.spaced) {
          return [].concat(this.joinFragmentArrays(compiledNodes, '\n\n'), this.makeCode("\n"));
        } else {
          return this.joinFragmentArrays(compiledNodes, '\n');
        }
      }
      if (compiledNodes.length) {
        answer = this.joinFragmentArrays(compiledNodes, ', ');
      } else {
        answer = [this.makeCode("void 0")];
      }
      if (compiledNodes.length > 1 && o.level >= LEVEL_LIST) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Block.prototype.compileRoot = function(o) {
      var exp, fragments, i, j, len1, name, prelude, preludeExps, ref3, ref4, rest;
      o.indent = o.bare ? '' : TAB;
      o.level = LEVEL_TOP;
      this.spaced = true;
      o.scope = new Scope(null, this, null, (ref3 = o.referencedVars) != null ? ref3 : []);
      ref4 = o.locals || [];
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        name = ref4[j];
        o.scope.parameter(name);
      }
      prelude = [];
      if (!o.bare) {
        preludeExps = (function() {
          var k, len2, ref5, results;
          ref5 = this.expressions;
          results = [];
          for (i = k = 0, len2 = ref5.length; k < len2; i = ++k) {
            exp = ref5[i];
            if (!(exp.unwrap() instanceof Comment)) {
              break;
            }
            results.push(exp);
          }
          return results;
        }).call(this);
        rest = this.expressions.slice(preludeExps.length);
        this.expressions = preludeExps;
        if (preludeExps.length) {
          prelude = this.compileNode(merge(o, {
            indent: ''
          }));
          prelude.push(this.makeCode("\n"));
        }
        this.expressions = rest;
      }
      fragments = this.compileWithDeclarations(o);
      if (o.bare) {
        return fragments;
      }
      return [].concat(prelude, this.makeCode("(function() {\n"), fragments, this.makeCode("\n}).call(this);\n"));
    };

    Block.prototype.compileWithDeclarations = function(o) {
      var assigns, declars, exp, fragments, i, j, len1, post, ref3, ref4, ref5, rest, scope, spaced;
      fragments = [];
      post = [];
      ref3 = this.expressions;
      for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
        exp = ref3[i];
        exp = exp.unwrap();
        if (!(exp instanceof Comment || exp instanceof Literal)) {
          break;
        }
      }
      o = merge(o, {
        level: LEVEL_TOP
      });
      if (i) {
        rest = this.expressions.splice(i, 9e9);
        ref4 = [this.spaced, false], spaced = ref4[0], this.spaced = ref4[1];
        ref5 = [this.compileNode(o), spaced], fragments = ref5[0], this.spaced = ref5[1];
        this.expressions = rest;
      }
      post = this.compileNode(o);
      scope = o.scope;
      if (scope.expressions === this) {
        declars = o.scope.hasDeclarations();
        assigns = scope.hasAssignments;
        if (declars || assigns) {
          if (i) {
            fragments.push(this.makeCode('\n'));
          }
          fragments.push(this.makeCode(this.tab + "var "));
          if (declars) {
            fragments.push(this.makeCode(scope.declaredVariables().join(', ')));
          }
          if (assigns) {
            if (declars) {
              fragments.push(this.makeCode(",\n" + (this.tab + TAB)));
            }
            fragments.push(this.makeCode(scope.assignedVariables().join(",\n" + (this.tab + TAB))));
          }
          fragments.push(this.makeCode(";\n" + (this.spaced ? '\n' : '')));
        } else if (fragments.length && post.length) {
          fragments.push(this.makeCode("\n"));
        }
      }
      return fragments.concat(post);
    };

    Block.wrap = function(nodes) {
      if (nodes.length === 1 && nodes[0] instanceof Block) {
        return nodes[0];
      }
      return new Block(nodes);
    };

    Block.prototype.icedAddRuntime = function(deferInFile, awaitInFile) {
      var index, node;
      index = 0;
      while ((node = this.expressions[index]) && node instanceof Comment || node instanceof Value && node.isString()) {
        index++;
      }
      return this.expressions.splice(index, 0, new IcedRuntime(deferInFile, awaitInFile));
    };

    Block.prototype.icedTransform = function(opts) {
      var boundfunc, obj, wrapper;
      obj = {};
      if (this.containsAwait()) {
        wrapper = new Code([], new Block([this.expressions]));
        boundfunc = new Call(new Value(wrapper, [new Access(new Value(new Literal('call')))]), [new Literal('this')]);
        this.expressions = [boundfunc];
      }
      this.icedWalkAst(obj);
      if (!(opts != null ? opts.repl : void 0) && (obj.deferInFile || obj.awaitInFile || opts.runforce)) {
        this.icedAddRuntime(obj.deferInFile, obj.awaitInFile);
      }
      return this;
    };

    return Block;

  })(Base);

  exports.Literal = Literal = (function(superClass1) {
    extend1(Literal, superClass1);

    function Literal(value1) {
      this.value = value1;
    }

    Literal.prototype.makeReturn = function() {
      if (this.isStatement()) {
        return this;
      } else {
        return Literal.__super__.makeReturn.apply(this, arguments);
      }
    };

    Literal.prototype.isAssignable = function() {
      return IDENTIFIER.test(this.value);
    };

    Literal.prototype.isStatement = function() {
      var ref3;
      return (ref3 = this.value) === 'break' || ref3 === 'continue' || ref3 === 'debugger';
    };

    Literal.prototype.isComplex = NO;

    Literal.prototype.assigns = function(name) {
      return name === this.value;
    };

    Literal.prototype.jumps = function(o) {
      if (this.value === 'break' && !((o != null ? o.loop : void 0) || (o != null ? o.block : void 0))) {
        return this;
      }
      if (this.value === 'continue' && !(o != null ? o.loop : void 0)) {
        return this;
      }
    };

    Literal.prototype.compileNode = function(o) {
      var answer, code, ref3;
      if (this.value === 'arguments' && o.scope.icedUseArguments) {
        this.value = o.scope.parent.parent.icedArgumentsVar;
      }
      code = this.value === 'this' ? ((ref3 = o.scope.method) != null ? ref3.bound : void 0) ? o.scope.method.context : this.value : this.value.reserved ? "\"" + this.value + "\"" : this.value;
      answer = this.isStatement() ? "" + this.tab + code + ";" : code;
      return [this.makeCode(answer)];
    };

    Literal.prototype.toString = function() {
      return ' "' + this.value + '"';
    };

    Literal.prototype.icedWalkAst = function(o) {
      if (this.value === 'arguments' && o.awaitInFunc) {
        o.foundArguments = true;
      }
      return this;
    };

    return Literal;

  })(Base);

  exports.Undefined = (function(superClass1) {
    extend1(Undefined, superClass1);

    function Undefined() {
      return Undefined.__super__.constructor.apply(this, arguments);
    }

    Undefined.prototype.isAssignable = NO;

    Undefined.prototype.isComplex = NO;

    Undefined.prototype.compileNode = function(o) {
      return [this.makeCode(o.level >= LEVEL_ACCESS ? '(void 0)' : 'void 0')];
    };

    return Undefined;

  })(Base);

  exports.Null = (function(superClass1) {
    extend1(Null, superClass1);

    function Null() {
      return Null.__super__.constructor.apply(this, arguments);
    }

    Null.prototype.isAssignable = NO;

    Null.prototype.isComplex = NO;

    Null.prototype.compileNode = function() {
      return [this.makeCode("null")];
    };

    return Null;

  })(Base);

  exports.Bool = (function(superClass1) {
    extend1(Bool, superClass1);

    Bool.prototype.isAssignable = NO;

    Bool.prototype.isComplex = NO;

    Bool.prototype.compileNode = function() {
      return [this.makeCode(this.val)];
    };

    function Bool(val1) {
      this.val = val1;
    }

    return Bool;

  })(Base);

  exports.Return = Return = (function(superClass1) {
    extend1(Return, superClass1);

    function Return(expression) {
      this.expression = expression;
    }

    Return.prototype.children = ['expression'];

    Return.prototype.isStatement = YES;

    Return.prototype.makeReturn = THIS;

    Return.prototype.jumps = THIS;

    Return.prototype.compileToFragments = function(o, level) {
      var expr, ref3;
      expr = (ref3 = this.expression) != null ? ref3.makeReturn() : void 0;
      if (expr && !(expr instanceof Return)) {
        return expr.compileToFragments(o, level);
      } else {
        return Return.__super__.compileToFragments.call(this, o, level);
      }
    };

    Return.prototype.compileNode = function(o) {
      var answer;
      this.icedStatementAssertion();
      answer = [];
      answer.push(this.makeCode(this.tab + ("return" + (this.expression ? " " : ""))));
      if (this.expression) {
        answer = answer.concat(this.expression.compileToFragments(o, LEVEL_PAREN));
      }
      answer.push(this.makeCode(";"));
      return answer;
    };

    return Return;

  })(Base);

  exports.YieldReturn = YieldReturn = (function(superClass1) {
    extend1(YieldReturn, superClass1);

    function YieldReturn() {
      return YieldReturn.__super__.constructor.apply(this, arguments);
    }

    YieldReturn.prototype.compileNode = function(o) {
      if (o.scope.parent == null) {
        this.error('yield can only occur inside functions');
      }
      return YieldReturn.__super__.compileNode.apply(this, arguments);
    };

    return YieldReturn;

  })(Return);

  exports.Value = Value = (function(superClass1) {
    extend1(Value, superClass1);

    function Value(base, props, tag) {
      if (!props && base instanceof Value) {
        return base;
      }
      this.base = base;
      this.properties = props || [];
      if (tag) {
        this[tag] = true;
      }
      return this;
    }

    Value.prototype.children = ['base', 'properties'];

    Value.prototype.add = function(props) {
      this.properties = this.properties.concat(props);
      return this;
    };

    Value.prototype.hasProperties = function() {
      return !!this.properties.length;
    };

    Value.prototype.bareLiteral = function(type) {
      return !this.properties.length && this.base instanceof type;
    };

    Value.prototype.isArray = function() {
      return this.bareLiteral(Arr);
    };

    Value.prototype.isRange = function() {
      return this.bareLiteral(Range);
    };

    Value.prototype.isComplex = function() {
      return this.hasProperties() || this.base.isComplex();
    };

    Value.prototype.isAssignable = function() {
      return this.hasProperties() || this.base.isAssignable();
    };

    Value.prototype.isSimpleNumber = function() {
      return this.bareLiteral(Literal) && SIMPLENUM.test(this.base.value);
    };

    Value.prototype.isString = function() {
      return this.bareLiteral(Literal) && IS_STRING.test(this.base.value);
    };

    Value.prototype.isRegex = function() {
      return this.bareLiteral(Literal) && IS_REGEX.test(this.base.value);
    };

    Value.prototype.isAtomic = function() {
      var j, len1, node, ref3;
      ref3 = this.properties.concat(this.base);
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        node = ref3[j];
        if (node.soak || node instanceof Call) {
          return false;
        }
      }
      return true;
    };

    Value.prototype.isNotCallable = function() {
      return this.isSimpleNumber() || this.isString() || this.isRegex() || this.isArray() || this.isRange() || this.isSplice() || this.isObject();
    };

    Value.prototype.isStatement = function(o) {
      return !this.properties.length && this.base.isStatement(o);
    };

    Value.prototype.assigns = function(name) {
      return !this.properties.length && this.base.assigns(name);
    };

    Value.prototype.jumps = function(o) {
      return !this.properties.length && this.base.jumps(o);
    };

    Value.prototype.isObject = function(onlyGenerated) {
      if (this.properties.length) {
        return false;
      }
      return (this.base instanceof Obj) && (!onlyGenerated || this.base.generated);
    };

    Value.prototype.isSplice = function() {
      var lastProp, ref3;
      ref3 = this.properties, lastProp = ref3[ref3.length - 1];
      return lastProp instanceof Slice;
    };

    Value.prototype.looksStatic = function(className) {
      var ref3;
      return this.base.value === className && this.properties.length === 1 && ((ref3 = this.properties[0].name) != null ? ref3.value : void 0) !== 'prototype';
    };

    Value.prototype.unwrap = function() {
      if (this.properties.length) {
        return this;
      } else {
        return this.base;
      }
    };

    Value.prototype.cacheReference = function(o) {
      var base, bref, name, nref, ref3;
      ref3 = this.properties, name = ref3[ref3.length - 1];
      if (this.properties.length < 2 && !this.base.isComplex() && !(name != null ? name.isComplex() : void 0)) {
        return [this, this];
      }
      base = new Value(this.base, this.properties.slice(0, -1));
      if (base.isComplex()) {
        bref = new Literal(o.scope.freeVariable('base'));
        base = new Value(new Parens(new Assign(bref, base)));
      }
      if (!name) {
        return [base, bref];
      }
      if (name.isComplex()) {
        nref = new Literal(o.scope.freeVariable('name'));
        name = new Index(new Assign(nref, name.index));
        nref = new Index(nref);
      }
      return [base.add(name), new Value(bref || base.base, [nref || name])];
    };

    Value.prototype.compileNode = function(o) {
      var fragments, j, len1, prop, props;
      this.base.front = this.front;
      props = this.properties;
      fragments = this.base.compileToFragments(o, (props.length ? LEVEL_ACCESS : null));
      if ((this.base instanceof Parens || props.length) && SIMPLENUM.test(fragmentsToText(fragments))) {
        fragments.push(this.makeCode('.'));
      }
      for (j = 0, len1 = props.length; j < len1; j++) {
        prop = props[j];
        fragments.push.apply(fragments, prop.compileToFragments(o));
      }
      return fragments;
    };

    Value.prototype.unfoldSoak = function(o) {
      return this.unfoldedSoak != null ? this.unfoldedSoak : this.unfoldedSoak = (function(_this) {
        return function() {
          var fst, i, ifn, j, len1, prop, ref, ref3, ref4, snd;
          if (ifn = _this.base.unfoldSoak(o)) {
            (ref3 = ifn.body.properties).push.apply(ref3, _this.properties);
            return ifn;
          }
          ref4 = _this.properties;
          for (i = j = 0, len1 = ref4.length; j < len1; i = ++j) {
            prop = ref4[i];
            if (!prop.soak) {
              continue;
            }
            prop.soak = false;
            fst = new Value(_this.base, _this.properties.slice(0, i));
            snd = new Value(_this.base, _this.properties.slice(i));
            if (fst.isComplex()) {
              ref = new Literal(o.scope.freeVariable('ref'));
              fst = new Parens(new Assign(ref, fst));
              snd.base = ref;
            }
            return new If(new Existence(fst), snd, {
              soak: true
            });
          }
          return false;
        };
      })(this)();
    };

    Value.prototype.icedToSlot = function(i) {
      var sufffix, suffix;
      if (this.base instanceof Obj) {
        return this.base.icedToSlot(i);
      }
      sufffix = null;
      if (this.properties && this.properties.length) {
        suffix = this.properties.pop();
      }
      return new Slot(i, this, suffix);
    };

    Value.prototype.icedToSlotAccess = function() {
      if (this["this"]) {
        return this.properties[0];
      } else {
        return new Access(this);
      }
    };

    Value.prototype.copy = function() {
      return new Value(this.base, this.properties);
    };

    return Value;

  })(Base);

  exports.Comment = Comment = (function(superClass1) {
    extend1(Comment, superClass1);

    function Comment(comment1) {
      this.comment = comment1;
    }

    Comment.prototype.isStatement = YES;

    Comment.prototype.makeReturn = THIS;

    Comment.prototype.compileNode = function(o, level) {
      var code, comment;
      comment = this.comment.replace(/^(\s*)#(?=\s)/gm, "$1 *");
      code = "/*" + (multident(comment, this.tab)) + (indexOf.call(comment, '\n') >= 0 ? "\n" + this.tab : '') + " */";
      if ((level || o.level) === LEVEL_TOP) {
        code = o.indent + code;
      }
      return [this.makeCode("\n"), this.makeCode(code)];
    };

    return Comment;

  })(Base);

  exports.Call = Call = (function(superClass1) {
    extend1(Call, superClass1);

    function Call(variable, args1, soak) {
      this.args = args1 != null ? args1 : [];
      this.soak = soak;
      this.isNew = false;
      this.isSuper = variable === 'super';
      this.variable = this.isSuper ? null : variable;
      if (variable instanceof Value && variable.isNotCallable()) {
        variable.error("literal is not a function");
      }
    }

    Call.prototype.children = ['variable', 'args'];

    Call.prototype.newInstance = function() {
      var base, ref3;
      base = ((ref3 = this.variable) != null ? ref3.base : void 0) || this.variable;
      if (base instanceof Call && !base.isNew) {
        base.newInstance();
      } else {
        this.isNew = true;
      }
      return this;
    };

    Call.prototype.superReference = function(o) {
      var accesses, base, bref, klass, method, name, nref, variable;
      method = o.scope.namedMethod();
      if (method != null ? method.klass : void 0) {
        klass = method.klass, name = method.name, variable = method.variable;
        if (klass.isComplex()) {
          bref = new Literal(o.scope.parent.freeVariable('base'));
          base = new Value(new Parens(new Assign(bref, klass)));
          variable.base = base;
          variable.properties.splice(0, klass.properties.length);
        }
        if (name.isComplex() || (name instanceof Index && name.index.isAssignable())) {
          nref = new Literal(o.scope.parent.freeVariable('name'));
          name = new Index(new Assign(nref, name.index));
          variable.properties.pop();
          variable.properties.push(name);
        }
        accesses = [new Access(new Literal('__super__'))];
        if (method["static"]) {
          accesses.push(new Access(new Literal('constructor')));
        }
        accesses.push(nref != null ? new Index(nref) : name);
        return (new Value(bref != null ? bref : klass, accesses)).compile(o);
      } else if (method != null ? method.ctor : void 0) {
        return method.name + ".__super__.constructor";
      } else {
        return this.error('cannot call super outside of an instance method.');
      }
    };

    Call.prototype.superThis = function(o) {
      var method;
      if (o.scope.icedgen) {
        return "_this";
      } else {
        method = o.scope.method;
        return (method && !method.klass && method.context) || "this";
      }
    };

    Call.prototype.unfoldSoak = function(o) {
      var call, ifn, j, left, len1, list, ref3, ref4, rite;
      if (this.soak) {
        if (this.variable) {
          if (ifn = unfoldSoak(o, this, 'variable')) {
            return ifn;
          }
          ref3 = new Value(this.variable).cacheReference(o), left = ref3[0], rite = ref3[1];
        } else {
          left = new Literal(this.superReference(o));
          rite = new Value(left);
        }
        rite = new Call(rite, this.args);
        rite.isNew = this.isNew;
        left = new Literal("typeof " + (left.compile(o)) + " === \"function\"");
        return new If(left, new Value(rite), {
          soak: true
        });
      }
      call = this;
      list = [];
      while (true) {
        if (call.variable instanceof Call) {
          list.push(call);
          call = call.variable;
          continue;
        }
        if (!(call.variable instanceof Value)) {
          break;
        }
        list.push(call);
        if (!((call = call.variable.base) instanceof Call)) {
          break;
        }
      }
      ref4 = list.reverse();
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        call = ref4[j];
        if (ifn) {
          if (call.variable instanceof Call) {
            call.variable = ifn;
          } else {
            call.variable.base = ifn;
          }
        }
        ifn = unfoldSoak(o, call, 'variable');
      }
      return ifn;
    };

    Call.prototype.compileNode = function(o) {
      var arg, argIndex, compiledArgs, compiledArray, fragments, j, len1, preface, ref3, ref4;
      this.icedStatementAssertion();
      if ((ref3 = this.variable) != null) {
        ref3.front = this.front;
      }
      compiledArray = Splat.compileSplattedArray(o, this.args, true);
      if (compiledArray.length) {
        return this.compileSplat(o, compiledArray);
      }
      compiledArgs = [];
      ref4 = this.args;
      for (argIndex = j = 0, len1 = ref4.length; j < len1; argIndex = ++j) {
        arg = ref4[argIndex];
        if (argIndex) {
          compiledArgs.push(this.makeCode(", "));
        }
        compiledArgs.push.apply(compiledArgs, arg.compileToFragments(o, LEVEL_LIST));
      }
      fragments = [];
      if (this.isSuper) {
        preface = this.superReference(o) + (".call(" + (this.superThis(o)));
        if (compiledArgs.length) {
          preface += ", ";
        }
        fragments.push(this.makeCode(preface));
      } else {
        if (this.isNew) {
          fragments.push(this.makeCode('new '));
        }
        fragments.push.apply(fragments, this.variable.compileToFragments(o, LEVEL_ACCESS));
        fragments.push(this.makeCode("("));
      }
      fragments.push.apply(fragments, compiledArgs);
      fragments.push(this.makeCode(")"));
      return fragments;
    };

    Call.prototype.compileSplat = function(o, splatArgs) {
      var answer, base, fun, idt, name, ref;
      if (this.isSuper) {
        return [].concat(this.makeCode((this.superReference(o)) + ".apply(" + (this.superThis(o)) + ", "), splatArgs, this.makeCode(")"));
      }
      if (this.isNew) {
        idt = this.tab + TAB;
        return [].concat(this.makeCode("(function(func, args, ctor) {\n" + idt + "ctor.prototype = func.prototype;\n" + idt + "var child = new ctor, result = func.apply(child, args);\n" + idt + "return Object(result) === result ? result : child;\n" + this.tab + "})("), this.variable.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), splatArgs, this.makeCode(", function(){})"));
      }
      answer = [];
      base = new Value(this.variable);
      if ((name = base.properties.pop()) && base.isComplex()) {
        ref = o.scope.freeVariable('ref');
        answer = answer.concat(this.makeCode("(" + ref + " = "), base.compileToFragments(o, LEVEL_LIST), this.makeCode(")"), name.compileToFragments(o));
      } else {
        fun = base.compileToFragments(o, LEVEL_ACCESS);
        if (SIMPLENUM.test(fragmentsToText(fun))) {
          fun = this.wrapInBraces(fun);
        }
        if (name) {
          ref = fragmentsToText(fun);
          fun.push.apply(fun, name.compileToFragments(o));
        } else {
          ref = 'null';
        }
        answer = answer.concat(fun);
      }
      return answer = answer.concat(this.makeCode(".apply(" + ref + ", "), splatArgs, this.makeCode(")"));
    };

    return Call;

  })(Base);

  exports.Extends = Extends = (function(superClass1) {
    extend1(Extends, superClass1);

    function Extends(child1, parent1) {
      this.child = child1;
      this.parent = parent1;
    }

    Extends.prototype.children = ['child', 'parent'];

    Extends.prototype.compileToFragments = function(o) {
      return new Call(new Value(new Literal(utility('extend', o))), [this.child, this.parent]).compileToFragments(o);
    };

    return Extends;

  })(Base);

  exports.Access = Access = (function(superClass1) {
    extend1(Access, superClass1);

    function Access(name1, tag) {
      this.name = name1;
      this.name.asKey = true;
      this.soak = tag === 'soak';
    }

    Access.prototype.children = ['name'];

    Access.prototype.compileToFragments = function(o) {
      var name;
      name = this.name.compileToFragments(o);
      if ((IDENTIFIER.test(fragmentsToText(name))) || this.name instanceof Defer) {
        name.unshift(this.makeCode("."));
      } else {
        name.unshift(this.makeCode("["));
        name.push(this.makeCode("]"));
      }
      return name;
    };

    Access.prototype.isComplex = NO;

    return Access;

  })(Base);

  exports.Index = Index = (function(superClass1) {
    extend1(Index, superClass1);

    function Index(index1) {
      this.index = index1;
    }

    Index.prototype.children = ['index'];

    Index.prototype.compileToFragments = function(o) {
      return [].concat(this.makeCode("["), this.index.compileToFragments(o, LEVEL_PAREN), this.makeCode("]"));
    };

    Index.prototype.isComplex = function() {
      return this.index.isComplex();
    };

    return Index;

  })(Base);

  exports.Range = Range = (function(superClass1) {
    extend1(Range, superClass1);

    Range.prototype.children = ['from', 'to'];

    function Range(from1, to1, tag) {
      this.from = from1;
      this.to = to1;
      this.exclusive = tag === 'exclusive';
      this.equals = this.exclusive ? '' : '=';
    }

    Range.prototype.compileVariables = function(o) {
      var isComplex, ref3, ref4, ref5, ref6, step;
      o = merge(o, {
        top: true
      });
      isComplex = del(o, 'isComplex');
      ref3 = this.cacheToCodeFragments(this.from.cache(o, LEVEL_LIST, isComplex)), this.fromC = ref3[0], this.fromVar = ref3[1];
      ref4 = this.cacheToCodeFragments(this.to.cache(o, LEVEL_LIST, isComplex)), this.toC = ref4[0], this.toVar = ref4[1];
      if (step = del(o, 'step')) {
        ref5 = this.cacheToCodeFragments(step.cache(o, LEVEL_LIST, isComplex)), this.step = ref5[0], this.stepVar = ref5[1];
      }
      ref6 = [this.fromVar.match(NUMBER), this.toVar.match(NUMBER)], this.fromNum = ref6[0], this.toNum = ref6[1];
      if (this.stepVar) {
        return this.stepNum = this.stepVar.match(NUMBER);
      }
    };

    Range.prototype.compileNode = function(o) {
      var cond, condPart, from, gt, idx, idxName, known, lt, namedIndex, ref3, ref4, stepPart, to, varPart;
      if (!this.fromVar) {
        this.compileVariables(o);
      }
      if (!o.index) {
        return this.compileArray(o);
      }
      known = this.fromNum && this.toNum;
      idx = del(o, 'index');
      idxName = del(o, 'name');
      namedIndex = idxName && idxName !== idx;
      varPart = idx + " = " + this.fromC;
      if (this.toC !== this.toVar) {
        varPart += ", " + this.toC;
      }
      if (this.step !== this.stepVar) {
        varPart += ", " + this.step;
      }
      ref3 = [idx + " <" + this.equals, idx + " >" + this.equals], lt = ref3[0], gt = ref3[1];
      condPart = this.stepNum ? parseNum(this.stepNum[0]) > 0 ? lt + " " + this.toVar : gt + " " + this.toVar : known ? ((ref4 = [parseNum(this.fromNum[0]), parseNum(this.toNum[0])], from = ref4[0], to = ref4[1], ref4), from <= to ? lt + " " + to : gt + " " + to) : (cond = this.stepVar ? this.stepVar + " > 0" : this.fromVar + " <= " + this.toVar, cond + " ? " + lt + " " + this.toVar + " : " + gt + " " + this.toVar);
      stepPart = this.stepVar ? idx + " += " + this.stepVar : known ? namedIndex ? from <= to ? "++" + idx : "--" + idx : from <= to ? idx + "++" : idx + "--" : namedIndex ? cond + " ? ++" + idx + " : --" + idx : cond + " ? " + idx + "++ : " + idx + "--";
      if (namedIndex) {
        varPart = idxName + " = " + varPart;
      }
      if (namedIndex) {
        stepPart = idxName + " = " + stepPart;
      }
      return [this.makeCode(varPart + "; " + condPart + "; " + stepPart)];
    };

    Range.prototype.compileArray = function(o) {
      var args, body, cond, hasArgs, i, idt, j, post, pre, range, ref3, ref4, result, results, vars;
      if (this.fromNum && this.toNum && Math.abs(this.fromNum - this.toNum) <= 20) {
        range = (function() {
          results = [];
          for (var j = ref3 = +this.fromNum, ref4 = +this.toNum; ref3 <= ref4 ? j <= ref4 : j >= ref4; ref3 <= ref4 ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this);
        if (this.exclusive) {
          range.pop();
        }
        return [this.makeCode("[" + (range.join(', ')) + "]")];
      }
      idt = this.tab + TAB;
      i = o.scope.freeVariable('i', {
        single: true
      });
      result = o.scope.freeVariable('results');
      pre = "\n" + idt + result + " = [];";
      if (this.fromNum && this.toNum) {
        o.index = i;
        body = fragmentsToText(this.compileNode(o));
      } else {
        vars = (i + " = " + this.fromC) + (this.toC !== this.toVar ? ", " + this.toC : '');
        cond = this.fromVar + " <= " + this.toVar;
        body = "var " + vars + "; " + cond + " ? " + i + " <" + this.equals + " " + this.toVar + " : " + i + " >" + this.equals + " " + this.toVar + "; " + cond + " ? " + i + "++ : " + i + "--";
      }
      post = "{ " + result + ".push(" + i + "); }\n" + idt + "return " + result + ";\n" + o.indent;
      hasArgs = function(node) {
        return node != null ? node.contains(isLiteralArguments) : void 0;
      };
      if (hasArgs(this.from) || hasArgs(this.to)) {
        args = ', arguments';
      }
      return [this.makeCode("(function() {" + pre + "\n" + idt + "for (" + body + ")" + post + "}).apply(this" + (args != null ? args : '') + ")")];
    };

    return Range;

  })(Base);

  exports.Slice = Slice = (function(superClass1) {
    extend1(Slice, superClass1);

    Slice.prototype.children = ['range'];

    function Slice(range1) {
      this.range = range1;
      Slice.__super__.constructor.call(this);
    }

    Slice.prototype.compileNode = function(o) {
      var compiled, compiledText, from, fromCompiled, ref3, to, toStr;
      ref3 = this.range, to = ref3.to, from = ref3.from;
      fromCompiled = from && from.compileToFragments(o, LEVEL_PAREN) || [this.makeCode('0')];
      if (to) {
        compiled = to.compileToFragments(o, LEVEL_PAREN);
        compiledText = fragmentsToText(compiled);
        if (!(!this.range.exclusive && +compiledText === -1)) {
          toStr = ', ' + (this.range.exclusive ? compiledText : SIMPLENUM.test(compiledText) ? "" + (+compiledText + 1) : (compiled = to.compileToFragments(o, LEVEL_ACCESS), "+" + (fragmentsToText(compiled)) + " + 1 || 9e9"));
        }
      }
      return [this.makeCode(".slice(" + (fragmentsToText(fromCompiled)) + (toStr || '') + ")")];
    };

    return Slice;

  })(Base);

  exports.Obj = Obj = (function(superClass1) {
    extend1(Obj, superClass1);

    function Obj(props, generated) {
      this.generated = generated != null ? generated : false;
      this.objects = this.properties = props || [];
    }

    Obj.prototype.children = ['properties'];

    Obj.prototype.compileNode = function(o) {
      var answer, dynamicIndex, hasDynamic, i, idt, indent, j, join, k, key, lastNoncom, len1, len2, len3, m, node, oref, prop, props, ref3, value;
      props = this.properties;
      if (this.generated) {
        for (j = 0, len1 = props.length; j < len1; j++) {
          node = props[j];
          if (node instanceof Value) {
            node.error('cannot have an implicit value in an implicit object');
          }
        }
      }
      for (dynamicIndex = k = 0, len2 = props.length; k < len2; dynamicIndex = ++k) {
        prop = props[dynamicIndex];
        if ((prop.variable || prop).base instanceof Parens) {
          break;
        }
      }
      hasDynamic = dynamicIndex < props.length;
      idt = o.indent += TAB;
      lastNoncom = this.lastNonComment(this.properties);
      answer = [];
      if (hasDynamic) {
        oref = o.scope.freeVariable('obj');
        answer.push(this.makeCode("(\n" + idt + oref + " = "));
      }
      answer.push(this.makeCode("{" + (props.length === 0 || dynamicIndex === 0 ? '}' : '\n')));
      for (i = m = 0, len3 = props.length; m < len3; i = ++m) {
        prop = props[i];
        if (i === dynamicIndex) {
          if (i !== 0) {
            answer.push(this.makeCode("\n" + idt + "}"));
          }
          answer.push(this.makeCode(',\n'));
        }
        join = i === props.length - 1 || i === dynamicIndex - 1 ? '' : prop === lastNoncom || prop instanceof Comment ? '\n' : ',\n';
        indent = prop instanceof Comment ? '' : idt;
        if (hasDynamic && i < dynamicIndex) {
          indent += TAB;
        }
        if (prop instanceof Assign) {
          if (prop.context !== 'object') {
            prop.operatorToken.error("unexpected " + prop.operatorToken.value);
          }
          if (prop.variable instanceof Value && prop.variable.hasProperties()) {
            prop.variable.error('invalid object key');
          }
        }
        if (prop instanceof Value && prop["this"]) {
          prop = new Assign(prop.properties[0].name, prop, 'object');
        }
        if (!(prop instanceof Comment)) {
          if (i < dynamicIndex) {
            if (!(prop instanceof Assign)) {
              prop = new Assign(prop, prop, 'object');
            }
            (prop.variable.base || prop.variable).asKey = true;
          } else {
            if (prop instanceof Assign) {
              key = prop.variable;
              value = prop.value;
            } else {
              ref3 = prop.base.cache(o), key = ref3[0], value = ref3[1];
            }
            prop = new Assign(new Value(new Literal(oref), [new Access(key)]), value);
          }
        }
        if (indent) {
          answer.push(this.makeCode(indent));
        }
        answer.push.apply(answer, prop.compileToFragments(o, LEVEL_TOP));
        if (join) {
          answer.push(this.makeCode(join));
        }
      }
      if (hasDynamic) {
        answer.push(this.makeCode(",\n" + idt + oref + "\n" + this.tab + ")"));
      } else {
        if (props.length !== 0) {
          answer.push(this.makeCode("\n" + this.tab + "}"));
        }
      }
      if (this.front && !hasDynamic) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Obj.prototype.assigns = function(name) {
      var j, len1, prop, ref3;
      ref3 = this.properties;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        prop = ref3[j];
        if (prop.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    Obj.prototype.icedToSlot = function(i) {
      var access, j, len1, prop, ref3, results;
      ref3 = this.properties;
      results = [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        prop = ref3[j];
        if (prop instanceof Assign) {
          results.push((prop.value.icedToSlot(i)).addAccess(prop.variable.icedToSlotAccess()));
        } else if (prop instanceof Value) {
          access = prop.icedToSlotAccess();
          results.push((prop.icedToSlot(i)).addAccess(access));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Obj;

  })(Base);

  exports.Arr = Arr = (function(superClass1) {
    extend1(Arr, superClass1);

    function Arr(objs) {
      this.objects = objs || [];
    }

    Arr.prototype.children = ['objects'];

    Arr.prototype.compileNode = function(o) {
      var answer, compiledObjs, fragments, index, j, len1, obj;
      if (!this.objects.length) {
        return [this.makeCode('[]')];
      }
      o.indent += TAB;
      answer = Splat.compileSplattedArray(o, this.objects);
      if (answer.length) {
        return answer;
      }
      answer = [];
      compiledObjs = (function() {
        var j, len1, ref3, results;
        ref3 = this.objects;
        results = [];
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          obj = ref3[j];
          results.push(obj.compileToFragments(o, LEVEL_LIST));
        }
        return results;
      }).call(this);
      for (index = j = 0, len1 = compiledObjs.length; j < len1; index = ++j) {
        fragments = compiledObjs[index];
        if (index) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, fragments);
      }
      if (fragmentsToText(answer).indexOf('\n') >= 0) {
        answer.unshift(this.makeCode("[\n" + o.indent));
        answer.push(this.makeCode("\n" + this.tab + "]"));
      } else {
        answer.unshift(this.makeCode("["));
        answer.push(this.makeCode("]"));
      }
      return answer;
    };

    Arr.prototype.assigns = function(name) {
      var j, len1, obj, ref3;
      ref3 = this.objects;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        obj = ref3[j];
        if (obj.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    return Arr;

  })(Base);

  exports.Class = Class = (function(superClass1) {
    extend1(Class, superClass1);

    function Class(variable1, parent1, body1) {
      this.variable = variable1;
      this.parent = parent1;
      this.body = body1 != null ? body1 : new Block;
      this.boundFuncs = [];
      this.body.classBody = true;
    }

    Class.prototype.children = ['variable', 'parent', 'body'];

    Class.prototype.determineName = function() {
      var decl, ref3, tail;
      if (!this.variable) {
        return null;
      }
      ref3 = this.variable.properties, tail = ref3[ref3.length - 1];
      decl = tail ? tail instanceof Access && tail.name.value : this.variable.base.value;
      if (indexOf.call(STRICT_PROSCRIBED, decl) >= 0) {
        this.variable.error("class variable name may not be " + decl);
      }
      return decl && (decl = IDENTIFIER.test(decl) && decl);
    };

    Class.prototype.setContext = function(name) {
      return this.body.traverseChildren(false, function(node) {
        if (node.classBody) {
          return false;
        }
        if (node instanceof Literal && node.value === 'this') {
          return node.value = name;
        } else if (node instanceof Code) {
          if (node.bound) {
            return node.context = name;
          }
        }
      });
    };

    Class.prototype.addBoundFunctions = function(o) {
      var bvar, j, len1, lhs, ref3;
      ref3 = this.boundFuncs;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        bvar = ref3[j];
        lhs = (new Value(new Literal("this"), [new Access(bvar)])).compile(o);
        this.ctor.body.unshift(new Literal(lhs + " = " + (utility('bind', o)) + "(" + lhs + ", this)"));
      }
    };

    Class.prototype.addProperties = function(node, name, o) {
      var acc, assign, base, exprs, func, props;
      props = node.base.properties.slice(0);
      exprs = (function() {
        var results;
        results = [];
        while (assign = props.shift()) {
          if (assign instanceof Assign) {
            base = assign.variable.base;
            delete assign.context;
            func = assign.value;
            if (base.value === 'constructor') {
              if (this.ctor) {
                assign.error('cannot define more than one constructor in a class');
              }
              if (func.bound) {
                assign.error('cannot define a constructor as a bound function');
              }
              if (func instanceof Code) {
                assign = this.ctor = func;
              } else {
                this.externalCtor = o.classScope.freeVariable('class');
                assign = new Assign(new Literal(this.externalCtor), func);
              }
            } else {
              if (assign.variable["this"]) {
                func["static"] = true;
              } else {
                acc = base.isComplex() ? new Index(base) : new Access(base);
                assign.variable = new Value(new Literal(name), [new Access(new Literal('prototype')), acc]);
                if (func instanceof Code && func.bound) {
                  this.boundFuncs.push(base);
                  func.bound = false;
                }
              }
            }
          }
          results.push(assign);
        }
        return results;
      }).call(this);
      return compact(exprs);
    };

    Class.prototype.walkBody = function(name, o) {
      return this.traverseChildren(false, (function(_this) {
        return function(child) {
          var cont, exps, i, j, len1, node, ref3;
          cont = true;
          if (child instanceof Class) {
            return false;
          }
          if (child instanceof Block) {
            ref3 = exps = child.expressions;
            for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
              node = ref3[i];
              if (node instanceof Assign && node.variable.looksStatic(name)) {
                node.value["static"] = true;
              } else if (node instanceof Value && node.isObject(true)) {
                cont = false;
                exps[i] = _this.addProperties(node, name, o);
              }
            }
            child.expressions = exps = flatten(exps);
          }
          return cont && !(child instanceof Class);
        };
      })(this));
    };

    Class.prototype.hoistDirectivePrologue = function() {
      var expressions, index, node;
      index = 0;
      expressions = this.body.expressions;
      while ((node = expressions[index]) && node instanceof Comment || node instanceof Value && node.isString()) {
        ++index;
      }
      return this.directives = expressions.splice(0, index);
    };

    Class.prototype.ensureConstructor = function(name) {
      if (!this.ctor) {
        this.ctor = new Code;
        if (this.externalCtor) {
          this.ctor.body.push(new Literal(this.externalCtor + ".apply(this, arguments)"));
        } else if (this.parent) {
          this.ctor.body.push(new Literal(name + ".__super__.constructor.apply(this, arguments)"));
        }
        this.ctor.body.makeReturn();
        this.body.expressions.unshift(this.ctor);
      }
      this.ctor.ctor = this.ctor.name = name;
      this.ctor.klass = null;
      return this.ctor.noReturn = true;
    };

    Class.prototype.compileNode = function(o) {
      var args, argumentsNode, func, jumpNode, klass, lname, name, ref3, superClass;
      if (jumpNode = this.body.jumps()) {
        jumpNode.error('Class bodies cannot contain pure statements');
      }
      if (argumentsNode = this.body.contains(isLiteralArguments)) {
        argumentsNode.error("Class bodies shouldn't reference arguments");
      }
      name = this.determineName() || '_Class';
      if (name.reserved) {
        name = "_" + name;
      }
      lname = new Literal(name);
      func = new Code([], Block.wrap([this.body]));
      args = [];
      o.classScope = func.makeScope(o.scope);
      this.hoistDirectivePrologue();
      this.setContext(name);
      this.walkBody(name, o);
      this.ensureConstructor(name);
      this.addBoundFunctions(o);
      this.body.spaced = true;
      this.body.expressions.push(lname);
      if (this.parent) {
        superClass = new Literal(o.classScope.freeVariable('superClass', {
          reserve: false
        }));
        this.body.expressions.unshift(new Extends(lname, superClass));
        func.params.push(new Param(superClass));
        args.push(this.parent);
      }
      (ref3 = this.body.expressions).unshift.apply(ref3, this.directives);
      klass = new Parens(new Call(func, args));
      if (this.variable) {
        klass = new Assign(this.variable, klass);
      }
      return klass.compileToFragments(o);
    };

    return Class;

  })(Base);

  exports.Assign = Assign = (function(superClass1) {
    extend1(Assign, superClass1);

    function Assign(variable1, value1, context, options) {
      var forbidden, name, ref3;
      this.variable = variable1;
      this.value = value1;
      this.context = context;
      if (options == null) {
        options = {};
      }
      this.param = options.param, this.subpattern = options.subpattern, this.operatorToken = options.operatorToken;
      forbidden = (ref3 = (name = this.variable.unwrapAll().value), indexOf.call(STRICT_PROSCRIBED, ref3) >= 0);
      if (forbidden && this.context !== 'object') {
        this.variable.error("variable name may not be \"" + name + "\"");
      }
    }

    Assign.prototype.children = ['variable', 'value'];

    Assign.prototype.isStatement = function(o) {
      return (o != null ? o.level : void 0) === LEVEL_TOP && (this.context != null) && indexOf.call(this.context, "?") >= 0;
    };

    Assign.prototype.assigns = function(name) {
      return this[this.context === 'object' ? 'value' : 'variable'].assigns(name);
    };

    Assign.prototype.unfoldSoak = function(o) {
      return unfoldSoak(o, this, 'variable');
    };

    Assign.prototype.compileNode = function(o) {
      var answer, compiledName, isValue, j, name, properties, prototype, ref3, ref4, ref5, ref6, ref7, val, varBase;
      this.icedStatementAssertion();
      if (isValue = this.variable instanceof Value) {
        if (this.variable.isArray() || this.variable.isObject()) {
          return this.compilePatternMatch(o);
        }
        if (this.variable.isSplice()) {
          return this.compileSplice(o);
        }
        if ((ref3 = this.context) === '||=' || ref3 === '&&=' || ref3 === '?=') {
          return this.compileConditional(o);
        }
        if ((ref4 = this.context) === '**=' || ref4 === '//=' || ref4 === '%%=') {
          return this.compileSpecialMath(o);
        }
      }
      if (this.value instanceof Code) {
        if (this.value["static"]) {
          this.value.klass = this.variable.base;
          this.value.name = this.variable.properties[0];
          this.value.variable = this.variable;
        } else if (((ref5 = this.variable.properties) != null ? ref5.length : void 0) >= 2) {
          ref6 = this.variable.properties, properties = 3 <= ref6.length ? slice.call(ref6, 0, j = ref6.length - 2) : (j = 0, []), prototype = ref6[j++], name = ref6[j++];
          if (((ref7 = prototype.name) != null ? ref7.value : void 0) === 'prototype') {
            this.value.klass = new Value(this.variable.base, properties);
            this.value.name = name;
            this.value.variable = this.variable;
          }
        }
      }
      if (!this.context) {
        varBase = this.variable.unwrapAll();
        if (!varBase.isAssignable()) {
          this.variable.error("\"" + (this.variable.compile(o)) + "\" cannot be assigned");
        }
        if (!(typeof varBase.hasProperties === "function" ? varBase.hasProperties() : void 0)) {
          if (this.param) {
            o.scope.add(varBase.value, 'var');
          } else {
            o.scope.find(varBase.value);
          }
        }
      }
      val = this.value.compileToFragments(o, LEVEL_LIST);
      if (isValue && this.variable.base instanceof Obj) {
        this.variable.front = true;
      }
      compiledName = this.variable.compileToFragments(o, LEVEL_LIST);
      if (this.context === 'object') {
        return compiledName.concat(this.makeCode(": "), val);
      }
      answer = compiledName.concat(this.makeCode(" " + (this.context || '=') + " "), val);
      if (o.level <= LEVEL_LIST) {
        return answer;
      } else {
        return this.wrapInBraces(answer);
      }
    };

    Assign.prototype.compilePatternMatch = function(o) {
      var acc, assigns, code, defaultValue, expandedIdx, fragments, i, idx, isObject, ivar, j, len1, name, obj, objects, olen, ref, ref3, ref4, ref5, ref6, ref7, rest, top, val, value, vvar, vvarText;
      top = o.level === LEVEL_TOP;
      value = this.value;
      objects = this.variable.base.objects;
      if (!(olen = objects.length)) {
        code = value.compileToFragments(o);
        if (o.level >= LEVEL_OP) {
          return this.wrapInBraces(code);
        } else {
          return code;
        }
      }
      obj = objects[0];
      if (olen === 1 && obj instanceof Expansion) {
        obj.error('Destructuring assignment has no target');
      }
      isObject = this.variable.isObject();
      if (top && olen === 1 && !(obj instanceof Splat)) {
        defaultValue = null;
        if (obj instanceof Assign && obj.context === 'object') {
          ref3 = obj, (ref4 = ref3.variable, idx = ref4.base), obj = ref3.value;
          if (obj instanceof Assign) {
            defaultValue = obj.value;
            obj = obj.variable;
          }
        } else {
          if (obj instanceof Assign) {
            defaultValue = obj.value;
            obj = obj.variable;
          }
          idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(0);
        }
        acc = IDENTIFIER.test(idx.unwrap().value);
        value = new Value(value);
        value.properties.push(new (acc ? Access : Index)(idx));
        if (ref5 = obj.unwrap().value, indexOf.call(RESERVED, ref5) >= 0) {
          obj.error("assignment to a reserved word: " + (obj.compile(o)));
        }
        if (defaultValue) {
          value = new Op('?', value, defaultValue);
        }
        return new Assign(obj, value, null, {
          param: this.param
        }).compileToFragments(o, LEVEL_TOP);
      }
      vvar = value.compileToFragments(o, LEVEL_LIST);
      vvarText = fragmentsToText(vvar);
      assigns = [];
      expandedIdx = false;
      if (!IDENTIFIER.test(vvarText) || this.variable.assigns(vvarText)) {
        assigns.push([this.makeCode((ref = o.scope.freeVariable('ref')) + " = ")].concat(slice.call(vvar)));
        vvar = [this.makeCode(ref)];
        vvarText = ref;
      }
      for (i = j = 0, len1 = objects.length; j < len1; i = ++j) {
        obj = objects[i];
        idx = i;
        if (!expandedIdx && obj instanceof Splat) {
          name = obj.name.unwrap().value;
          obj = obj.unwrap();
          val = olen + " <= " + vvarText + ".length ? " + (utility('slice', o)) + ".call(" + vvarText + ", " + i;
          if (rest = olen - i - 1) {
            ivar = o.scope.freeVariable('i', {
              single: true
            });
            val += ", " + ivar + " = " + vvarText + ".length - " + rest + ") : (" + ivar + " = " + i + ", [])";
          } else {
            val += ") : []";
          }
          val = new Literal(val);
          expandedIdx = ivar + "++";
        } else if (!expandedIdx && obj instanceof Expansion) {
          if (rest = olen - i - 1) {
            if (rest === 1) {
              expandedIdx = vvarText + ".length - 1";
            } else {
              ivar = o.scope.freeVariable('i', {
                single: true
              });
              val = new Literal(ivar + " = " + vvarText + ".length - " + rest);
              expandedIdx = ivar + "++";
              assigns.push(val.compileToFragments(o, LEVEL_LIST));
            }
          }
          continue;
        } else {
          if (obj instanceof Splat || obj instanceof Expansion) {
            obj.error("multiple splats/expansions are disallowed in an assignment");
          }
          defaultValue = null;
          if (obj instanceof Assign && obj.context === 'object') {
            ref6 = obj, (ref7 = ref6.variable, idx = ref7.base), obj = ref6.value;
            if (obj instanceof Assign) {
              defaultValue = obj.value;
              obj = obj.variable;
            }
          } else {
            if (obj instanceof Assign) {
              defaultValue = obj.value;
              obj = obj.variable;
            }
            idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(expandedIdx || idx);
          }
          name = obj.unwrap().value;
          acc = IDENTIFIER.test(idx.unwrap().value);
          val = new Value(new Literal(vvarText), [new (acc ? Access : Index)(idx)]);
          if (defaultValue) {
            val = new Op('?', val, defaultValue);
          }
        }
        if ((name != null) && indexOf.call(RESERVED, name) >= 0) {
          obj.error("assignment to a reserved word: " + (obj.compile(o)));
        }
        assigns.push(new Assign(obj, val, null, {
          param: this.param,
          subpattern: true
        }).compileToFragments(o, LEVEL_LIST));
      }
      if (!(top || this.subpattern)) {
        assigns.push(vvar);
      }
      fragments = this.joinFragmentArrays(assigns, ', ');
      if (o.level < LEVEL_LIST) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    Assign.prototype.compileConditional = function(o) {
      var fragments, left, ref3, right;
      ref3 = this.variable.cacheReference(o), left = ref3[0], right = ref3[1];
      if (!left.properties.length && left.base instanceof Literal && left.base.value !== "this" && !o.scope.check(left.base.value)) {
        this.variable.error("the variable \"" + left.base.value + "\" can't be assigned with " + this.context + " because it has not been declared before");
      }
      if (indexOf.call(this.context, "?") >= 0) {
        o.isExistentialEquals = true;
        return new If(new Existence(left), right, {
          type: 'if'
        }).addElse(new Assign(right, this.value, '=')).compileToFragments(o);
      } else {
        fragments = new Op(this.context.slice(0, -1), left, new Assign(right, this.value, '=')).compileToFragments(o);
        if (o.level <= LEVEL_LIST) {
          return fragments;
        } else {
          return this.wrapInBraces(fragments);
        }
      }
    };

    Assign.prototype.compileSpecialMath = function(o) {
      var left, ref3, right;
      ref3 = this.variable.cacheReference(o), left = ref3[0], right = ref3[1];
      return new Assign(left, new Op(this.context.slice(0, -1), right, this.value)).compileToFragments(o);
    };

    Assign.prototype.compileSplice = function(o) {
      var answer, exclusive, from, fromDecl, fromRef, name, ref3, ref4, ref5, to, valDef, valRef;
      ref3 = this.variable.properties.pop().range, from = ref3.from, to = ref3.to, exclusive = ref3.exclusive;
      name = this.variable.compile(o);
      if (from) {
        ref4 = this.cacheToCodeFragments(from.cache(o, LEVEL_OP)), fromDecl = ref4[0], fromRef = ref4[1];
      } else {
        fromDecl = fromRef = '0';
      }
      if (to) {
        if (from instanceof Value && from.isSimpleNumber() && to instanceof Value && to.isSimpleNumber()) {
          to = to.compile(o) - fromRef;
          if (!exclusive) {
            to += 1;
          }
        } else {
          to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef;
          if (!exclusive) {
            to += ' + 1';
          }
        }
      } else {
        to = "9e9";
      }
      ref5 = this.value.cache(o, LEVEL_LIST), valDef = ref5[0], valRef = ref5[1];
      answer = [].concat(this.makeCode("[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat("), valDef, this.makeCode(")), "), valRef);
      if (o.level > LEVEL_TOP) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    return Assign;

  })(Base);

  exports.Code = Code = (function(superClass1) {
    extend1(Code, superClass1);

    function Code(params, body, tag) {
      this.params = params || [];
      this.body = body || new Block;
      this.icedgen = tag === 'icedgen';
      this.bound = tag === 'boundfunc' || this.icedgen;
      this.isGenerator = !!this.body.contains(function(node) {
        return (node instanceof Op && node.isYield()) || node instanceof YieldReturn;
      });
    }

    Code.prototype.children = ['params', 'body'];

    Code.prototype.isStatement = function() {
      return !!this.ctor;
    };

    Code.prototype.jumps = NO;

    Code.prototype.makeScope = function(parentScope) {
      return new Scope(parentScope, this.body, this);
    };

    Code.prototype.compileNode = function(o) {
      var answer, arg_var, boundfunc, code, exprs, i, j, k, len1, len2, len3, len4, len5, len6, lit, m, p, param, params, q, r, ref, ref3, ref4, ref5, ref6, ref7, ref8, splats, t, uniqs, val, wasEmpty, wrapper;
      if (this.foundAutocb) {
        this.error('autocb is deprecated.');
      }
      if (this.bound && ((ref3 = o.scope.method) != null ? ref3.bound : void 0)) {
        this.context = o.scope.method.context;
      }
      if (this.icedFlag) {
        this.icedTransform();
      }
      if (this.bound && !this.context) {
        this.context = '_this';
        wrapper = new Code([new Param(new Literal(this.context))], new Block([this]));
        boundfunc = new Call(wrapper, [new Literal('this')]);
        boundfunc.updateLocationDataIfMissing(this.locationData);
        return boundfunc.compileNode(o);
      }
      o.scope = del(o, 'classScope') || this.makeScope(o.scope);
      o.scope.shared = del(o, 'sharedScope') || this.icedgen;
      o.scope.icedgen = this.icedgen;
      if (this.icedUseArguments) {
        o.scope.icedUseArguments = this.icedUseArguments;
      }
      o.indent += TAB;
      delete o.bare;
      delete o.isExistentialEquals;
      params = [];
      exprs = [];
      ref4 = this.params;
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        param = ref4[j];
        if (!(param instanceof Expansion)) {
          o.scope.parameter(param.asReference(o));
        }
      }
      ref5 = this.params;
      for (k = 0, len2 = ref5.length; k < len2; k++) {
        param = ref5[k];
        if (!(param.splat || param instanceof Expansion)) {
          continue;
        }
        ref6 = this.params;
        for (m = 0, len3 = ref6.length; m < len3; m++) {
          p = ref6[m];
          if (!(p instanceof Expansion) && p.name.value) {
            o.scope.add(p.name.value, 'var', true);
          }
        }
        splats = new Assign(new Value(new Arr((function() {
          var len4, q, ref7, results;
          ref7 = this.params;
          results = [];
          for (q = 0, len4 = ref7.length; q < len4; q++) {
            p = ref7[q];
            results.push(p.asReference(o));
          }
          return results;
        }).call(this))), new Value(new Literal('arguments')));
        break;
      }
      ref7 = this.params;
      for (q = 0, len4 = ref7.length; q < len4; q++) {
        param = ref7[q];
        if (param.isComplex()) {
          val = ref = param.asReference(o);
          if (param.value) {
            val = new Op('?', ref, param.value);
          }
          exprs.push(new Assign(new Value(param.name), val, '=', {
            param: true
          }));
        } else {
          ref = param;
          if (param.value) {
            lit = new Literal(ref.name.value + ' == null');
            val = new Assign(new Value(param.name), param.value, '=');
            exprs.push(new If(lit, val));
          }
        }
        if (!splats) {
          params.push(ref);
        }
      }
      wasEmpty = this.body.isEmpty();
      if (splats) {
        exprs.unshift(splats);
      }
      if (exprs.length) {
        (ref8 = this.body.expressions).unshift.apply(ref8, exprs);
      }
      for (i = r = 0, len5 = params.length; r < len5; i = ++r) {
        p = params[i];
        params[i] = p.compileToFragments(o);
        o.scope.parameter(fragmentsToText(params[i]));
      }
      uniqs = [];
      this.eachParamName(function(name, node) {
        if (indexOf.call(uniqs, name) >= 0) {
          node.error("multiple parameters named " + name);
        }
        return uniqs.push(name);
      });
      if (!(wasEmpty || this.noReturn)) {
        this.body.makeReturn();
      }
      if (this.icedSaveArguments) {
        arg_var = o.scope.freeVariable('_arguments');
        o.scope.icedArgumentsVar = arg_var;
        this.body.expressions.unshift(new Assign(new Literal(arg_var), new Literal('arguments')));
      }
      code = 'function';
      if (this.isGenerator) {
        code += '*';
      }
      if (this.ctor) {
        code += ' ' + this.name;
      }
      code += '(';
      answer = [this.makeCode(code)];
      for (i = t = 0, len6 = params.length; t < len6; i = ++t) {
        p = params[i];
        if (i) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, p);
      }
      answer.push(this.makeCode(') {'));
      if (!this.body.isEmpty()) {
        answer = answer.concat(this.makeCode("\n"), this.body.compileWithDeclarations(o), this.makeCode("\n" + this.tab));
      }
      answer.push(this.makeCode('}'));
      if (this.ctor) {
        return [this.makeCode(this.tab)].concat(slice.call(answer));
      }
      if (this.front || (o.level >= LEVEL_ACCESS)) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Code.prototype.eachParamName = function(iterator) {
      var j, len1, param, ref3, results;
      ref3 = this.params;
      results = [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        param = ref3[j];
        results.push(param.eachName(iterator));
      }
      return results;
    };

    Code.prototype.traverseChildren = function(crossScope, func) {
      if (crossScope) {
        return Code.__super__.traverseChildren.call(this, crossScope, func);
      }
    };

    Code.prototype.icedTransform = function() {
      var body, call, code, f, nxt, rhs;
      if (this.isGenerator) {
        this.error("Methods with `await` cannot be generators");
      }
      this.icedFlag = false;
      this.icedPassedDeferral = new Value(new Literal(iced["const"].passed_deferral));
      this.icedIterator = new Value(new Literal(iced["const"].iterator));
      body = [];
      f = new Value(new Literal(iced["const"].ns));
      f.add(new Access(new Value(new Literal(iced["const"].findDeferral))));
      rhs = new Call(f, [new Value(new Literal('arguments'))]);
      body.push(new Assign(this.icedPassedDeferral, rhs, null, {
        param: true
      }));
      code = new Code([], new Block([this.body]), 'icedgen');
      code.isGenerator = true;
      if (this.icedFoundArguments) {
        this.icedSaveArguments = true;
        code.icedUseArguments = true;
      }
      rhs = new Call(code, []);
      body.push(new Assign(this.icedIterator, rhs, null, {
        param: true
      }));
      nxt = this.icedIterator.copy();
      nxt.add(new Access(new Value(new Literal("next"))));
      call = new Call(nxt, []);
      body.push(call);
      return this.body = Block.wrap(body);
    };

    Code.prototype.icedWalkAst = function(o) {
      var j, len1, o_new, param, ref3;
      o_new = {
        func: this
      };
      Code.__super__.icedWalkAst.call(this, o_new);
      o.awaitInFile = o.awaitInFile || o_new.awaitInFile;
      o.deferInFile = o.deferInFile || o_new.deferInFile;
      this.icedFlag = o_new.awaitInFunc;
      this.icedFoundArguments = o.foundArguments || o_new.foundArguments;
      ref3 = this.params;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        param = ref3[j];
        if (param.name instanceof Literal && param.name.value === iced["const"].autocb) {
          this.foundAutocb = true;
          break;
        }
      }
      return this;
    };

    Code.prototype.icedTraceName = function() {
      var n, parts, ref3, ref4, ref5, ref6;
      parts = [];
      if ((n = (ref3 = this.klass) != null ? (ref4 = ref3.base) != null ? ref4.value : void 0 : void 0) != null) {
        parts.push(n);
      }
      if ((n = (ref5 = this.name) != null ? (ref6 = ref5.name) != null ? ref6.value : void 0 : void 0) != null) {
        parts.push(n);
      }
      return parts.join('.');
    };

    return Code;

  })(Base);

  exports.Param = Param = (function(superClass1) {
    extend1(Param, superClass1);

    function Param(name1, value1, splat1) {
      var name, ref3, token;
      this.name = name1;
      this.value = value1;
      this.splat = splat1;
      if (ref3 = (name = this.name.unwrapAll().value), indexOf.call(STRICT_PROSCRIBED, ref3) >= 0) {
        this.name.error("parameter name \"" + name + "\" is not allowed");
      }
      if (this.name instanceof Obj && this.name.generated) {
        token = this.name.objects[0].operatorToken;
        token.error("unexpected " + token.value);
      }
    }

    Param.prototype.children = ['name', 'value'];

    Param.prototype.compileToFragments = function(o) {
      return this.name.compileToFragments(o, LEVEL_LIST);
    };

    Param.prototype.asReference = function(o) {
      var name, node;
      if (this.reference) {
        return this.reference;
      }
      node = this.name;
      if (node["this"]) {
        name = node.properties[0].name.value;
        if (name.reserved) {
          name = "_" + name;
        }
        node = new Literal(o.scope.freeVariable(name));
      } else if (node.isComplex()) {
        node = new Literal(o.scope.freeVariable('arg'));
      }
      node = new Value(node);
      if (this.splat) {
        node = new Splat(node);
      }
      node.updateLocationDataIfMissing(this.locationData);
      return this.reference = node;
    };

    Param.prototype.isComplex = function() {
      return this.name.isComplex();
    };

    Param.prototype.eachName = function(iterator, name) {
      var atParam, j, len1, node, obj, ref3;
      if (name == null) {
        name = this.name;
      }
      atParam = function(obj) {
        return iterator("@" + obj.properties[0].name.value, obj);
      };
      if (name instanceof Literal) {
        return iterator(name.value, name);
      }
      if (name instanceof Value) {
        return atParam(name);
      }
      ref3 = name.objects;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        obj = ref3[j];
        if (obj instanceof Assign && (obj.context == null)) {
          obj = obj.variable;
        }
        if (obj instanceof Assign) {
          if (obj.value instanceof Assign) {
            obj = obj.value;
          }
          this.eachName(iterator, obj.value.unwrap());
        } else if (obj instanceof Splat) {
          node = obj.name.unwrap();
          iterator(node.value, node);
        } else if (obj instanceof Value) {
          if (obj.isArray() || obj.isObject()) {
            this.eachName(iterator, obj.base);
          } else if (obj["this"]) {
            atParam(obj);
          } else {
            iterator(obj.base.value, obj.base);
          }
        } else if (!(obj instanceof Expansion)) {
          obj.error("illegal parameter " + (obj.compile()));
        }
      }
    };

    return Param;

  })(Base);

  exports.Splat = Splat = (function(superClass1) {
    extend1(Splat, superClass1);

    Splat.prototype.children = ['name'];

    Splat.prototype.isAssignable = YES;

    function Splat(name) {
      this.name = name.compile ? name : new Literal(name);
    }

    Splat.prototype.assigns = function(name) {
      return this.name.assigns(name);
    };

    Splat.prototype.compileToFragments = function(o) {
      return this.name.compileToFragments(o);
    };

    Splat.prototype.unwrap = function() {
      return this.name;
    };

    Splat.compileSplattedArray = function(o, list, apply) {
      var args, base, compiledNode, concatPart, fragments, i, index, j, last, len1, node;
      index = -1;
      while ((node = list[++index]) && !(node instanceof Splat)) {
        continue;
      }
      if (index >= list.length) {
        return [];
      }
      if (list.length === 1) {
        node = list[0];
        fragments = node.compileToFragments(o, LEVEL_LIST);
        if (apply) {
          return fragments;
        }
        return [].concat(node.makeCode((utility('slice', o)) + ".call("), fragments, node.makeCode(")"));
      }
      args = list.slice(index);
      for (i = j = 0, len1 = args.length; j < len1; i = ++j) {
        node = args[i];
        compiledNode = node.compileToFragments(o, LEVEL_LIST);
        args[i] = node instanceof Splat ? [].concat(node.makeCode((utility('slice', o)) + ".call("), compiledNode, node.makeCode(")")) : [].concat(node.makeCode("["), compiledNode, node.makeCode("]"));
      }
      if (index === 0) {
        node = list[0];
        concatPart = node.joinFragmentArrays(args.slice(1), ', ');
        return args[0].concat(node.makeCode(".concat("), concatPart, node.makeCode(")"));
      }
      base = (function() {
        var k, len2, ref3, results;
        ref3 = list.slice(0, index);
        results = [];
        for (k = 0, len2 = ref3.length; k < len2; k++) {
          node = ref3[k];
          results.push(node.compileToFragments(o, LEVEL_LIST));
        }
        return results;
      })();
      base = list[0].joinFragmentArrays(base, ', ');
      concatPart = list[index].joinFragmentArrays(args, ', ');
      last = list[list.length - 1];
      return [].concat(list[0].makeCode("["), base, list[index].makeCode("].concat("), concatPart, last.makeCode(")"));
    };

    Splat.prototype.icedToSlot = function(i) {
      return new Slot(i, new Value(this.name), null, true);
    };

    return Splat;

  })(Base);

  exports.Expansion = Expansion = (function(superClass1) {
    extend1(Expansion, superClass1);

    function Expansion() {
      return Expansion.__super__.constructor.apply(this, arguments);
    }

    Expansion.prototype.isComplex = NO;

    Expansion.prototype.compileNode = function(o) {
      return this.error('Expansion must be used inside a destructuring assignment or parameter list');
    };

    Expansion.prototype.asReference = function(o) {
      return this;
    };

    Expansion.prototype.eachName = function(iterator) {};

    return Expansion;

  })(Base);

  exports.While = While = (function(superClass1) {
    extend1(While, superClass1);

    function While(condition, options) {
      this.condition = (options != null ? options.invert : void 0) ? condition.invert() : condition;
      this.guard = options != null ? options.guard : void 0;
    }

    While.prototype.children = ['condition', 'guard', 'body'];

    While.prototype.isStatement = YES;

    While.prototype.makeReturn = function(res) {
      if (res) {
        return While.__super__.makeReturn.apply(this, arguments);
      } else {
        this.returns = !this.jumps({
          loop: true
        });
        return this;
      }
    };

    While.prototype.addBody = function(body1) {
      this.body = body1;
      return this;
    };

    While.prototype.jumps = function() {
      var expressions, j, jumpNode, len1, node;
      expressions = this.body.expressions;
      if (!expressions.length) {
        return false;
      }
      for (j = 0, len1 = expressions.length; j < len1; j++) {
        node = expressions[j];
        if (jumpNode = node.jumps({
          loop: true
        })) {
          return jumpNode;
        }
      }
      return false;
    };

    While.prototype.compileNode = function(o) {
      var answer, body, rvar, set;
      this.condition.icedStatementAssertion();
      o.indent += TAB;
      set = '';
      body = this.body;
      if (body.isEmpty()) {
        body = this.makeCode('');
      } else {
        if (this.returns) {
          body.makeReturn(rvar = o.scope.freeVariable('results'));
          set = "" + this.tab + rvar + " = [];\n";
        }
        if (this.guard) {
          if (body.expressions.length > 1) {
            body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
          } else {
            if (this.guard) {
              body = Block.wrap([new If(this.guard, body)]);
            }
          }
        }
        body = [].concat(this.makeCode("\n"), body.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab));
      }
      answer = [].concat(this.makeCode(set + this.tab + "while ("), this.condition.compileToFragments(o, LEVEL_PAREN), this.makeCode(") {"), body, this.makeCode("}"));
      if (this.returns) {
        answer.push(this.makeCode("\n" + this.tab + "return " + rvar + ";"));
      }
      return answer;
    };

    return While;

  })(Base);

  exports.Op = Op = (function(superClass1) {
    var CONVERSIONS, INVERSIONS;

    extend1(Op, superClass1);

    function Op(op, first, second, flip) {
      if (op === 'in') {
        return new In(first, second);
      }
      if (op === 'do') {
        return this.generateDo(first);
      }
      if (op === 'new') {
        if (first instanceof Call && !first["do"] && !first.isNew) {
          return first.newInstance();
        }
        if (first instanceof Code && first.bound || first["do"]) {
          first = new Parens(first);
        }
      }
      this.operator = CONVERSIONS[op] || op;
      this.first = first;
      this.second = second;
      this.flip = !!flip;
      return this;
    }

    CONVERSIONS = {
      '==': '===',
      '!=': '!==',
      'of': 'in',
      'yieldfrom': 'yield*'
    };

    INVERSIONS = {
      '!==': '===',
      '===': '!=='
    };

    Op.prototype.children = ['first', 'second'];

    Op.prototype.isSimpleNumber = NO;

    Op.prototype.isYield = function() {
      var ref3;
      return (ref3 = this.operator) === 'yield' || ref3 === 'yield*';
    };

    Op.prototype.isUnary = function() {
      return !this.second;
    };

    Op.prototype.isComplex = function() {
      var ref3;
      return !(this.isUnary() && ((ref3 = this.operator) === '+' || ref3 === '-') && this.first instanceof Value && this.first.isSimpleNumber());
    };

    Op.prototype.isChainable = function() {
      var ref3;
      return (ref3 = this.operator) === '<' || ref3 === '>' || ref3 === '>=' || ref3 === '<=' || ref3 === '===' || ref3 === '!==';
    };

    Op.prototype.invert = function() {
      var allInvertable, curr, fst, op, ref3;
      if (this.isChainable() && this.first.isChainable()) {
        allInvertable = true;
        curr = this;
        while (curr && curr.operator) {
          allInvertable && (allInvertable = curr.operator in INVERSIONS);
          curr = curr.first;
        }
        if (!allInvertable) {
          return new Parens(this).invert();
        }
        curr = this;
        while (curr && curr.operator) {
          curr.invert = !curr.invert;
          curr.operator = INVERSIONS[curr.operator];
          curr = curr.first;
        }
        return this;
      } else if (op = INVERSIONS[this.operator]) {
        this.operator = op;
        if (this.first.unwrap() instanceof Op) {
          this.first.invert();
        }
        return this;
      } else if (this.second) {
        return new Parens(this).invert();
      } else if (this.operator === '!' && (fst = this.first.unwrap()) instanceof Op && ((ref3 = fst.operator) === '!' || ref3 === 'in' || ref3 === 'instanceof')) {
        return fst;
      } else {
        return new Op('!', this);
      }
    };

    Op.prototype.unfoldSoak = function(o) {
      var ref3;
      return ((ref3 = this.operator) === '++' || ref3 === '--' || ref3 === 'delete') && unfoldSoak(o, this, 'first');
    };

    Op.prototype.generateDo = function(exp) {
      var call, func, j, len1, param, passedParams, ref, ref3;
      passedParams = [];
      func = exp instanceof Assign && (ref = exp.value.unwrap()) instanceof Code ? ref : exp;
      ref3 = func.params || [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        param = ref3[j];
        if (param.value) {
          passedParams.push(param.value);
          delete param.value;
        } else {
          passedParams.push(param);
        }
      }
      call = new Call(exp, passedParams);
      call["do"] = true;
      return call;
    };

    Op.prototype.compileNode = function(o) {
      var answer, isChain, lhs, ref3, ref4, rhs;
      isChain = this.isChainable() && this.first.isChainable();
      if (!isChain) {
        this.first.front = this.front;
      }
      if (this.operator === 'delete' && o.scope.check(this.first.unwrapAll().value)) {
        this.error('delete operand may not be argument or var');
      }
      if (((ref3 = this.operator) === '--' || ref3 === '++') && (ref4 = this.first.unwrapAll().value, indexOf.call(STRICT_PROSCRIBED, ref4) >= 0)) {
        this.error("cannot increment/decrement \"" + (this.first.unwrapAll().value) + "\"");
      }
      if (this.isYield()) {
        return this.compileYield(o);
      }
      if (this.isUnary()) {
        return this.compileUnary(o);
      }
      if (isChain) {
        return this.compileChain(o);
      }
      switch (this.operator) {
        case '?':
          return this.compileExistence(o);
        case '**':
          return this.compilePower(o);
        case '//':
          return this.compileFloorDivision(o);
        case '%%':
          return this.compileModulo(o);
        default:
          lhs = this.first.compileToFragments(o, LEVEL_OP);
          rhs = this.second.compileToFragments(o, LEVEL_OP);
          answer = [].concat(lhs, this.makeCode(" " + this.operator + " "), rhs);
          if (o.level <= LEVEL_OP) {
            return answer;
          } else {
            return this.wrapInBraces(answer);
          }
      }
    };

    Op.prototype.compileChain = function(o) {
      var fragments, fst, ref3, shared;
      ref3 = this.first.second.cache(o), this.first.second = ref3[0], shared = ref3[1];
      fst = this.first.compileToFragments(o, LEVEL_OP);
      fragments = fst.concat(this.makeCode(" " + (this.invert ? '&&' : '||') + " "), shared.compileToFragments(o), this.makeCode(" " + this.operator + " "), this.second.compileToFragments(o, LEVEL_OP));
      return this.wrapInBraces(fragments);
    };

    Op.prototype.compileExistence = function(o) {
      var fst, ref;
      if (this.first.isComplex()) {
        ref = new Literal(o.scope.freeVariable('ref'));
        fst = new Parens(new Assign(ref, this.first));
      } else {
        fst = this.first;
        ref = fst;
      }
      return new If(new Existence(fst), ref, {
        type: 'if'
      }).addElse(this.second).compileToFragments(o);
    };

    Op.prototype.compileUnary = function(o) {
      var op, parts, plusMinus;
      parts = [];
      op = this.operator;
      parts.push([this.makeCode(op)]);
      if (op === '!' && this.first instanceof Existence) {
        this.first.negated = !this.first.negated;
        return this.first.compileToFragments(o);
      }
      if (o.level >= LEVEL_ACCESS) {
        return (new Parens(this)).compileToFragments(o);
      }
      plusMinus = op === '+' || op === '-';
      if ((op === 'new' || op === 'typeof' || op === 'delete') || plusMinus && this.first instanceof Op && this.first.operator === op) {
        parts.push([this.makeCode(' ')]);
      }
      if ((plusMinus && this.first instanceof Op) || (op === 'new' && this.first.isStatement(o))) {
        this.first = new Parens(this.first);
      }
      parts.push(this.first.compileToFragments(o, LEVEL_OP));
      if (this.flip) {
        parts.reverse();
      }
      return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.compileYield = function(o) {
      var op, parts, ref3;
      parts = [];
      op = this.operator;
      if (o.scope.parent == null) {
        this.error('yield can only occur inside functions');
      }
      if (indexOf.call(Object.keys(this.first), 'expression') >= 0 && !(this.first instanceof Throw)) {
        if (this.first.expression != null) {
          parts.push(this.first.expression.compileToFragments(o, LEVEL_OP));
        }
      } else {
        if (o.level >= LEVEL_PAREN) {
          parts.push([this.makeCode("(")]);
        }
        parts.push([this.makeCode(op)]);
        if (((ref3 = this.first.base) != null ? ref3.value : void 0) !== '') {
          parts.push([this.makeCode(" ")]);
        }
        parts.push(this.first.compileToFragments(o, LEVEL_OP));
        if (o.level >= LEVEL_PAREN) {
          parts.push([this.makeCode(")")]);
        }
      }
      return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.compilePower = function(o) {
      var pow;
      pow = new Value(new Literal('Math'), [new Access(new Literal('pow'))]);
      return new Call(pow, [this.first, this.second]).compileToFragments(o);
    };

    Op.prototype.compileFloorDivision = function(o) {
      var div, floor;
      floor = new Value(new Literal('Math'), [new Access(new Literal('floor'))]);
      div = new Op('/', this.first, this.second);
      return new Call(floor, [div]).compileToFragments(o);
    };

    Op.prototype.compileModulo = function(o) {
      var mod;
      mod = new Value(new Literal(utility('modulo', o)));
      return new Call(mod, [this.first, this.second]).compileToFragments(o);
    };

    Op.prototype.toString = function(idt) {
      return Op.__super__.toString.call(this, idt, this.constructor.name + ' ' + this.operator);
    };

    return Op;

  })(Base);

  exports.In = In = (function(superClass1) {
    extend1(In, superClass1);

    function In(object, array) {
      this.object = object;
      this.array = array;
    }

    In.prototype.children = ['object', 'array'];

    In.prototype.invert = NEGATE;

    In.prototype.compileNode = function(o) {
      var hasSplat, j, len1, obj, ref3;
      if (this.array instanceof Value && this.array.isArray() && this.array.base.objects.length) {
        ref3 = this.array.base.objects;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          obj = ref3[j];
          if (!(obj instanceof Splat)) {
            continue;
          }
          hasSplat = true;
          break;
        }
        if (!hasSplat) {
          return this.compileOrTest(o);
        }
      }
      return this.compileLoopTest(o);
    };

    In.prototype.compileOrTest = function(o) {
      var cmp, cnj, i, item, j, len1, ref, ref3, ref4, ref5, sub, tests;
      ref3 = this.object.cache(o, LEVEL_OP), sub = ref3[0], ref = ref3[1];
      ref4 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = ref4[0], cnj = ref4[1];
      tests = [];
      ref5 = this.array.base.objects;
      for (i = j = 0, len1 = ref5.length; j < len1; i = ++j) {
        item = ref5[i];
        if (i) {
          tests.push(this.makeCode(cnj));
        }
        tests = tests.concat((i ? ref : sub), this.makeCode(cmp), item.compileToFragments(o, LEVEL_ACCESS));
      }
      if (o.level < LEVEL_OP) {
        return tests;
      } else {
        return this.wrapInBraces(tests);
      }
    };

    In.prototype.compileLoopTest = function(o) {
      var fragments, ref, ref3, sub;
      ref3 = this.object.cache(o, LEVEL_LIST), sub = ref3[0], ref = ref3[1];
      fragments = [].concat(this.makeCode(utility('indexOf', o) + ".call("), this.array.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), ref, this.makeCode(") " + (this.negated ? '< 0' : '>= 0')));
      if (fragmentsToText(sub) === fragmentsToText(ref)) {
        return fragments;
      }
      fragments = sub.concat(this.makeCode(', '), fragments);
      if (o.level < LEVEL_LIST) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    In.prototype.toString = function(idt) {
      return In.__super__.toString.call(this, idt, this.constructor.name + (this.negated ? '!' : ''));
    };

    return In;

  })(Base);

  exports.Slot = Slot = (function(superClass1) {
    extend1(Slot, superClass1);

    function Slot(index, value, suffix, splat) {
      Slot.__super__.constructor.call(this);
      this.index = index;
      this.value = value;
      this.suffix = suffix;
      this.splat = splat;
      this.access = null;
    }

    Slot.prototype.addAccess = function(a) {
      this.access = a;
      return this;
    };

    Slot.prototype.children = ['value', 'suffix'];

    return Slot;

  })(Base);

  exports.Defer = Defer = (function(superClass1) {
    extend1(Defer, superClass1);

    function Defer(args, lineno) {
      var a, i;
      this.lineno = lineno;
      Defer.__super__.constructor.call(this);
      this.slots = flatten((function() {
        var j, len1, results;
        results = [];
        for (i = j = 0, len1 = args.length; j < len1; i = ++j) {
          a = args[i];
          results.push(a.icedToSlot(i));
        }
        return results;
      })());
      this.params = [];
      this.vars = [];
      this.custom = false;
    }

    Defer.prototype.children = ['slots'];

    Defer.prototype.setCustom = function() {
      this.custom = true;
      return this;
    };

    Defer.prototype.newParam = function() {
      var l;
      l = iced["const"].slot + "_" + (this.params.length + 1);
      this.params.push(new Param(new Literal(l)));
      return new Value(new Literal(l));
    };

    Defer.prototype.makeAssignFn = function(o) {
      var a, args, assign, assignments, block, call, func, i, i_lit, inner_fn, j, len1, outer_block, outer_fn, prop, ref3, s, slot;
      if (this.slots.length === 0) {
        return null;
      }
      assignments = [];
      args = [];
      i = 0;
      ref3 = this.slots;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        s = ref3[j];
        i = s.index;
        a = new Value(new Literal("arguments"));
        i_lit = new Value(new Literal(i));
        if (s.splat) {
          func = new Value(new Literal(utility('slice', o)));
          func.add(new Access(new Value(new Literal('call'))));
          call = new Call(func, [a, i_lit]);
          slot = s.value;
          this.vars.push(slot);
          assign = new Assign(slot, call);
        } else {
          a.add(new Index(i_lit));
          if (s.access) {
            a.add(s.access);
          }
          if (!s.suffix) {
            slot = s.value;
            this.vars.push(slot);
          } else {
            args.push(s.value);
            slot = this.newParam();
            if (s.suffix instanceof Index) {
              prop = new Index(this.newParam());
              args.push(s.suffix.index);
            } else {
              prop = s.suffix;
            }
            slot.add(prop);
          }
          assign = new Assign(slot, a);
        }
        assignments.push(assign);
      }
      block = new Block(assignments);
      inner_fn = new Code([], block, 'icedgen');
      outer_block = new Block([new Return(inner_fn)]);
      outer_fn = new Code(this.params, outer_block, 'icedgen');
      return call = new Call(outer_fn, args);
    };

    Defer.prototype.transform = function(o) {
      var assign_fn, assignments, context_assign, context_lhs, context_rhs, fn, ln_assign, ln_lhs, ln_rhs, meth, parent;
      meth = new Value(new Literal(iced["const"].defer_method));
      if (this.custom) {
        fn = meth;
      } else if ((parent = this.icedParentAwait) != null) {
        fn = parent.icedDeferrals.copy();
        fn.add(new Access(meth));
      } else {
        this.error("defer() without parent await or Rendezvous");
      }
      assignments = [];
      if ((assign_fn = this.makeAssignFn(o))) {
        assignments.push(new Assign(new Value(new Literal(iced["const"].assign_fn)), assign_fn, "object"));
      }
      ln_lhs = new Value(new Literal(iced["const"].lineno));
      ln_rhs = new Value(new Literal(this.lineno));
      ln_assign = new Assign(ln_lhs, ln_rhs, "object");
      assignments.push(ln_assign);
      if (this.custom) {
        context_lhs = new Value(new Literal(iced["const"].context));
        context_rhs = new Value(new Literal(iced["const"].deferrals));
        context_assign = new Assign(context_lhs, context_rhs, "object");
        assignments.push(context_assign);
      }
      o = new Obj(assignments);
      return new Call(fn, [new Value(o)]);
    };

    Defer.prototype.compileNode = function(o) {
      var call, j, len1, name, ref3, scope, v;
      call = this.transform(o);
      ref3 = this.vars;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        v = ref3[j];
        name = v.compile(o, LEVEL_LIST);
        scope = o.scope;
        scope.find(name, 'var');
      }
      return call.compileNode(o);
    };

    Defer.prototype.icedWalkAst = function(o) {
      Defer.__super__.icedWalkAst.call(this, o);
      o.deferInFile = true;
      return this.icedParentAwait = o.await;
    };

    return Defer;

  })(Base);

  quote_funcname_for_debug = function(n) {
    return '"' + n.replace(/["']/g, '') + '"';
  };

  quote_path_for_emission = function(n) {
    return '"' + n.replace(/\\/g, '\\\\') + '"';
  };

  require_top_dir = function() {
    return quote_path_for_emission(pathmod.join(__dirname, "..", ".."));
  };

  exports.Await = Await = (function(superClass1) {
    extend1(Await, superClass1);

    function Await(body1) {
      this.body = body1;
      Await.__super__.constructor.call(this);
    }

    Await.prototype.transform = function(o) {
      var assign, assignments, body, call, cb_assignment, cb_lhs, cb_rhs, cls, fn_assignment, fn_lhs, fn_rhs, func_assignment, func_lhs, func_rhs, lhs, meth, n, name, ref3, ref4, rhs, trace;
      body = this.body;
      name = o.scope.freeVariable(iced["const"].deferrals);
      this.icedDeferrals = lhs = new Value(new Literal(name));
      cls = new Value(new Literal(iced["const"].ns));
      cls.add(new Access(new Value(new Literal(iced["const"].Deferrals))));
      assignments = [];
      if (n = (ref3 = this.icedParentFunc) != null ? ref3.icedPassedDeferral : void 0) {
        cb_lhs = new Value(new Literal(iced["const"].parent));
        cb_rhs = n;
        cb_assignment = new Assign(cb_lhs, cb_rhs, "object");
        assignments.push(cb_assignment);
      }
      if (n = (ref4 = this.icedParentFunc) != null ? ref4.icedTraceName() : void 0) {
        func_lhs = new Value(new Literal(iced["const"].funcname));
        func_rhs = new Value(new Literal(quote_funcname_for_debug(n)));
        func_assignment = new Assign(func_lhs, func_rhs, "object");
        assignments.push(func_assignment);
      }
      if (o.filename) {
        fn_lhs = new Value(new Literal(iced["const"].filename));
        fn_rhs = new Value(new Literal(quote_path_for_emission(o.filename)));
        fn_assignment = new Assign(fn_lhs, fn_rhs, "object");
        assignments.push(fn_assignment);
      }
      trace = new Obj(assignments, true);
      call = new Call(cls, [this.icedParentFunc.icedIterator, trace]);
      rhs = new Op("new", call);
      assign = new Assign(lhs, rhs);
      body.unshift(assign);
      meth = lhs.copy().add(new Access(new Value(new Literal(iced["const"].await_exit))));
      body.push(new If(new Call(meth, []), new Block([new Literal('yield')])));
      return body;
    };

    Await.prototype.children = ['body'];

    Await.prototype.isStatement = YES;

    Await.prototype.makeReturn = THIS;

    Await.prototype.compileNode = function(o) {
      return this.transform(o).compileNode(o);
    };

    Await.prototype.icedWalkAst = function(o) {
      if (o.await != null) {
        this.error("Can't have nested await blocks");
      }
      o.await = this;
      Await.__super__.icedWalkAst.call(this, o);
      o.await = null;
      o.awaitInFile = o.awaitInFunc = true;
      return this.icedParentFunc = o.func;
    };

    return Await;

  })(Base);

  IcedRuntime = (function(superClass1) {
    extend1(IcedRuntime, superClass1);

    function IcedRuntime(foundDefer, foundAwait) {
      this.foundDefer = foundDefer;
      this.foundAwait = foundAwait;
      IcedRuntime.__super__.constructor.call(this);
    }

    IcedRuntime.prototype.compileNode = function(o, level) {
      var access, accessname, call, callv, file, inc, interp, ns, qmodname, req, v;
      this.expressions = [];
      v = o.runtime ? o.runtime : o.bare ? "none" : this.foundDefer ? "node" : "none";
      if (o.runtime && !this.foundDefer && !o.runforce) {
        v = "none";
      }
      switch (v) {
        case "inline":
          return this.makeCode(this.inlineRuntime('var iced'));
        case "window":
          return this.makeCode(this.inlineRuntime('window.iced'));
      }
      inc = null;
      inc = (function() {
        switch (v) {
          case "node":
          case "browserify":
          case "interp":
            interp = v === "interp";
            qmodname = interp ? require_top_dir() : "'iced-runtime-3'";
            accessname = iced["const"].ns;
            file = new Literal(qmodname);
            access = new Access(new Literal(accessname));
            req = new Value(new Literal("require"));
            call = new Call(req, [file]);
            callv = new Value(call);
            if (interp) {
              callv.add(access);
            }
            ns = new Value(new Literal(iced["const"].ns));
            return new Assign(ns, callv);
          case "none":
            return null;
          default:
            return this.error("unexpected flag IcedRuntime " + v);
        }
      }).call(this);
      if (inc) {
        this.push(inc);
      }
      if (this.isEmpty()) {
        return [];
      } else {
        return IcedRuntime.__super__.compileNode.call(this, o);
      }
    };

    IcedRuntime.prototype.inlineRuntime = function(lefthand) {
      return lefthand + " = " + (require('./inline-runtime-str')) + ";\n";
    };

    return IcedRuntime;

  })(Block);

  exports.Try = Try = (function(superClass1) {
    extend1(Try, superClass1);

    function Try(attempt, errorVariable, recovery, ensure) {
      this.attempt = attempt;
      this.errorVariable = errorVariable;
      this.recovery = recovery;
      this.ensure = ensure;
    }

    Try.prototype.children = ['attempt', 'recovery', 'ensure'];

    Try.prototype.isStatement = YES;

    Try.prototype.jumps = function(o) {
      var ref3;
      return this.attempt.jumps(o) || ((ref3 = this.recovery) != null ? ref3.jumps(o) : void 0);
    };

    Try.prototype.makeReturn = function(res) {
      if (this.attempt) {
        this.attempt = this.attempt.makeReturn(res);
      }
      if (this.recovery) {
        this.recovery = this.recovery.makeReturn(res);
      }
      return this;
    };

    Try.prototype.compileNode = function(o) {
      var catchPart, ensurePart, generatedErrorVariableName, placeholder, tryPart;
      o.indent += TAB;
      tryPart = this.attempt.compileToFragments(o, LEVEL_TOP);
      catchPart = this.recovery ? (generatedErrorVariableName = o.scope.freeVariable('error', {
        reserve: false
      }), placeholder = new Literal(generatedErrorVariableName), this.errorVariable ? this.recovery.unshift(new Assign(this.errorVariable, placeholder)) : void 0, [].concat(this.makeCode(" catch ("), placeholder.compileToFragments(o), this.makeCode(") {\n"), this.recovery.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}"))) : !(this.ensure || this.recovery) ? [this.makeCode(" catch (" + generatedErrorVariableName + ") {}")] : [];
      ensurePart = this.ensure ? [].concat(this.makeCode(" finally {\n"), this.ensure.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}")) : [];
      return [].concat(this.makeCode(this.tab + "try {\n"), tryPart, this.makeCode("\n" + this.tab + "}"), catchPart, ensurePart);
    };

    return Try;

  })(Base);

  exports.Throw = Throw = (function(superClass1) {
    extend1(Throw, superClass1);

    function Throw(expression) {
      this.expression = expression;
    }

    Throw.prototype.children = ['expression'];

    Throw.prototype.isStatement = YES;

    Throw.prototype.jumps = NO;

    Throw.prototype.makeReturn = THIS;

    Throw.prototype.compileNode = function(o) {
      return [].concat(this.makeCode(this.tab + "throw "), this.expression.compileToFragments(o), this.makeCode(";"));
    };

    return Throw;

  })(Base);

  exports.Existence = Existence = (function(superClass1) {
    extend1(Existence, superClass1);

    function Existence(expression) {
      this.expression = expression;
    }

    Existence.prototype.children = ['expression'];

    Existence.prototype.invert = NEGATE;

    Existence.prototype.compileNode = function(o) {
      var cmp, cnj, code, ref3;
      this.expression.front = this.front;
      code = this.expression.compile(o, LEVEL_OP);
      if (IDENTIFIER.test(code) && !o.scope.check(code)) {
        ref3 = this.negated ? ['===', '||'] : ['!==', '&&'], cmp = ref3[0], cnj = ref3[1];
        code = "typeof " + code + " " + cmp + " \"undefined\" " + cnj + " " + code + " " + cmp + " null";
      } else {
        code = code + " " + (this.negated ? '==' : '!=') + " null";
      }
      return [this.makeCode(o.level <= LEVEL_COND ? code : "(" + code + ")")];
    };

    return Existence;

  })(Base);

  exports.Parens = Parens = (function(superClass1) {
    extend1(Parens, superClass1);

    function Parens(body1) {
      this.body = body1;
    }

    Parens.prototype.children = ['body'];

    Parens.prototype.unwrap = function() {
      return this.body;
    };

    Parens.prototype.isComplex = function() {
      return this.body.isComplex();
    };

    Parens.prototype.compileNode = function(o) {
      var bare, expr, fragments;
      expr = this.body.unwrap();
      if (expr instanceof Value && expr.isAtomic()) {
        expr.front = this.front;
        return expr.compileToFragments(o);
      }
      fragments = expr.compileToFragments(o, LEVEL_PAREN);
      bare = o.level < LEVEL_OP && (expr instanceof Op || expr instanceof Call || (expr instanceof For && expr.returns));
      if (bare) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    return Parens;

  })(Base);

  exports.For = For = (function(superClass1) {
    extend1(For, superClass1);

    function For(body, source) {
      var ref3;
      this.source = source.source, this.guard = source.guard, this.step = source.step, this.name = source.name, this.index = source.index;
      this.body = Block.wrap([body]);
      this.own = !!source.own;
      this.object = !!source.object;
      if (this.object) {
        ref3 = [this.index, this.name], this.name = ref3[0], this.index = ref3[1];
      }
      if (this.index instanceof Value) {
        this.index.error('index cannot be a pattern matching expression');
      }
      this.range = this.source instanceof Value && this.source.base instanceof Range && !this.source.properties.length;
      this.pattern = this.name instanceof Value;
      if (this.range && this.index) {
        this.index.error('indexes do not apply to range loops');
      }
      if (this.range && this.pattern) {
        this.name.error('cannot pattern match over range loops');
      }
      if (this.own && !this.object) {
        this.name.error('cannot use own with for-in');
      }
      this.returns = false;
    }

    For.prototype.children = ['body', 'source', 'guard', 'step'];

    For.prototype.compileNode = function(o) {
      var body, bodyFragments, compare, compareDown, declare, declareDown, defPart, defPartFragments, down, forPartFragments, guardPart, idt1, increment, index, ivar, kvar, kvarAssign, last, lvar, name, namePart, ref, ref3, ref4, resultPart, returnResult, rvar, scope, source, step, stepNum, stepVar, svar, varPart;
      body = Block.wrap([this.body]);
      ref3 = body.expressions, last = ref3[ref3.length - 1];
      if ((last != null ? last.jumps() : void 0) instanceof Return) {
        this.returns = false;
      }
      source = this.range ? this.source.base : this.source;
      scope = o.scope;
      if (!this.pattern) {
        name = this.name && (this.name.compile(o, LEVEL_LIST));
      }
      index = this.index && (this.index.compile(o, LEVEL_LIST));
      if (name && !this.pattern) {
        scope.find(name);
      }
      if (index) {
        scope.find(index);
      }
      if (this.returns) {
        rvar = scope.freeVariable('results');
      }
      ivar = (this.object && index) || scope.freeVariable('i', {
        single: true
      });
      kvar = (this.range && name) || index || ivar;
      kvarAssign = kvar !== ivar ? kvar + " = " : "";
      if (this.step && !this.range) {
        ref4 = this.cacheToCodeFragments(this.step.cache(o, LEVEL_LIST, isComplexOrAssignable)), step = ref4[0], stepVar = ref4[1];
        stepNum = stepVar.match(NUMBER);
      }
      if (this.pattern) {
        name = ivar;
      }
      varPart = '';
      guardPart = '';
      defPart = '';
      idt1 = this.tab + TAB;
      source.icedStatementAssertion();
      if (this.range) {
        forPartFragments = source.compileToFragments(merge(o, {
          index: ivar,
          name: name,
          step: this.step,
          isComplex: isComplexOrAssignable
        }));
      } else {
        svar = this.source.compile(o, LEVEL_LIST);
        if ((name || this.own) && !IDENTIFIER.test(svar)) {
          defPart += "" + this.tab + (ref = scope.freeVariable('ref')) + " = " + svar + ";\n";
          svar = ref;
        }
        if (name && !this.pattern) {
          namePart = name + " = " + svar + "[" + kvar + "]";
        }
        if (!this.object) {
          if (step !== stepVar) {
            defPart += "" + this.tab + step + ";\n";
          }
          if (!(this.step && stepNum && (down = parseNum(stepNum[0]) < 0))) {
            lvar = scope.freeVariable('len');
          }
          declare = "" + kvarAssign + ivar + " = 0, " + lvar + " = " + svar + ".length";
          declareDown = "" + kvarAssign + ivar + " = " + svar + ".length - 1";
          compare = ivar + " < " + lvar;
          compareDown = ivar + " >= 0";
          if (this.step) {
            if (stepNum) {
              if (down) {
                compare = compareDown;
                declare = declareDown;
              }
            } else {
              compare = stepVar + " > 0 ? " + compare + " : " + compareDown;
              declare = "(" + stepVar + " > 0 ? (" + declare + ") : " + declareDown + ")";
            }
            increment = ivar + " += " + stepVar;
          } else {
            increment = "" + (kvar !== ivar ? "++" + ivar : ivar + "++");
          }
          forPartFragments = [this.makeCode(declare + "; " + compare + "; " + kvarAssign + increment)];
        }
      }
      if (this.returns) {
        resultPart = "" + this.tab + rvar + " = [];\n";
        returnResult = "\n" + this.tab + "return " + rvar + ";";
        body.makeReturn(rvar);
      }
      if (this.guard) {
        if (body.expressions.length > 1) {
          body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
        } else {
          if (this.guard) {
            body = Block.wrap([new If(this.guard, body)]);
          }
        }
      }
      if (this.pattern) {
        body.expressions.unshift(new Assign(this.name, new Literal(svar + "[" + kvar + "]")));
      }
      defPartFragments = [].concat(this.makeCode(defPart), this.pluckDirectCall(o, body));
      if (namePart) {
        varPart = "\n" + idt1 + namePart + ";";
      }
      if (this.object) {
        forPartFragments = [this.makeCode(kvar + " in " + svar)];
        if (this.own) {
          guardPart = "\n" + idt1 + "if (!" + (utility('hasProp', o)) + ".call(" + svar + ", " + kvar + ")) continue;";
        }
      }
      bodyFragments = body.compileToFragments(merge(o, {
        indent: idt1
      }), LEVEL_TOP);
      if (bodyFragments && (bodyFragments.length > 0)) {
        bodyFragments = [].concat(this.makeCode("\n"), bodyFragments, this.makeCode("\n"));
      }
      return [].concat(defPartFragments, this.makeCode("" + (resultPart || '') + this.tab + "for ("), forPartFragments, this.makeCode(") {" + guardPart + varPart), bodyFragments, this.makeCode(this.tab + "}" + (returnResult || '')));
    };

    For.prototype.pluckDirectCall = function(o, body) {
      var base, defs, expr, fn, idx, j, len1, ref, ref3, ref4, ref5, ref6, ref7, ref8, ref9, val;
      defs = [];
      ref3 = body.expressions;
      for (idx = j = 0, len1 = ref3.length; j < len1; idx = ++j) {
        expr = ref3[idx];
        expr = expr.unwrapAll();
        if (!(expr instanceof Call)) {
          continue;
        }
        val = (ref4 = expr.variable) != null ? ref4.unwrapAll() : void 0;
        if (!((val instanceof Code) || (val instanceof Value && ((ref5 = val.base) != null ? ref5.unwrapAll() : void 0) instanceof Code && val.properties.length === 1 && ((ref6 = (ref7 = val.properties[0].name) != null ? ref7.value : void 0) === 'call' || ref6 === 'apply')))) {
          continue;
        }
        fn = ((ref8 = val.base) != null ? ref8.unwrapAll() : void 0) || val;
        ref = new Literal(o.scope.freeVariable('fn'));
        base = new Value(ref);
        if (val.base) {
          ref9 = [base, val], val.base = ref9[0], base = ref9[1];
        }
        body.expressions[idx] = new Call(base, expr.args);
        defs = defs.concat(this.makeCode(this.tab), new Assign(ref, fn).compileToFragments(o, LEVEL_TOP), this.makeCode(';\n'));
      }
      return defs;
    };

    return For;

  })(While);

  exports.Switch = Switch = (function(superClass1) {
    extend1(Switch, superClass1);

    function Switch(subject, cases, otherwise) {
      this.subject = subject;
      this.cases = cases;
      this.otherwise = otherwise;
    }

    Switch.prototype.children = ['subject', 'cases', 'otherwise'];

    Switch.prototype.isStatement = YES;

    Switch.prototype.jumps = function(o) {
      var block, conds, j, jumpNode, len1, ref3, ref4, ref5;
      if (o == null) {
        o = {
          block: true
        };
      }
      ref3 = this.cases;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        ref4 = ref3[j], conds = ref4[0], block = ref4[1];
        if (jumpNode = block.jumps(o)) {
          return jumpNode;
        }
      }
      return (ref5 = this.otherwise) != null ? ref5.jumps(o) : void 0;
    };

    Switch.prototype.makeReturn = function(res) {
      var j, len1, pair, ref3, ref4;
      ref3 = this.cases;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        pair = ref3[j];
        pair[1].makeReturn(res);
      }
      if (res) {
        this.otherwise || (this.otherwise = new Block([new Literal('void 0')]));
      }
      if ((ref4 = this.otherwise) != null) {
        ref4.makeReturn(res);
      }
      return this;
    };

    Switch.prototype.compileNode = function(o) {
      var block, body, cond, conditions, expr, fragments, i, idt1, idt2, j, k, len1, len2, ref3, ref4, ref5;
      if (this.subject) {
        this.subject.icedStatementAssertion();
      }
      idt1 = o.indent + TAB;
      idt2 = o.indent = idt1 + TAB;
      fragments = [].concat(this.makeCode(this.tab + "switch ("), (this.subject ? this.subject.compileToFragments(o, LEVEL_PAREN) : this.makeCode("false")), this.makeCode(") {\n"));
      ref3 = this.cases;
      for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
        ref4 = ref3[i], conditions = ref4[0], block = ref4[1];
        ref5 = flatten([conditions]);
        for (k = 0, len2 = ref5.length; k < len2; k++) {
          cond = ref5[k];
          if (!this.subject) {
            cond = cond.invert();
          }
          fragments = fragments.concat(this.makeCode(idt1 + "case "), cond.compileToFragments(o, LEVEL_PAREN), this.makeCode(":\n"));
        }
        if ((body = block.compileToFragments(o, LEVEL_TOP)).length > 0) {
          fragments = fragments.concat(body, this.makeCode('\n'));
        }
        if (i === this.cases.length - 1 && !this.otherwise) {
          break;
        }
        expr = this.lastNonComment(block.expressions);
        if (expr instanceof Return || (expr instanceof Literal && expr.jumps() && expr.value !== 'debugger')) {
          continue;
        }
        fragments.push(cond.makeCode(idt2 + 'break;\n'));
      }
      if (this.otherwise && this.otherwise.expressions.length) {
        fragments.push.apply(fragments, [this.makeCode(idt1 + "default:\n")].concat(slice.call(this.otherwise.compileToFragments(o, LEVEL_TOP)), [this.makeCode("\n")]));
      }
      fragments.push(this.makeCode(this.tab + '}'));
      return fragments;
    };

    return Switch;

  })(Base);

  exports.If = If = (function(superClass1) {
    extend1(If, superClass1);

    function If(condition, body1, options) {
      this.body = body1;
      if (options == null) {
        options = {};
      }
      this.condition = options.type === 'unless' ? condition.invert() : condition;
      this.elseBody = null;
      this.isChain = false;
      this.soak = options.soak;
    }

    If.prototype.children = ['condition', 'body', 'elseBody'];

    If.prototype.bodyNode = function() {
      var ref3;
      return (ref3 = this.body) != null ? ref3.unwrap() : void 0;
    };

    If.prototype.elseBodyNode = function() {
      var ref3;
      return (ref3 = this.elseBody) != null ? ref3.unwrap() : void 0;
    };

    If.prototype.addElse = function(elseBody) {
      if (this.isChain) {
        this.elseBodyNode().addElse(elseBody);
      } else {
        this.isChain = elseBody instanceof If;
        this.elseBody = this.ensureBlock(elseBody);
        this.elseBody.updateLocationDataIfMissing(elseBody.locationData);
      }
      return this;
    };

    If.prototype.isStatement = function(o) {
      var ref3;
      return (o != null ? o.level : void 0) === LEVEL_TOP || this.bodyNode().isStatement(o) || ((ref3 = this.elseBodyNode()) != null ? ref3.isStatement(o) : void 0);
    };

    If.prototype.jumps = function(o) {
      var ref3;
      return this.body.jumps(o) || ((ref3 = this.elseBody) != null ? ref3.jumps(o) : void 0);
    };

    If.prototype.compileNode = function(o) {
      this.condition.icedStatementAssertion();
      if (this.isStatement(o)) {
        return this.compileStatement(o);
      } else {
        return this.compileExpression(o);
      }
    };

    If.prototype.makeReturn = function(res) {
      if (res) {
        this.elseBody || (this.elseBody = new Block([new Literal('void 0')]));
      }
      this.body && (this.body = new Block([this.body.makeReturn(res)]));
      this.elseBody && (this.elseBody = new Block([this.elseBody.makeReturn(res)]));
      return this;
    };

    If.prototype.ensureBlock = function(node) {
      if (node instanceof Block) {
        return node;
      } else {
        return new Block([node]);
      }
    };

    If.prototype.compileStatement = function(o) {
      var answer, body, child, cond, exeq, ifPart, indent;
      child = del(o, 'chainChild');
      exeq = del(o, 'isExistentialEquals');
      if (exeq) {
        return new If(this.condition.invert(), this.elseBodyNode(), {
          type: 'if'
        }).compileToFragments(o);
      }
      indent = o.indent + TAB;
      cond = this.condition.compileToFragments(o, LEVEL_PAREN);
      body = this.ensureBlock(this.body).compileToFragments(merge(o, {
        indent: indent
      }));
      ifPart = [].concat(this.makeCode("if ("), cond, this.makeCode(") {\n"), body, this.makeCode("\n" + this.tab + "}"));
      if (!child) {
        ifPart.unshift(this.makeCode(this.tab));
      }
      if (!this.elseBody) {
        return ifPart;
      }
      answer = ifPart.concat(this.makeCode(' else '));
      if (this.isChain) {
        o.chainChild = true;
        answer = answer.concat(this.elseBody.unwrap().compileToFragments(o, LEVEL_TOP));
      } else {
        answer = answer.concat(this.makeCode("{\n"), this.elseBody.compileToFragments(merge(o, {
          indent: indent
        }), LEVEL_TOP), this.makeCode("\n" + this.tab + "}"));
      }
      return answer;
    };

    If.prototype.compileExpression = function(o) {
      var alt, body, cond, fragments;
      cond = this.condition.compileToFragments(o, LEVEL_COND);
      body = this.bodyNode().compileToFragments(o, LEVEL_LIST);
      alt = this.elseBodyNode() ? this.elseBodyNode().compileToFragments(o, LEVEL_LIST) : [this.makeCode('void 0')];
      fragments = cond.concat(this.makeCode(" ? "), body, this.makeCode(" : "), alt);
      if (o.level >= LEVEL_COND) {
        return this.wrapInBraces(fragments);
      } else {
        return fragments;
      }
    };

    If.prototype.unfoldSoak = function() {
      return this.soak && this;
    };

    return If;

  })(Base);

  UTILITIES = {
    extend: function(o) {
      return "function(child, parent) { for (var key in parent) { if (" + (utility('hasProp', o)) + ".call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }";
    },
    bind: function() {
      return 'function(fn, me){ return function(){ return fn.apply(me, arguments); }; }';
    },
    indexOf: function() {
      return "[].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }";
    },
    modulo: function() {
      return "function(a, b) { return (+a % (b = +b) + b) % b; }";
    },
    hasProp: function() {
      return '{}.hasOwnProperty';
    },
    slice: function() {
      return '[].slice';
    }
  };

  LEVEL_TOP = 1;

  LEVEL_PAREN = 2;

  LEVEL_LIST = 3;

  LEVEL_COND = 4;

  LEVEL_OP = 5;

  LEVEL_ACCESS = 6;

  TAB = '  ';

  IDENTIFIER = /^(?!\d)[$\w\x7f-\uffff]+$/;

  SIMPLENUM = /^[+-]?\d+$/;

  HEXNUM = /^[+-]?0x[\da-f]+/i;

  NUMBER = /^[+-]?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)$/i;

  IS_STRING = /^['"]/;

  IS_REGEX = /^\//;

  utility = function(name, o) {
    var ref, root;
    root = o.scope.root;
    if (name in root.utilities) {
      return root.utilities[name];
    } else {
      ref = root.freeVariable(name);
      root.assign(ref, UTILITIES[name](o));
      return root.utilities[name] = ref;
    }
  };

  multident = function(code, tab) {
    code = code.replace(/\n/g, '$&' + tab);
    return code.replace(/\s+$/, '');
  };

  parseNum = function(x) {
    if (x == null) {
      return 0;
    } else if (x.match(HEXNUM)) {
      return parseInt(x, 16);
    } else {
      return parseFloat(x);
    }
  };

  isLiteralArguments = function(node) {
    return node instanceof Literal && node.value === 'arguments' && !node.asKey;
  };

  isLiteralThis = function(node) {
    return (node instanceof Literal && node.value === 'this' && !node.asKey) || (node instanceof Code && node.bound) || (node instanceof Call && node.isSuper);
  };

  isComplexOrAssignable = function(node) {
    return node.isComplex() || (typeof node.isAssignable === "function" ? node.isAssignable() : void 0);
  };

  unfoldSoak = function(o, parent, name) {
    var ifn;
    if (!(ifn = parent[name].unfoldSoak(o))) {
      return;
    }
    parent[name] = ifn.body;
    ifn.body = new Value(parent);
    return ifn;
  };

}).call(this);

  return module.exports;
})();require['./sourcemap'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var LineMap, SourceMap;

  LineMap = (function() {
    function LineMap(line1) {
      this.line = line1;
      this.columns = [];
    }

    LineMap.prototype.add = function(column, arg, options) {
      var sourceColumn, sourceLine;
      sourceLine = arg[0], sourceColumn = arg[1];
      if (options == null) {
        options = {};
      }
      if (this.columns[column] && options.noReplace) {
        return;
      }
      return this.columns[column] = {
        line: this.line,
        column: column,
        sourceLine: sourceLine,
        sourceColumn: sourceColumn
      };
    };

    LineMap.prototype.sourceLocation = function(column) {
      var mapping;
      while (!((mapping = this.columns[column]) || (column <= 0))) {
        column--;
      }
      return mapping && [mapping.sourceLine, mapping.sourceColumn];
    };

    return LineMap;

  })();

  SourceMap = (function() {
    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;

    function SourceMap() {
      this.lines = [];
    }

    SourceMap.prototype.add = function(sourceLocation, generatedLocation, options) {
      var base, column, line, lineMap;
      if (options == null) {
        options = {};
      }
      line = generatedLocation[0], column = generatedLocation[1];
      lineMap = ((base = this.lines)[line] || (base[line] = new LineMap(line)));
      return lineMap.add(column, sourceLocation, options);
    };

    SourceMap.prototype.sourceLocation = function(arg) {
      var column, line, lineMap;
      line = arg[0], column = arg[1];
      while (!((lineMap = this.lines[line]) || (line <= 0))) {
        line--;
      }
      return lineMap && lineMap.sourceLocation(column);
    };

    SourceMap.prototype.generate = function(options, code) {
      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;
      if (options == null) {
        options = {};
      }
      if (code == null) {
        code = null;
      }
      writingline = 0;
      lastColumn = 0;
      lastSourceLine = 0;
      lastSourceColumn = 0;
      needComma = false;
      buffer = "";
      ref = this.lines;
      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {
        lineMap = ref[lineNumber];
        if (lineMap) {
          ref1 = lineMap.columns;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            mapping = ref1[j];
            if (!(mapping)) {
              continue;
            }
            while (writingline < mapping.line) {
              lastColumn = 0;
              needComma = false;
              buffer += ";";
              writingline++;
            }
            if (needComma) {
              buffer += ",";
              needComma = false;
            }
            buffer += this.encodeVlq(mapping.column - lastColumn);
            lastColumn = mapping.column;
            buffer += this.encodeVlq(0);
            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
            lastSourceLine = mapping.sourceLine;
            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
            lastSourceColumn = mapping.sourceColumn;
            needComma = true;
          }
        }
      }
      v3 = {
        version: 3,
        file: options.generatedFile || '',
        sourceRoot: options.sourceRoot || '',
        sources: options.sourceFiles || [''],
        names: [],
        mappings: buffer
      };
      if (options.inline) {
        v3.sourcesContent = [code];
      }
      return JSON.stringify(v3, null, 2);
    };

    VLQ_SHIFT = 5;

    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;

    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;

    SourceMap.prototype.encodeVlq = function(value) {
      var answer, nextChunk, signBit, valueToEncode;
      answer = '';
      signBit = value < 0 ? 1 : 0;
      valueToEncode = (Math.abs(value) << 1) + signBit;
      while (valueToEncode || !answer) {
        nextChunk = valueToEncode & VLQ_VALUE_MASK;
        valueToEncode = valueToEncode >> VLQ_SHIFT;
        if (valueToEncode) {
          nextChunk |= VLQ_CONTINUATION_BIT;
        }
        answer += this.encodeBase64(nextChunk);
      }
      return answer;
    };

    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    SourceMap.prototype.encodeBase64 = function(value) {
      return BASE64_CHARS[value] || (function() {
        throw new Error("Cannot Base64 encode value: " + value);
      })();
    };

    return SourceMap;

  })();

  module.exports = SourceMap;

}).call(this);

  return module.exports;
})();require['./coffee-script'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var Lexer, SourceMap, base, compile, ext, formatSourcePosition, fs, getSourceMap, helpers, i, icedTransform, len, lexer, parser, path, ref, sourceMaps, vm, withPrettyErrors,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  vm = require('vm');

  path = require('path');

  Lexer = require('./lexer').Lexer;

  parser = require('./parser').parser;

  helpers = require('./helpers');

  SourceMap = require('./sourcemap');

  icedTransform = function(x, options) {
    return x.icedTransform(options);
  };

  exports.VERSION = '1.10.0';

  exports.FILE_EXTENSIONS = ['.coffee', '.litcoffee', '.coffee.md', '.iced', '.liticed', '.iced.md'];

  exports.helpers = helpers;

  withPrettyErrors = function(fn) {
    return function(code, options) {
      var err;
      if (options == null) {
        options = {};
      }
      try {
        return fn.call(this, code, options);
      } catch (error) {
        err = error;
        if (typeof code !== 'string') {
          throw err;
        }
        throw helpers.updateSyntaxError(err, code, options.filename);
      }
    };
  };

  exports.compile = compile = withPrettyErrors(function(code, options) {
    var answer, currentColumn, currentLine, extend, fragment, fragments, header, i, js, len, map, merge, newLines, token, tokens;
    merge = helpers.merge, extend = helpers.extend;
    options = extend({}, options);
    if (options.sourceMap) {
      map = new SourceMap;
    }
    tokens = lexer.tokenize(code, options);
    options.referencedVars = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = tokens.length; i < len; i++) {
        token = tokens[i];
        if (token.variable) {
          results.push(token[1]);
        }
      }
      return results;
    })();
    fragments = icedTransform(parser.parse(tokens), options).compileToFragments(options);
    currentLine = 0;
    if (options.header) {
      currentLine += 1;
    }
    if (options.shiftLine) {
      currentLine += 1;
    }
    currentColumn = 0;
    js = "";
    for (i = 0, len = fragments.length; i < len; i++) {
      fragment = fragments[i];
      if (options.sourceMap) {
        if (fragment.locationData && !/^[;\s]*$/.test(fragment.code)) {
          map.add([fragment.locationData.first_line, fragment.locationData.first_column], [currentLine, currentColumn], {
            noReplace: true
          });
        }
        newLines = helpers.count(fragment.code, "\n");
        currentLine += newLines;
        if (newLines) {
          currentColumn = fragment.code.length - (fragment.code.lastIndexOf("\n") + 1);
        } else {
          currentColumn += fragment.code.length;
        }
      }
      js += fragment.code;
    }
    if (options.header) {
      header = "Generated by IcedCoffeeScript " + this.VERSION;
      js = "// " + header + "\n" + js;
    }
    if (options.sourceMap) {
      answer = {
        js: js
      };
      answer.sourceMap = map;
      answer.v3SourceMap = map.generate(options, code);
      return answer;
    } else {
      return js;
    }
  });

  exports.tokens = withPrettyErrors(function(code, options) {
    return lexer.tokenize(code, options);
  });

  exports.nodes = withPrettyErrors(function(source, options) {
    var nodes;
    nodes = typeof source === 'string' ? parser.parse(lexer.tokenize(source, options)) : parser.parse(source);
    return icedTransform(nodes, options);
  });

  exports.run = function(code, options) {
    var answer, dir, mainModule, ref;
    if (options == null) {
      options = {};
    }
    mainModule = require.main;
    mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : '.';
    mainModule.moduleCache && (mainModule.moduleCache = {});
    dir = options.filename ? path.dirname(fs.realpathSync(options.filename)) : fs.realpathSync('.');
    mainModule.paths = require('module')._nodeModulePaths(dir);
    if (!helpers.isCoffee(mainModule.filename) || require.extensions) {
      answer = compile(code, options);
      code = (ref = answer.js) != null ? ref : answer;
    }
    return mainModule._compile(code, mainModule.filename);
  };

  exports["eval"] = function(code, options) {
    var Module, _module, _require, createContext, i, isContext, js, k, len, o, r, ref, ref1, ref2, ref3, sandbox, v;
    if (options == null) {
      options = {};
    }
    if (!(code = code.trim())) {
      return;
    }
    createContext = (ref = vm.Script.createContext) != null ? ref : vm.createContext;
    isContext = (ref1 = vm.isContext) != null ? ref1 : function(ctx) {
      return options.sandbox instanceof createContext().constructor;
    };
    if (createContext) {
      if (options.sandbox != null) {
        if (isContext(options.sandbox)) {
          sandbox = options.sandbox;
        } else {
          sandbox = createContext();
          ref2 = options.sandbox;
          for (k in ref2) {
            if (!hasProp.call(ref2, k)) continue;
            v = ref2[k];
            sandbox[k] = v;
          }
        }
        sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
      } else {
        sandbox = global;
      }
      sandbox.__filename = options.filename || 'eval';
      sandbox.__dirname = path.dirname(sandbox.__filename);
      if (!(sandbox !== global || sandbox.module || sandbox.require)) {
        Module = require('module');
        sandbox.module = _module = new Module(options.modulename || 'eval');
        sandbox.require = _require = function(path) {
          return Module._load(path, _module, true);
        };
        _module.filename = sandbox.__filename;
        ref3 = Object.getOwnPropertyNames(require);
        for (i = 0, len = ref3.length; i < len; i++) {
          r = ref3[i];
          if (r !== 'paths' && r !== 'arguments' && r !== 'caller') {
            _require[r] = require[r];
          }
        }
        _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
        _require.resolve = function(request) {
          return Module._resolveFilename(request, _module);
        };
      }
    }
    o = {};
    for (k in options) {
      if (!hasProp.call(options, k)) continue;
      v = options[k];
      o[k] = v;
    }
    o.bare = true;
    js = compile(code, o);
    if (sandbox === global) {
      return vm.runInThisContext(js);
    } else {
      return vm.runInContext(js, sandbox);
    }
  };

  exports.register = function() {
    return require('./register');
  };

  if (require.extensions) {
    ref = this.FILE_EXTENSIONS;
    for (i = 0, len = ref.length; i < len; i++) {
      ext = ref[i];
      if ((base = require.extensions)[ext] == null) {
        base[ext] = function() {
          throw new Error("Use CoffeeScript.register() or require the coffee-script/register module to require " + ext + " files.");
        };
      }
    }
  }

  exports._compileFile = function(filename, sourceMap) {
    var answer, err, raw, stripped;
    if (sourceMap == null) {
      sourceMap = false;
    }
    raw = fs.readFileSync(filename, 'utf8');
    stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
    try {
      answer = compile(stripped, {
        filename: filename,
        sourceMap: sourceMap,
        literate: helpers.isLiterate(filename)
      });
    } catch (error) {
      err = error;
      throw helpers.updateSyntaxError(err, stripped, filename);
    }
    return answer;
  };

  lexer = new Lexer;

  parser.lexer = {
    lex: function() {
      var tag, token;
      token = parser.tokens[this.pos++];
      if (token) {
        tag = token[0], this.yytext = token[1], this.yylloc = token[2];
        parser.errorToken = token.origin || token;
        this.yylineno = this.yylloc.first_line;
      } else {
        tag = '';
      }
      return tag;
    },
    setInput: function(tokens) {
      parser.tokens = tokens;
      return this.pos = 0;
    },
    upcomingInput: function() {
      return "";
    }
  };

  parser.yy = require('./nodes');

  parser.yy.parseError = function(message, arg) {
    var errorLoc, errorTag, errorText, errorToken, token, tokens;
    token = arg.token;
    errorToken = parser.errorToken, tokens = parser.tokens;
    errorTag = errorToken[0], errorText = errorToken[1], errorLoc = errorToken[2];
    errorText = (function() {
      switch (false) {
        case errorToken !== tokens[tokens.length - 1]:
          return 'end of input';
        case errorTag !== 'INDENT' && errorTag !== 'OUTDENT':
          return 'indentation';
        case errorTag !== 'IDENTIFIER' && errorTag !== 'NUMBER' && errorTag !== 'STRING' && errorTag !== 'STRING_START' && errorTag !== 'REGEX' && errorTag !== 'REGEX_START':
          return errorTag.replace(/_START$/, '').toLowerCase();
        default:
          return helpers.nameWhitespaceCharacter(errorText);
      }
    })();
    return helpers.throwSyntaxError("unexpected " + errorText, errorLoc);
  };

  formatSourcePosition = function(frame, getSourceMapping) {
    var as, column, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, methodName, source, tp, typeName;
    fileName = void 0;
    fileLocation = '';
    if (frame.isNative()) {
      fileLocation = "native";
    } else {
      if (frame.isEval()) {
        fileName = frame.getScriptNameOrSourceURL();
        if (!fileName) {
          fileLocation = (frame.getEvalOrigin()) + ", ";
        }
      } else {
        fileName = frame.getFileName();
      }
      fileName || (fileName = "<anonymous>");
      line = frame.getLineNumber();
      column = frame.getColumnNumber();
      source = getSourceMapping(fileName, line, column);
      fileLocation = source ? fileName + ":" + source[0] + ":" + source[1] : fileName + ":" + line + ":" + column;
    }
    functionName = frame.getFunctionName();
    isConstructor = frame.isConstructor();
    isMethodCall = !(frame.isToplevel() || isConstructor);
    if (isMethodCall) {
      methodName = frame.getMethodName();
      typeName = frame.getTypeName();
      if (functionName) {
        tp = as = '';
        if (typeName && functionName.indexOf(typeName)) {
          tp = typeName + ".";
        }
        if (methodName && functionName.indexOf("." + methodName) !== functionName.length - methodName.length - 1) {
          as = " [as " + methodName + "]";
        }
        return "" + tp + functionName + as + " (" + fileLocation + ")";
      } else {
        return typeName + "." + (methodName || '<anonymous>') + " (" + fileLocation + ")";
      }
    } else if (isConstructor) {
      return "new " + (functionName || '<anonymous>') + " (" + fileLocation + ")";
    } else if (functionName) {
      return functionName + " (" + fileLocation + ")";
    } else {
      return fileLocation;
    }
  };

  sourceMaps = {};

  getSourceMap = function(filename) {
    var answer, ref1;
    if (sourceMaps[filename]) {
      return sourceMaps[filename];
    }
    if (ref1 = path != null ? path.extname(filename) : void 0, indexOf.call(exports.FILE_EXTENSIONS, ref1) < 0) {
      return;
    }
    answer = exports._compileFile(filename, true);
    return sourceMaps[filename] = answer.sourceMap;
  };

  Error.prepareStackTrace = function(err, stack) {
    var frame, frames, getSourceMapping;
    getSourceMapping = function(filename, line, column) {
      var answer, sourceMap;
      sourceMap = getSourceMap(filename);
      if (sourceMap) {
        answer = sourceMap.sourceLocation([line - 1, column - 1]);
      }
      if (answer) {
        return [answer[0] + 1, answer[1] + 1];
      } else {
        return null;
      }
    };
    frames = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = stack.length; j < len1; j++) {
        frame = stack[j];
        if (frame.getFunction() === exports.run) {
          break;
        }
        results.push("  at " + (formatSourcePosition(frame, getSourceMapping)));
      }
      return results;
    })();
    return (err.toString()) + "\n" + (frames.join('\n')) + "\n";
  };

}).call(this);

  return module.exports;
})();require['./browser'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by IcedCoffeeScript 1.10.0
(function() {
  var CoffeeScript, compile, runScripts,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  compile = CoffeeScript.compile;

  CoffeeScript["eval"] = function(code, options) {
    if (options == null) {
      options = {};
    }
    if (options.bare == null) {
      options.bare = true;
    }
    return eval(compile(code, options));
  };

  CoffeeScript.run = function(code, options) {
    if (options == null) {
      options = {};
    }
    options.bare = true;
    options.shiftLine = true;
    return Function(compile(code, options))();
  };

  if (typeof window === "undefined" || window === null) {
    return;
  }

  if ((typeof btoa !== "undefined" && btoa !== null) && (typeof JSON !== "undefined" && JSON !== null) && (typeof unescape !== "undefined" && unescape !== null) && (typeof encodeURIComponent !== "undefined" && encodeURIComponent !== null)) {
    compile = function(code, options) {
      var js, ref, v3SourceMap;
      if (options == null) {
        options = {};
      }
      options.sourceMap = true;
      options.inline = true;
      ref = CoffeeScript.compile(code, options), js = ref.js, v3SourceMap = ref.v3SourceMap;
      return js + "\n//# sourceMappingURL=data:application/json;base64," + (btoa(unescape(encodeURIComponent(v3SourceMap)))) + "\n//# sourceURL=coffeescript";
    };
  }

  CoffeeScript.load = function(url, callback, options, hold) {
    var xhr;
    if (options == null) {
      options = {};
    }
    if (hold == null) {
      hold = false;
    }
    options.sourceFiles = [url];
    xhr = window.ActiveXObject ? new window.ActiveXObject('Microsoft.XMLHTTP') : new window.XMLHttpRequest();
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) {
      xhr.overrideMimeType('text/plain');
    }
    xhr.onreadystatechange = function() {
      var param, ref;
      if (xhr.readyState === 4) {
        if ((ref = xhr.status) === 0 || ref === 200) {
          param = [xhr.responseText, options];
          if (!hold) {
            CoffeeScript.run.apply(CoffeeScript, param);
          }
        } else {
          throw new Error("Could not load " + url);
        }
        if (callback) {
          return callback(param);
        }
      }
    };
    return xhr.send(null);
  };

  runScripts = function() {
    var coffees, coffeetypes, execute, fn, i, index, j, len, s, script, scripts;
    scripts = window.document.getElementsByTagName('script');
    coffeetypes = ['text/coffeescript', 'text/literate-coffeescript'];
    coffees = (function() {
      var j, len, ref, results;
      results = [];
      for (j = 0, len = scripts.length; j < len; j++) {
        s = scripts[j];
        if (ref = s.type, indexOf.call(coffeetypes, ref) >= 0) {
          results.push(s);
        }
      }
      return results;
    })();
    index = 0;
    execute = function() {
      var param;
      param = coffees[index];
      if (param instanceof Array) {
        CoffeeScript.run.apply(CoffeeScript, param);
        index++;
        return execute();
      }
    };
    fn = function(script, i) {
      var options, source;
      options = {
        literate: script.type === coffeetypes[1]
      };
      source = script.src || script.getAttribute('data-src');
      if (source) {
        return CoffeeScript.load(source, function(param) {
          coffees[i] = param;
          return execute();
        }, options, true);
      } else {
        options.sourceFiles = ['embedded'];
        return coffees[i] = [script.innerHTML, options];
      }
    };
    for (i = j = 0, len = coffees.length; j < len; i = ++j) {
      script = coffees[i];
      fn(script, i);
    }
    return execute();
  };

  if (window.addEventListener) {
    window.addEventListener('DOMContentLoaded', runScripts, false);
  } else {
    window.attachEvent('onload', runScripts);
  }

}).call(this);

  return module.exports;
})();require['./inline-runtime-str'] = (function() {
  var exports = {}, module = {exports: exports};
  module.exports = '(function() {\n  function require(path){ return require[path]; }\n  require[\'./const\'] = (function() {\n  var exports = {}, module = {exports: exports};\n  // Generated by CoffeeScript 1.10.0\n(function() {\n  module.exports = {\n    k: "__iced_k",\n    k_noop: "__iced_k_noop",\n    param: "__iced_p_",\n    ns: "iced",\n    runtime: "runtime",\n    Deferrals: "Deferrals",\n    deferrals: "__iced_deferrals",\n    fulfill: "_fulfill",\n    b_while: "_break",\n    t_while: "_while",\n    c_while: "_continue",\n    n_while: "_next",\n    n_arg: "__iced_next_arg",\n    defer_method: "defer",\n    slot: "__slot",\n    assign_fn: "assign_fn",\n    autocb: "autocb",\n    retslot: "ret",\n    trace: "__iced_trace",\n    passed_deferral: "__iced_passed_deferral",\n    findDeferral: "findDeferral",\n    lineno: "lineno",\n    parent: "parent",\n    filename: "filename",\n    funcname: "funcname",\n    catchExceptions: \'catchExceptions\',\n    runtime_modes: ["node", "inline", "window", "none", "browserify", "interp"],\n    trampoline: "trampoline",\n    context: "context",\n    defer_arg: "__iced_defer_",\n    iterator: "__iced_it",\n    await_exit: "await_exit"\n  };\n\n}).call(this);\n\n  return module.exports;\n})();require[\'./runtime\'] = (function() {\n  var exports = {}, module = {exports: exports};\n  // Generated by IcedCoffeeScript 1.10.0\n(function() {\n  var C, Deferrals, Rendezvous, __active_trace, __c, _trace_to_string, exceptionHandler, findDeferral, make_defer_return, stackWalk, tick_counter, trampoline, warn,\n    slice = [].slice;\n\n  C = require(\'./const\');\n\n  make_defer_return = function(obj, defer_args, id, trace_template, multi) {\n    var k, ret, trace, v;\n    trace = {};\n    for (k in trace_template) {\n      v = trace_template[k];\n      trace[k] = v;\n    }\n    trace[C.lineno] = defer_args != null ? defer_args[C.lineno] : void 0;\n    ret = function() {\n      var inner_args, o, ref;\n      inner_args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (defer_args != null) {\n        if ((ref = defer_args.assign_fn) != null) {\n          ref.apply(null, inner_args);\n        }\n      }\n      if (obj) {\n        o = obj;\n        if (!multi) {\n          obj = null;\n        }\n        return o._fulfill(id, trace);\n      } else {\n        return warn("overused deferral at " + (_trace_to_string(trace)));\n      }\n    };\n    ret[C.trace] = trace;\n    return ret;\n  };\n\n  __c = 0;\n\n  tick_counter = function(mod) {\n    __c++;\n    if ((__c % mod) === 0) {\n      __c = 0;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  __active_trace = null;\n\n  _trace_to_string = function(tr) {\n    var fn;\n    fn = tr[C.funcname] || "<anonymous>";\n    return fn + " (" + tr[C.filename] + ":" + (tr[C.lineno] + 1) + ")";\n  };\n\n  warn = function(m) {\n    return typeof console !== "undefined" && console !== null ? console.error("ICED warning: " + m) : void 0;\n  };\n\n  exports.trampoline = trampoline = function(fn) {\n    if (!tick_counter(500)) {\n      return fn();\n    } else if ((typeof process !== "undefined" && process !== null ? process.nextTick : void 0) != null) {\n      return process.nextTick(fn);\n    } else {\n      return setTimeout(fn);\n    }\n  };\n\n  exports.Deferrals = Deferrals = (function() {\n    function Deferrals(iterator, trace1) {\n      this.iterator = iterator;\n      this.trace = trace1;\n      this.count = 1;\n      this.ret = null;\n      this.yielded = false;\n    }\n\n    Deferrals.prototype._call = function(trace) {\n      var i;\n      if (this.iterator) {\n        __active_trace = trace;\n        i = this.iterator;\n        this.iterator = null;\n        if (this.yielded) {\n          return i.next(this.ret);\n        }\n      } else {\n        return warn("Entered dead await at " + (_trace_to_string(trace)));\n      }\n    };\n\n    Deferrals.prototype._fulfill = function(id, trace) {\n      if (--this.count <= 0) {\n        return this._call(trace);\n      }\n    };\n\n    Deferrals.prototype.await_exit = function() {\n      this._fulfill();\n      if (this.count === 0) {\n        this.iterator = null;\n        return false;\n      } else {\n        this.yielded = true;\n        return true;\n      }\n    };\n\n    Deferrals.prototype.defer = function(args) {\n      var self;\n      this.count++;\n      self = this;\n      return make_defer_return(self, args, null, this.trace);\n    };\n\n    return Deferrals;\n\n  })();\n\n  exports.findDeferral = findDeferral = function(args) {\n    var a, j, len;\n    for (j = 0, len = args.length; j < len; j++) {\n      a = args[j];\n      if (a != null ? a[C.trace] : void 0) {\n        return a;\n      }\n    }\n    return null;\n  };\n\n  exports.Rendezvous = Rendezvous = (function() {\n    var RvId;\n\n    function Rendezvous() {\n      this.completed = [];\n      this.waiters = [];\n      this.defer_id = 0;\n    }\n\n    RvId = (function() {\n      function RvId(rv, id1, multi1) {\n        this.rv = rv;\n        this.id = id1;\n        this.multi = multi1;\n      }\n\n      RvId.prototype.defer = function(defer_args) {\n        return this.rv._defer_with_id(this.id, defer_args, this.multi);\n      };\n\n      return RvId;\n\n    })();\n\n    Rendezvous.prototype.wait = function(cb) {\n      var x;\n      if (this.completed.length) {\n        x = this.completed.shift();\n        return cb(x);\n      } else {\n        return this.waiters.push(cb);\n      }\n    };\n\n    Rendezvous.prototype.defer = function(defer_args) {\n      var id;\n      id = this.defer_id++;\n      return this._defer_with_id(id, defer_args);\n    };\n\n    Rendezvous.prototype.id = function(i, multi) {\n      multi = !!multi;\n      return new RvId(this, i, multi);\n    };\n\n    Rendezvous.prototype._fulfill = function(id, trace) {\n      var cb;\n      if (this.waiters.length) {\n        cb = this.waiters.shift();\n        return cb(id);\n      } else {\n        return this.completed.push(id);\n      }\n    };\n\n    Rendezvous.prototype._defer_with_id = function(id, defer_args, multi) {\n      this.count++;\n      return make_defer_return(this, defer_args, id, {}, multi);\n    };\n\n    return Rendezvous;\n\n  })();\n\n  exports.stackWalk = stackWalk = function(cb) {\n    var line, ref, ret, tr;\n    ret = [];\n    tr = cb ? cb[C.trace] : __active_trace;\n    while (tr) {\n      line = "   at " + (_trace_to_string(tr));\n      ret.push(line);\n      tr = tr != null ? (ref = tr[C.parent]) != null ? ref[C.trace] : void 0 : void 0;\n    }\n    return ret;\n  };\n\n  exports.exceptionHandler = exceptionHandler = function(err, logger) {\n    var stack;\n    if (!logger) {\n      logger = console.error;\n    }\n    logger(err.stack);\n    stack = stackWalk();\n    if (stack.length) {\n      logger("Iced \'stack\' trace (w/ real line numbers):");\n      return logger(stack.join("\\n"));\n    }\n  };\n\n  exports.catchExceptions = function(logger) {\n    return typeof process !== "undefined" && process !== null ? process.on(\'uncaughtException\', function(err) {\n      exceptionHandler(err, logger);\n      return process.exit(1);\n    }) : void 0;\n  };\n\n}).call(this);\n\n  return module.exports;\n})();require[\'./library\'] = (function() {\n  var exports = {}, module = {exports: exports};\n  // Generated by CoffeeScript 1.10.0\n(function() {\n  var C, Pipeliner, _iand, _ior, _timeout, iced,\n    slice = [].slice;\n\n\n\n  C = require(\'./const\');\n\n  exports.iced = iced = require(\'./runtime\');\n\n  _timeout = function(cb, t, res, tmp) {\n    var __iced_it, __iced_passed_deferral;\n    __iced_passed_deferral = iced.findDeferral(arguments);\n    __iced_it = (function(_this) {\n      var arr, rv, which;\n      return function*() {\n        var __iced_deferrals;\n        rv = new iced.Rendezvous;\n        tmp[0] = rv.id(true).defer({\n          assign_fn: (function() {\n            return function() {\n              return arr = slice.call(arguments, 0);\n            };\n          })(),\n          lineno: 20,\n          context: __iced_deferrals\n        });\n        setTimeout(rv.id(false).defer({\n          lineno: 21,\n          context: __iced_deferrals\n        }), t);\n        __iced_deferrals = new iced.Deferrals(__iced_it, {\n          parent: __iced_passed_deferral\n        });\n        rv.wait(__iced_deferrals.defer({\n          assign_fn: (function() {\n            return function() {\n              return which = arguments[0];\n            };\n          })(),\n          lineno: 22\n        }));\n        if (__iced_deferrals.await_exit()) {\n          yield;\n        }\n        if (res) {\n          res[0] = which;\n        }\n        return cb.apply(null, arr);\n      };\n    })(this)();\n    return __iced_it.next();\n  };\n\n  exports.timeout = function(cb, t, res) {\n    var tmp;\n    tmp = [];\n    _timeout(cb, t, res, tmp);\n    return tmp[0];\n  };\n\n  _iand = function(cb, res, tmp) {\n    var __iced_it, __iced_passed_deferral;\n    __iced_passed_deferral = iced.findDeferral(arguments);\n    __iced_it = (function(_this) {\n      var ok;\n      return function*() {\n        var __iced_deferrals;\n        __iced_deferrals = new iced.Deferrals(__iced_it, {\n          parent: __iced_passed_deferral\n        });\n        tmp[0] = __iced_deferrals.defer({\n          assign_fn: (function() {\n            return function() {\n              return ok = arguments[0];\n            };\n          })(),\n          lineno: 39\n        });\n        if (__iced_deferrals.await_exit()) {\n          yield;\n        }\n        if (!ok) {\n          res[0] = false;\n        }\n        return cb();\n      };\n    })(this)();\n    return __iced_it.next();\n  };\n\n  exports.iand = function(cb, res) {\n    var tmp;\n    tmp = [];\n    _iand(cb, res, tmp);\n    return tmp[0];\n  };\n\n  _ior = function(cb, res, tmp) {\n    var __iced_it, __iced_passed_deferral;\n    __iced_passed_deferral = iced.findDeferral(arguments);\n    __iced_it = (function(_this) {\n      var ok;\n      return function*() {\n        var __iced_deferrals;\n        __iced_deferrals = new iced.Deferrals(__iced_it, {\n          parent: __iced_passed_deferral\n        });\n        tmp[0] = __iced_deferrals.defer({\n          assign_fn: (function() {\n            return function() {\n              return ok = arguments[0];\n            };\n          })(),\n          lineno: 58\n        });\n        if (__iced_deferrals.await_exit()) {\n          yield;\n        }\n        if (ok) {\n          res[0] = true;\n        }\n        return cb();\n      };\n    })(this)();\n    return __iced_it.next();\n  };\n\n  exports.ior = function(cb, res) {\n    var tmp;\n    tmp = [];\n    _ior(cb, res, tmp);\n    return tmp[0];\n  };\n\n  exports.Pipeliner = Pipeliner = (function() {\n    function Pipeliner(window, delay) {\n      this.window = window || 1;\n      this.delay = delay || 0;\n      this.queue = [];\n      this.n_out = 0;\n      this.cb = null;\n      this[C.deferrals] = this;\n      this["defer"] = this._defer;\n    }\n\n    Pipeliner.prototype.waitInQueue = function(cb) {\n      var __iced_it, __iced_passed_deferral;\n      __iced_passed_deferral = iced.findDeferral(arguments);\n      __iced_it = (function(_this) {\n        return function*() {\n          var __iced_deferrals, __iced_deferrals1;\n          while (_this.n_out >= _this.window) {\n            __iced_deferrals = new iced.Deferrals(__iced_it, {\n              parent: __iced_passed_deferral,\n              funcname: "Pipeliner.waitInQueue"\n            });\n            _this.cb = __iced_deferrals.defer({\n              lineno: 100\n            });\n            if (__iced_deferrals.await_exit()) {\n              yield;\n            }\n          }\n          _this.n_out++;\n          if (_this.delay) {\n            __iced_deferrals1 = new iced.Deferrals(__iced_it, {\n              parent: __iced_passed_deferral,\n              funcname: "Pipeliner.waitInQueue"\n            });\n            setTimeout(__iced_deferrals1.defer({\n              lineno: 108\n            }), _this.delay);\n            if (__iced_deferrals1.await_exit()) {\n              yield;\n            }\n          }\n          return cb();\n        };\n      })(this)();\n      return __iced_it.next();\n    };\n\n    Pipeliner.prototype.__defer = function(out, deferArgs) {\n      var __iced_it, __iced_passed_deferral;\n      __iced_passed_deferral = iced.findDeferral(arguments);\n      __iced_it = (function(_this) {\n        var tmp, voidCb;\n        return function*() {\n          var __iced_deferrals;\n          __iced_deferrals = new iced.Deferrals(__iced_it, {\n            parent: __iced_passed_deferral,\n            funcname: "Pipeliner.__defer"\n          });\n          voidCb = __iced_deferrals.defer({\n            lineno: 122\n          });\n          out[0] = function() {\n            var args, ref;\n            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            if ((ref = deferArgs.assign_fn) != null) {\n              ref.apply(null, args);\n            }\n            return voidCb();\n          };\n          if (__iced_deferrals.await_exit()) {\n            yield;\n          }\n          _this.n_out--;\n          if (_this.cb) {\n            tmp = _this.cb;\n            _this.cb = null;\n            return tmp();\n          }\n        };\n      })(this)();\n      return __iced_it.next();\n    };\n\n    Pipeliner.prototype._defer = function(deferArgs) {\n      var tmp;\n      tmp = [];\n      this.__defer(tmp, deferArgs);\n      return tmp[0];\n    };\n\n    Pipeliner.prototype.flush = function(cb) {\n      var __iced_it, __iced_passed_deferral;\n      __iced_passed_deferral = iced.findDeferral(arguments);\n      __iced_it = (function(_this) {\n        return function*() {\n          var __iced_deferrals;\n          while (_this.n_out) {\n            __iced_deferrals = new iced.Deferrals(__iced_it, {\n              parent: __iced_passed_deferral,\n              funcname: "Pipeliner.flush"\n            });\n            _this.cb = __iced_deferrals.defer({\n              lineno: 151\n            });\n            if (__iced_deferrals.await_exit()) {\n              yield;\n            }\n          }\n          return cb();\n        };\n      })(this)();\n      return __iced_it.next();\n    };\n\n    return Pipeliner;\n\n  })();\n\n}).call(this);\n\n  return module.exports;\n})();require[\'./main\'] = (function() {\n  var exports = {}, module = {exports: exports};\n  // Generated by CoffeeScript 1.10.0\n(function() {\n  var i, k, len, mod, mods, v;\n\n  exports["const"] = require(\'./const\');\n\n  mods = [require(\'./runtime\'), require(\'./library\')];\n\n  for (i = 0, len = mods.length; i < len; i++) {\n    mod = mods[i];\n    for (k in mod) {\n      v = mod[k];\n      exports[k] = v;\n    }\n  }\n\n}).call(this);\n\n  return module.exports;\n})();\n  return require[\'./main\'];\n}());'
  return module.exports;
})();
    return require['./coffee-script'];
  }();

  if (typeof define === 'function' && define.amd) {
    define(function() { return CoffeeScript; });
  } else {
    root.CoffeeScript = CoffeeScript;
  }
}(this));